// 🚨 This file is generated by `cargo xtask-lsp`

use super::*;

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          RequestTrait                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// A trait for requests.
pub trait RequestTrait {
    const REGISTRATION_METHOD: Option<&'static str>;
    const METHOD: &'static str;
    type RegistrationOptions: 'static + Serialize + DeserializeOwned + Send + Sync;
    type Params: 'static + Serialize + DeserializeOwned + Send + Sync;
    type PartialResult: 'static + Serialize + DeserializeOwned + Send + Sync;
    type Result: 'static + Serialize + DeserializeOwned + Send + Sync;
    type Error: 'static + Serialize + DeserializeOwned + Send + Sync;
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   CallHierarchyIncomingCalls                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to resolve the incoming calls for a given `CallHierarchyItem`.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#callHierarchy_incomingCalls (Documentation)
pub enum CallHierarchyIncomingCalls {}

impl RequestTrait for CallHierarchyIncomingCalls {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "callHierarchy/incomingCalls";
    type RegistrationOptions = ();
    type Params = super::structures::CallHierarchyIncomingCallsParams;
    type PartialResult = Vec<super::structures::CallHierarchyIncomingCall>;
    type Result = CallHierarchyIncomingCallsResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum CallHierarchyIncomingCallsResult {
    CallHierarchyIncomingCallList(Vec<super::structures::CallHierarchyIncomingCall>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   CallHierarchyOutgoingCalls                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to resolve the outgoing calls for a given `CallHierarchyItem`.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#callHierarchy_outgoingCalls (Documentation)
pub enum CallHierarchyOutgoingCalls {}

impl RequestTrait for CallHierarchyOutgoingCalls {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "callHierarchy/outgoingCalls";
    type RegistrationOptions = ();
    type Params = super::structures::CallHierarchyOutgoingCallsParams;
    type PartialResult = Vec<super::structures::CallHierarchyOutgoingCall>;
    type Result = CallHierarchyOutgoingCallsResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum CallHierarchyOutgoingCallsResult {
    CallHierarchyOutgoingCallList(Vec<super::structures::CallHierarchyOutgoingCall>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    ClientRegisterCapability                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↪️ The `client/registerCapability` request is sent from the server to the client to register a new capability
/// handler on the client side.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#client_registerCapability (Documentation)
pub enum ClientRegisterCapability {}

impl RequestTrait for ClientRegisterCapability {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "client/registerCapability";
    type RegistrationOptions = ();
    type Params = super::structures::RegistrationParams;
    type PartialResult = ();
    type Result = Null;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   ClientUnregisterCapability                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↪️ The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability
/// handler on the client side.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#client_unregisterCapability (Documentation)
pub enum ClientUnregisterCapability {}

impl RequestTrait for ClientUnregisterCapability {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "client/unregisterCapability";
    type RegistrationOptions = ();
    type Params = super::structures::UnregistrationParams;
    type PartialResult = ();
    type Result = Null;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       CodeActionResolve                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ Request to resolve additional information for a given code action.The request's
/// parameter is of type {@link CodeAction} the response
/// is of type {@link CodeAction} or a Thenable that resolves to such.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeAction_resolve (Documentation)
pub enum CodeActionResolve {}

impl RequestTrait for CodeActionResolve {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "codeAction/resolve";
    type RegistrationOptions = ();
    type Params = super::structures::CodeAction;
    type PartialResult = ();
    type Result = super::structures::CodeAction;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        CodeLensResolve                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to resolve a command for a given code lens.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeLens_resolve (Documentation)
pub enum CodeLensResolve {}

impl RequestTrait for CodeLensResolve {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "codeLens/resolve";
    type RegistrationOptions = ();
    type Params = super::structures::CodeLens;
    type PartialResult = ();
    type Result = super::structures::CodeLens;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     CompletionItemResolve                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ Request to resolve additional information for a given completion item.The request's
/// parameter is of type {@link CompletionItem} the response
/// is of type {@link CompletionItem} or a Thenable that resolves to such.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#completionItem_resolve (Documentation)
pub enum CompletionItemResolve {}

impl RequestTrait for CompletionItemResolve {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "completionItem/resolve";
    type RegistrationOptions = ();
    type Params = super::structures::CompletionItem;
    type PartialResult = ();
    type Result = super::structures::CompletionItem;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      DocumentLinkResolve                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ Request to resolve additional information for a given document link. The request's
/// parameter is of type {@link DocumentLink} the response
/// is of type {@link DocumentLink} or a Thenable that resolves to such.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentLink_resolve (Documentation)
pub enum DocumentLinkResolve {}

impl RequestTrait for DocumentLinkResolve {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "documentLink/resolve";
    type RegistrationOptions = ();
    type Params = super::structures::DocumentLink;
    type PartialResult = ();
    type Result = super::structures::DocumentLink;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           Initialize                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ The initialize request is sent from the client to the server.
/// It is sent once as the request after starting up the server.
/// The requests parameter is of type {@link InitializeParams}
/// the response if of type {@link InitializeResult} of a Thenable that
/// resolves to such.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#initialize (Documentation)
pub enum Initialize {}

impl RequestTrait for Initialize {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "initialize";
    type RegistrationOptions = ();
    type Params = super::structures::InitializeParams;
    type PartialResult = ();
    type Result = super::structures::InitializeResult;
    type Error = super::structures::InitializeError;
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        InlayHintResolve                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to resolve additional properties for an inlay hint.
/// The request's parameter is of type {@link InlayHint}, the response is
/// of type {@link InlayHint} or a Thenable that resolves to such.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlayHint_resolve (Documentation)
pub enum InlayHintResolve {}

impl RequestTrait for InlayHintResolve {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "inlayHint/resolve";
    type RegistrationOptions = ();
    type Params = super::structures::InlayHint;
    type PartialResult = ();
    type Result = super::structures::InlayHint;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                            Shutdown                                            //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A shutdown request is sent from the client to the server.
/// It is sent once when the client decides to shutdown the
/// server. The only notification that is sent after a shutdown request
/// is the exit event.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#shutdown (Documentation)
pub enum Shutdown {}

impl RequestTrait for Shutdown {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "shutdown";
    type RegistrationOptions = ();
    type Params = ();
    type PartialResult = ();
    type Result = Null;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     TextDocumentCodeAction                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to provide commands for the given text document and range.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_codeAction (Documentation)
pub enum TextDocumentCodeAction {}

impl RequestTrait for TextDocumentCodeAction {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/codeAction";
    type RegistrationOptions = super::structures::CodeActionRegistrationOptions;
    type Params = super::structures::CodeActionParams;
    type PartialResult = Vec<TextDocumentCodeActionPartialResult>;
    type Result = TextDocumentCodeActionResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentCodeActionPartialResult {
    Command(super::structures::Command),
    CodeAction(super::structures::CodeAction),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentCodeActionResult {
    CommandOrCodeActionList(Vec<TextDocumentCodeActionResultCommandOrCodeAction>),
    Null(Null),
}
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentCodeActionResultCommandOrCodeAction {
    Command(super::structures::Command),
    CodeAction(super::structures::CodeAction),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      TextDocumentCodeLens                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to provide code lens for the given text document.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_codeLens (Documentation)
pub enum TextDocumentCodeLens {}

impl RequestTrait for TextDocumentCodeLens {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/codeLens";
    type RegistrationOptions = super::structures::CodeLensRegistrationOptions;
    type Params = super::structures::CodeLensParams;
    type PartialResult = Vec<super::structures::CodeLens>;
    type Result = TextDocumentCodeLensResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentCodeLensResult {
    CodeLensList(Vec<super::structures::CodeLens>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 TextDocumentColorPresentation                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to list all presentation for a color. The request's
/// parameter is of type {@link ColorPresentationParams} the
/// response is of type {@link ColorInformation ColorInformation[]} or a Thenable
/// that resolves to such.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_colorPresentation (Documentation)
pub enum TextDocumentColorPresentation {}

impl RequestTrait for TextDocumentColorPresentation {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/colorPresentation";
    type RegistrationOptions = TextDocumentColorPresentationRegistrationOptions;
    type Params = super::structures::ColorPresentationParams;
    type PartialResult = Vec<super::structures::ColorPresentation>;
    type Result = Vec<super::structures::ColorPresentation>;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TextDocumentColorPresentationRegistrationOptions {
    #[serde(flatten)]
    work_done_progress_options: super::structures::WorkDoneProgressOptions,
    #[serde(flatten)]
    text_document_registration_options: super::structures::TextDocumentRegistrationOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     TextDocumentCompletion                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ Request to request completion at a given text document position. The request's
/// parameter is of type {@link TextDocumentPosition} the response
/// is of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}
/// or a Thenable that resolves to such.
///
/// The request can delay the computation of the {@link CompletionItem.detail `detail`}
/// and {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`
/// request. However, properties that are needed for the initial sorting and filtering, like `sortText`,
/// `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_completion (Documentation)
pub enum TextDocumentCompletion {}

impl RequestTrait for TextDocumentCompletion {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/completion";
    type RegistrationOptions = super::structures::CompletionRegistrationOptions;
    type Params = super::structures::CompletionParams;
    type PartialResult = Vec<super::structures::CompletionItem>;
    type Result = TextDocumentCompletionResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentCompletionResult {
    CompletionItemList(Vec<super::structures::CompletionItem>),
    CompletionList(super::structures::CompletionList),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    TextDocumentDeclaration                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to resolve the type definition locations of a symbol at a given text
/// document position. The request's parameter is of type {@link TextDocumentPositionParams}
/// the response is of type {@link Declaration} or a typed array of {@link DeclarationLink}
/// or a Thenable that resolves to such.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_declaration (Documentation)
pub enum TextDocumentDeclaration {}

impl RequestTrait for TextDocumentDeclaration {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/declaration";
    type RegistrationOptions = super::structures::DeclarationRegistrationOptions;
    type Params = super::structures::DeclarationParams;
    type PartialResult = TextDocumentDeclarationPartialResult;
    type Result = TextDocumentDeclarationResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentDeclarationPartialResult {
    LocationList(Vec<super::structures::Location>),
    DeclarationLinkList(Vec<super::type_aliases::DeclarationLink>),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentDeclarationResult {
    Declaration(super::type_aliases::Declaration),
    DeclarationLinkList(Vec<super::type_aliases::DeclarationLink>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     TextDocumentDefinition                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to resolve the definition location of a symbol at a given text
/// document position. The request's parameter is of type {@link TextDocumentPosition}
/// the response is of either type {@link Definition} or a typed array of
/// {@link DefinitionLink} or a Thenable that resolves to such.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_definition (Documentation)
pub enum TextDocumentDefinition {}

impl RequestTrait for TextDocumentDefinition {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/definition";
    type RegistrationOptions = super::structures::DefinitionRegistrationOptions;
    type Params = super::structures::DefinitionParams;
    type PartialResult = TextDocumentDefinitionPartialResult;
    type Result = TextDocumentDefinitionResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentDefinitionPartialResult {
    LocationList(Vec<super::structures::Location>),
    DefinitionLinkList(Vec<super::type_aliases::DefinitionLink>),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentDefinitionResult {
    Definition(super::type_aliases::Definition),
    DefinitionLinkList(Vec<super::type_aliases::DefinitionLink>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     TextDocumentDiagnostic                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ The document diagnostic request definition.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_diagnostic (Documentation)
pub enum TextDocumentDiagnostic {}

impl RequestTrait for TextDocumentDiagnostic {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/diagnostic";
    type RegistrationOptions = super::structures::DiagnosticRegistrationOptions;
    type Params = super::structures::DocumentDiagnosticParams;
    type PartialResult = super::structures::DocumentDiagnosticReportPartialResult;
    type Result = super::type_aliases::DocumentDiagnosticReport;
    type Error = super::structures::DiagnosticServerCancellationData;
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   TextDocumentDocumentColor                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to list all color symbols found in a given text document. The request's
/// parameter is of type {@link DocumentColorParams} the
/// response is of type {@link ColorInformation ColorInformation[]} or a Thenable
/// that resolves to such.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_documentColor (Documentation)
pub enum TextDocumentDocumentColor {}

impl RequestTrait for TextDocumentDocumentColor {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/documentColor";
    type RegistrationOptions = super::structures::DocumentColorRegistrationOptions;
    type Params = super::structures::DocumentColorParams;
    type PartialResult = Vec<super::structures::ColorInformation>;
    type Result = Vec<super::structures::ColorInformation>;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 TextDocumentDocumentHighlight                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ Request to resolve a {@link DocumentHighlight} for a given
/// text document position. The request's parameter is of type {@link TextDocumentPosition}
/// the request response is an array of type {@link DocumentHighlight}
/// or a Thenable that resolves to such.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_documentHighlight (Documentation)
pub enum TextDocumentDocumentHighlight {}

impl RequestTrait for TextDocumentDocumentHighlight {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/documentHighlight";
    type RegistrationOptions = super::structures::DocumentHighlightRegistrationOptions;
    type Params = super::structures::DocumentHighlightParams;
    type PartialResult = Vec<super::structures::DocumentHighlight>;
    type Result = TextDocumentDocumentHighlightResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentDocumentHighlightResult {
    DocumentHighlightList(Vec<super::structures::DocumentHighlight>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    TextDocumentDocumentLink                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to provide document links
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_documentLink (Documentation)
pub enum TextDocumentDocumentLink {}

impl RequestTrait for TextDocumentDocumentLink {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/documentLink";
    type RegistrationOptions = super::structures::DocumentLinkRegistrationOptions;
    type Params = super::structures::DocumentLinkParams;
    type PartialResult = Vec<super::structures::DocumentLink>;
    type Result = TextDocumentDocumentLinkResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentDocumentLinkResult {
    DocumentLinkList(Vec<super::structures::DocumentLink>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   TextDocumentDocumentSymbol                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to list all symbols found in a given text document. The request's
/// parameter is of type {@link TextDocumentIdentifier} the
/// response is of type {@link SymbolInformation SymbolInformation[]} or a Thenable
/// that resolves to such.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_documentSymbol (Documentation)
pub enum TextDocumentDocumentSymbol {}

impl RequestTrait for TextDocumentDocumentSymbol {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/documentSymbol";
    type RegistrationOptions = super::structures::DocumentSymbolRegistrationOptions;
    type Params = super::structures::DocumentSymbolParams;
    type PartialResult = TextDocumentDocumentSymbolPartialResult;
    type Result = TextDocumentDocumentSymbolResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentDocumentSymbolPartialResult {
    SymbolInformationList(Vec<super::structures::SymbolInformation>),
    DocumentSymbolList(Vec<super::structures::DocumentSymbol>),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentDocumentSymbolResult {
    SymbolInformationList(Vec<super::structures::SymbolInformation>),
    DocumentSymbolList(Vec<super::structures::DocumentSymbol>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    TextDocumentFoldingRange                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to provide folding ranges in a document. The request's
/// parameter is of type {@link FoldingRangeParams}, the
/// response is of type {@link FoldingRangeList} or a Thenable
/// that resolves to such.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_foldingRange (Documentation)
pub enum TextDocumentFoldingRange {}

impl RequestTrait for TextDocumentFoldingRange {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/foldingRange";
    type RegistrationOptions = super::structures::FoldingRangeRegistrationOptions;
    type Params = super::structures::FoldingRangeParams;
    type PartialResult = Vec<super::structures::FoldingRange>;
    type Result = TextDocumentFoldingRangeResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentFoldingRangeResult {
    FoldingRangeList(Vec<super::structures::FoldingRange>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     TextDocumentFormatting                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to format a whole document.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_formatting (Documentation)
pub enum TextDocumentFormatting {}

impl RequestTrait for TextDocumentFormatting {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/formatting";
    type RegistrationOptions = super::structures::DocumentFormattingRegistrationOptions;
    type Params = super::structures::DocumentFormattingParams;
    type PartialResult = ();
    type Result = TextDocumentFormattingResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentFormattingResult {
    TextEditList(Vec<super::structures::TextEdit>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       TextDocumentHover                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ Request to request hover information at a given text document position. The request's
/// parameter is of type {@link TextDocumentPosition} the response is of
/// type {@link Hover} or a Thenable that resolves to such.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_hover (Documentation)
pub enum TextDocumentHover {}

impl RequestTrait for TextDocumentHover {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/hover";
    type RegistrationOptions = super::structures::HoverRegistrationOptions;
    type Params = super::structures::HoverParams;
    type PartialResult = ();
    type Result = TextDocumentHoverResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentHoverResult {
    Hover(super::structures::Hover),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   TextDocumentImplementation                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to resolve the implementation locations of a symbol at a given text
/// document position. The request's parameter is of type {@link TextDocumentPositionParams}
/// the response is of type {@link Definition} or a Thenable that resolves to such.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_implementation (Documentation)
pub enum TextDocumentImplementation {}

impl RequestTrait for TextDocumentImplementation {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/implementation";
    type RegistrationOptions = super::structures::ImplementationRegistrationOptions;
    type Params = super::structures::ImplementationParams;
    type PartialResult = TextDocumentImplementationPartialResult;
    type Result = TextDocumentImplementationResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentImplementationPartialResult {
    LocationList(Vec<super::structures::Location>),
    DefinitionLinkList(Vec<super::type_aliases::DefinitionLink>),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentImplementationResult {
    Definition(super::type_aliases::Definition),
    DefinitionLinkList(Vec<super::type_aliases::DefinitionLink>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     TextDocumentInlayHint                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to provide inlay hints in a document. The request's parameter is of
/// type {@link InlayHintsParams}, the response is of type
/// {@link InlayHint InlayHint[]} or a Thenable that resolves to such.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_inlayHint (Documentation)
pub enum TextDocumentInlayHint {}

impl RequestTrait for TextDocumentInlayHint {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/inlayHint";
    type RegistrationOptions = super::structures::InlayHintRegistrationOptions;
    type Params = super::structures::InlayHintParams;
    type PartialResult = Vec<super::structures::InlayHint>;
    type Result = TextDocumentInlayHintResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentInlayHintResult {
    InlayHintList(Vec<super::structures::InlayHint>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    TextDocumentInlineValue                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to provide inline values in a document. The request's parameter is of
/// type {@link InlineValueParams}, the response is of type
/// {@link InlineValue InlineValue[]} or a Thenable that resolves to such.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_inlineValue (Documentation)
pub enum TextDocumentInlineValue {}

impl RequestTrait for TextDocumentInlineValue {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/inlineValue";
    type RegistrationOptions = super::structures::InlineValueRegistrationOptions;
    type Params = super::structures::InlineValueParams;
    type PartialResult = Vec<super::type_aliases::InlineValue>;
    type Result = TextDocumentInlineValueResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentInlineValueResult {
    InlineValueList(Vec<super::type_aliases::InlineValue>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 TextDocumentLinkedEditingRange                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to provide ranges that can be edited together.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_linkedEditingRange (Documentation)
pub enum TextDocumentLinkedEditingRange {}

impl RequestTrait for TextDocumentLinkedEditingRange {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/linkedEditingRange";
    type RegistrationOptions = super::structures::LinkedEditingRangeRegistrationOptions;
    type Params = super::structures::LinkedEditingRangeParams;
    type PartialResult = ();
    type Result = TextDocumentLinkedEditingRangeResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentLinkedEditingRangeResult {
    LinkedEditingRanges(super::structures::LinkedEditingRanges),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      TextDocumentMoniker                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to get the moniker of a symbol at a given text document position.
/// The request parameter is of type {@link TextDocumentPositionParams}.
/// The response is of type {@link Moniker Moniker[]} or `null`.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_moniker (Documentation)
pub enum TextDocumentMoniker {}

impl RequestTrait for TextDocumentMoniker {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/moniker";
    type RegistrationOptions = super::structures::MonikerRegistrationOptions;
    type Params = super::structures::MonikerParams;
    type PartialResult = Vec<super::structures::Moniker>;
    type Result = TextDocumentMonikerResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentMonikerResult {
    MonikerList(Vec<super::structures::Moniker>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  TextDocumentOnTypeFormatting                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to format a document on type.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_onTypeFormatting (Documentation)
pub enum TextDocumentOnTypeFormatting {}

impl RequestTrait for TextDocumentOnTypeFormatting {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/onTypeFormatting";
    type RegistrationOptions = super::structures::DocumentOnTypeFormattingRegistrationOptions;
    type Params = super::structures::DocumentOnTypeFormattingParams;
    type PartialResult = ();
    type Result = TextDocumentOnTypeFormattingResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentOnTypeFormattingResult {
    TextEditList(Vec<super::structures::TextEdit>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                TextDocumentPrepareCallHierarchy                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to result a `CallHierarchyItem` in a document at a given position.
/// Can be used as an input to an incoming or outgoing call hierarchy.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_prepareCallHierarchy (Documentation)
pub enum TextDocumentPrepareCallHierarchy {}

impl RequestTrait for TextDocumentPrepareCallHierarchy {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/prepareCallHierarchy";
    type RegistrationOptions = super::structures::CallHierarchyRegistrationOptions;
    type Params = super::structures::CallHierarchyPrepareParams;
    type PartialResult = ();
    type Result = TextDocumentPrepareCallHierarchyResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentPrepareCallHierarchyResult {
    CallHierarchyItemList(Vec<super::structures::CallHierarchyItem>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   TextDocumentPrepareRename                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to test and perform the setup necessary for a rename.
///
/// @since 3.16 - support for default behavior
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_prepareRename (Documentation)
pub enum TextDocumentPrepareRename {}

impl RequestTrait for TextDocumentPrepareRename {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/prepareRename";
    type RegistrationOptions = ();
    type Params = super::structures::PrepareRenameParams;
    type PartialResult = ();
    type Result = TextDocumentPrepareRenameResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentPrepareRenameResult {
    PrepareRenameResult(super::type_aliases::PrepareRenameResult),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                TextDocumentPrepareTypeHierarchy                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to result a `TypeHierarchyItem` in a document at a given position.
/// Can be used as an input to a subtypes or supertypes type hierarchy.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_prepareTypeHierarchy (Documentation)
pub enum TextDocumentPrepareTypeHierarchy {}

impl RequestTrait for TextDocumentPrepareTypeHierarchy {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/prepareTypeHierarchy";
    type RegistrationOptions = super::structures::TypeHierarchyRegistrationOptions;
    type Params = super::structures::TypeHierarchyPrepareParams;
    type PartialResult = ();
    type Result = TextDocumentPrepareTypeHierarchyResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentPrepareTypeHierarchyResult {
    TypeHierarchyItemList(Vec<super::structures::TypeHierarchyItem>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  TextDocumentRangeFormatting                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to format a range in a document.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_rangeFormatting (Documentation)
pub enum TextDocumentRangeFormatting {}

impl RequestTrait for TextDocumentRangeFormatting {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/rangeFormatting";
    type RegistrationOptions = super::structures::DocumentRangeFormattingRegistrationOptions;
    type Params = super::structures::DocumentRangeFormattingParams;
    type PartialResult = ();
    type Result = TextDocumentRangeFormattingResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentRangeFormattingResult {
    TextEditList(Vec<super::structures::TextEdit>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     TextDocumentReferences                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to resolve project-wide references for the symbol denoted
/// by the given text document position. The request's parameter is of
/// type {@link ReferenceParams} the response is of type
/// {@link Location Location[]} or a Thenable that resolves to such.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_references (Documentation)
pub enum TextDocumentReferences {}

impl RequestTrait for TextDocumentReferences {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/references";
    type RegistrationOptions = super::structures::ReferenceRegistrationOptions;
    type Params = super::structures::ReferenceParams;
    type PartialResult = Vec<super::structures::Location>;
    type Result = TextDocumentReferencesResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentReferencesResult {
    LocationList(Vec<super::structures::Location>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       TextDocumentRename                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to rename a symbol.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_rename (Documentation)
pub enum TextDocumentRename {}

impl RequestTrait for TextDocumentRename {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/rename";
    type RegistrationOptions = super::structures::RenameRegistrationOptions;
    type Params = super::structures::RenameParams;
    type PartialResult = ();
    type Result = TextDocumentRenameResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentRenameResult {
    WorkspaceEdit(super::structures::WorkspaceEdit),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   TextDocumentSelectionRange                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to provide selection ranges in a document. The request's
/// parameter is of type {@link SelectionRangeParams}, the
/// response is of type {@link SelectionRange SelectionRange[]} or a Thenable
/// that resolves to such.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_selectionRange (Documentation)
pub enum TextDocumentSelectionRange {}

impl RequestTrait for TextDocumentSelectionRange {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/selectionRange";
    type RegistrationOptions = super::structures::SelectionRangeRegistrationOptions;
    type Params = super::structures::SelectionRangeParams;
    type PartialResult = Vec<super::structures::SelectionRange>;
    type Result = TextDocumentSelectionRangeResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentSelectionRangeResult {
    SelectionRangeList(Vec<super::structures::SelectionRange>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 TextDocumentSemanticTokensFull                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_semanticTokens_full (Documentation)
pub enum TextDocumentSemanticTokensFull {}

impl RequestTrait for TextDocumentSemanticTokensFull {
    const REGISTRATION_METHOD: Option<&'static str> = Some("textDocument/semanticTokens");
    const METHOD: &'static str = "textDocument/semanticTokens/full";
    type RegistrationOptions = super::structures::SemanticTokensRegistrationOptions;
    type Params = super::structures::SemanticTokensParams;
    type PartialResult = super::structures::SemanticTokensPartialResult;
    type Result = TextDocumentSemanticTokensFullResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentSemanticTokensFullResult {
    SemanticTokens(super::structures::SemanticTokens),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                              TextDocumentSemanticTokensFullDelta                               //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_semanticTokens_full_delta (Documentation)
pub enum TextDocumentSemanticTokensFullDelta {}

impl RequestTrait for TextDocumentSemanticTokensFullDelta {
    const REGISTRATION_METHOD: Option<&'static str> = Some("textDocument/semanticTokens");
    const METHOD: &'static str = "textDocument/semanticTokens/full/delta";
    type RegistrationOptions = super::structures::SemanticTokensRegistrationOptions;
    type Params = super::structures::SemanticTokensDeltaParams;
    type PartialResult = TextDocumentSemanticTokensFullDeltaPartialResult;
    type Result = TextDocumentSemanticTokensFullDeltaResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentSemanticTokensFullDeltaPartialResult {
    SemanticTokensPartialResult(super::structures::SemanticTokensPartialResult),
    SemanticTokensDeltaPartialResult(super::structures::SemanticTokensDeltaPartialResult),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentSemanticTokensFullDeltaResult {
    SemanticTokens(super::structures::SemanticTokens),
    SemanticTokensDelta(super::structures::SemanticTokensDelta),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                TextDocumentSemanticTokensRange                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_semanticTokens_range (Documentation)
pub enum TextDocumentSemanticTokensRange {}

impl RequestTrait for TextDocumentSemanticTokensRange {
    const REGISTRATION_METHOD: Option<&'static str> = Some("textDocument/semanticTokens");
    const METHOD: &'static str = "textDocument/semanticTokens/range";
    type RegistrationOptions = ();
    type Params = super::structures::SemanticTokensRangeParams;
    type PartialResult = super::structures::SemanticTokensPartialResult;
    type Result = TextDocumentSemanticTokensRangeResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentSemanticTokensRangeResult {
    SemanticTokens(super::structures::SemanticTokens),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   TextDocumentSignatureHelp                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_signatureHelp (Documentation)
pub enum TextDocumentSignatureHelp {}

impl RequestTrait for TextDocumentSignatureHelp {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/signatureHelp";
    type RegistrationOptions = super::structures::SignatureHelpRegistrationOptions;
    type Params = super::structures::SignatureHelpParams;
    type PartialResult = ();
    type Result = TextDocumentSignatureHelpResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentSignatureHelpResult {
    SignatureHelp(super::structures::SignatureHelp),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   TextDocumentTypeDefinition                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to resolve the type definition locations of a symbol at a given text
/// document position. The request's parameter is of type {@link TextDocumentPositionParams}
/// the response is of type {@link Definition} or a Thenable that resolves to such.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_typeDefinition (Documentation)
pub enum TextDocumentTypeDefinition {}

impl RequestTrait for TextDocumentTypeDefinition {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/typeDefinition";
    type RegistrationOptions = super::structures::TypeDefinitionRegistrationOptions;
    type Params = super::structures::TypeDefinitionParams;
    type PartialResult = TextDocumentTypeDefinitionPartialResult;
    type Result = TextDocumentTypeDefinitionResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentTypeDefinitionPartialResult {
    LocationList(Vec<super::structures::Location>),
    DefinitionLinkList(Vec<super::type_aliases::DefinitionLink>),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentTypeDefinitionResult {
    Definition(super::type_aliases::Definition),
    DefinitionLinkList(Vec<super::type_aliases::DefinitionLink>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 TextDocumentWillSaveWaitUntil                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A document will save request is sent from the client to the server before
/// the document is actually saved. The request can return an array of TextEdits
/// which will be applied to the text document before it is saved. Please note that
/// clients might drop results if computing the text edits took too long or if a
/// server constantly fails on this request. This is done to keep the save fast and
/// reliable.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_willSaveWaitUntil (Documentation)
pub enum TextDocumentWillSaveWaitUntil {}

impl RequestTrait for TextDocumentWillSaveWaitUntil {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "textDocument/willSaveWaitUntil";
    type RegistrationOptions = super::structures::TextDocumentRegistrationOptions;
    type Params = super::structures::WillSaveTextDocumentParams;
    type PartialResult = ();
    type Result = TextDocumentWillSaveWaitUntilResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentWillSaveWaitUntilResult {
    TextEditList(Vec<super::structures::TextEdit>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     TypeHierarchySubtypes                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to resolve the subtypes for a given `TypeHierarchyItem`.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#typeHierarchy_subtypes (Documentation)
pub enum TypeHierarchySubtypes {}

impl RequestTrait for TypeHierarchySubtypes {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "typeHierarchy/subtypes";
    type RegistrationOptions = ();
    type Params = super::structures::TypeHierarchySubtypesParams;
    type PartialResult = Vec<super::structures::TypeHierarchyItem>;
    type Result = TypeHierarchySubtypesResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TypeHierarchySubtypesResult {
    TypeHierarchyItemList(Vec<super::structures::TypeHierarchyItem>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    TypeHierarchySupertypes                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to resolve the supertypes for a given `TypeHierarchyItem`.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#typeHierarchy_supertypes (Documentation)
pub enum TypeHierarchySupertypes {}

impl RequestTrait for TypeHierarchySupertypes {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "typeHierarchy/supertypes";
    type RegistrationOptions = ();
    type Params = super::structures::TypeHierarchySupertypesParams;
    type PartialResult = Vec<super::structures::TypeHierarchyItem>;
    type Result = TypeHierarchySupertypesResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TypeHierarchySupertypesResult {
    TypeHierarchyItemList(Vec<super::structures::TypeHierarchyItem>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       WindowShowDocument                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↪️ A request to show a document. This request might open an
/// external program depending on the value of the URI to open.
/// For example a request to open `https://code.visualstudio.com/`
/// will very likely open the URI in a WEB browser.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#window_showDocument (Documentation)
pub enum WindowShowDocument {}

impl RequestTrait for WindowShowDocument {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "window/showDocument";
    type RegistrationOptions = ();
    type Params = super::structures::ShowDocumentParams;
    type PartialResult = ();
    type Result = super::structures::ShowDocumentResult;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    WindowShowMessageRequest                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↪️ The show message request is sent from the server to the client to show a message
/// and a set of options actions to the user.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#window_showMessageRequest (Documentation)
pub enum WindowShowMessageRequest {}

impl RequestTrait for WindowShowMessageRequest {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "window/showMessageRequest";
    type RegistrationOptions = ();
    type Params = super::structures::ShowMessageRequestParams;
    type PartialResult = ();
    type Result = WindowShowMessageRequestResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum WindowShowMessageRequestResult {
    MessageActionItem(super::structures::MessageActionItem),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  WindowWorkDoneProgressCreate                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↪️ The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress
/// reporting from the server.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#window_workDoneProgress_create (Documentation)
pub enum WindowWorkDoneProgressCreate {}

impl RequestTrait for WindowWorkDoneProgressCreate {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "window/workDoneProgress/create";
    type RegistrationOptions = ();
    type Params = super::structures::WorkDoneProgressCreateParams;
    type PartialResult = ();
    type Result = Null;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       WorkspaceApplyEdit                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↪️ A request sent from the server to the client to modified certain resources.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_applyEdit (Documentation)
pub enum WorkspaceApplyEdit {}

impl RequestTrait for WorkspaceApplyEdit {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "workspace/applyEdit";
    type RegistrationOptions = ();
    type Params = super::structures::ApplyWorkspaceEditParams;
    type PartialResult = ();
    type Result = super::structures::ApplyWorkspaceEditResult;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    WorkspaceCodeLensRefresh                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↪️ A request to refresh all code actions
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_codeLens_refresh (Documentation)
pub enum WorkspaceCodeLensRefresh {}

impl RequestTrait for WorkspaceCodeLensRefresh {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "workspace/codeLens/refresh";
    type RegistrationOptions = ();
    type Params = ();
    type PartialResult = ();
    type Result = Null;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     WorkspaceConfiguration                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↪️ The 'workspace/configuration' request is sent from the server to the client to fetch a certain
/// configuration setting.
///
/// This pull model replaces the old push model where the client signaled configuration change via an
/// event. If the server still needs to react to configuration changes (since the server caches the
/// result of `workspace/configuration` requests) the server should register for an empty configuration
/// change event and empty the cache if such an event is received.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_configuration (Documentation)
pub enum WorkspaceConfiguration {}

impl RequestTrait for WorkspaceConfiguration {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "workspace/configuration";
    type RegistrationOptions = ();
    type Params = super::structures::ConfigurationParams;
    type PartialResult = ();
    type Result = Vec<super::type_aliases::LspAny>;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      WorkspaceDiagnostic                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ The workspace diagnostic request definition.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_diagnostic (Documentation)
pub enum WorkspaceDiagnostic {}

impl RequestTrait for WorkspaceDiagnostic {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "workspace/diagnostic";
    type RegistrationOptions = ();
    type Params = super::structures::WorkspaceDiagnosticParams;
    type PartialResult = super::structures::WorkspaceDiagnosticReportPartialResult;
    type Result = super::structures::WorkspaceDiagnosticReport;
    type Error = super::structures::DiagnosticServerCancellationData;
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   WorkspaceDiagnosticRefresh                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↪️ The diagnostic refresh request definition.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_diagnostic_refresh (Documentation)
pub enum WorkspaceDiagnosticRefresh {}

impl RequestTrait for WorkspaceDiagnosticRefresh {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "workspace/diagnostic/refresh";
    type RegistrationOptions = ();
    type Params = ();
    type PartialResult = ();
    type Result = Null;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    WorkspaceExecuteCommand                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request send from the client to the server to execute a command. The request might return
/// a workspace edit which the client will apply to the workspace.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_executeCommand (Documentation)
pub enum WorkspaceExecuteCommand {}

impl RequestTrait for WorkspaceExecuteCommand {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "workspace/executeCommand";
    type RegistrationOptions = super::structures::ExecuteCommandRegistrationOptions;
    type Params = super::structures::ExecuteCommandParams;
    type PartialResult = ();
    type Result = WorkspaceExecuteCommandResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum WorkspaceExecuteCommandResult {
    LspAny(super::type_aliases::LspAny),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   WorkspaceInlayHintRefresh                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↪️ @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_inlayHint_refresh (Documentation)
pub enum WorkspaceInlayHintRefresh {}

impl RequestTrait for WorkspaceInlayHintRefresh {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "workspace/inlayHint/refresh";
    type RegistrationOptions = ();
    type Params = ();
    type PartialResult = ();
    type Result = Null;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  WorkspaceInlineValueRefresh                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↪️ @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_inlineValue_refresh (Documentation)
pub enum WorkspaceInlineValueRefresh {}

impl RequestTrait for WorkspaceInlineValueRefresh {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "workspace/inlineValue/refresh";
    type RegistrationOptions = ();
    type Params = ();
    type PartialResult = ();
    type Result = Null;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 WorkspaceSemanticTokensRefresh                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↪️ @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_semanticTokens_refresh (Documentation)
pub enum WorkspaceSemanticTokensRefresh {}

impl RequestTrait for WorkspaceSemanticTokensRefresh {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "workspace/semanticTokens/refresh";
    type RegistrationOptions = ();
    type Params = ();
    type PartialResult = ();
    type Result = Null;
    type Error = ();
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        WorkspaceSymbol                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to list project-wide symbols matching the query string given
/// by the {@link WorkspaceSymbolParams}. The response is
/// of type {@link SymbolInformation SymbolInformation[]} or a Thenable that
/// resolves to such.
///
/// @since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients
///  need to advertise support for WorkspaceSymbols via the client capability
///  `workspace.symbol.resolveSupport`.
///
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_symbol (Documentation)
pub enum WorkspaceSymbol {}

impl RequestTrait for WorkspaceSymbol {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "workspace/symbol";
    type RegistrationOptions = super::structures::WorkspaceSymbolRegistrationOptions;
    type Params = super::structures::WorkspaceSymbolParams;
    type PartialResult = WorkspaceSymbolPartialResult;
    type Result = WorkspaceSymbolResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum WorkspaceSymbolPartialResult {
    SymbolInformationList(Vec<super::structures::SymbolInformation>),
    WorkspaceSymbolList(Vec<super::structures::WorkspaceSymbol>),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum WorkspaceSymbolResult {
    SymbolInformationList(Vec<super::structures::SymbolInformation>),
    WorkspaceSymbolList(Vec<super::structures::WorkspaceSymbol>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    WorkspaceWillCreateFiles                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ The will create files request is sent from the client to the server before files are actually
/// created as long as the creation is triggered from within the client.
///
/// The request can return a `WorkspaceEdit` which will be applied to workspace before the
/// files are created. Hence the `WorkspaceEdit` can not manipulate the content of the file
/// to be created.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_willCreateFiles (Documentation)
pub enum WorkspaceWillCreateFiles {}

impl RequestTrait for WorkspaceWillCreateFiles {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "workspace/willCreateFiles";
    type RegistrationOptions = super::structures::FileOperationRegistrationOptions;
    type Params = super::structures::CreateFilesParams;
    type PartialResult = ();
    type Result = WorkspaceWillCreateFilesResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum WorkspaceWillCreateFilesResult {
    WorkspaceEdit(super::structures::WorkspaceEdit),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    WorkspaceWillDeleteFiles                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ The did delete files notification is sent from the client to the server when
/// files were deleted from within the client.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_willDeleteFiles (Documentation)
pub enum WorkspaceWillDeleteFiles {}

impl RequestTrait for WorkspaceWillDeleteFiles {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "workspace/willDeleteFiles";
    type RegistrationOptions = super::structures::FileOperationRegistrationOptions;
    type Params = super::structures::DeleteFilesParams;
    type PartialResult = ();
    type Result = WorkspaceWillDeleteFilesResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum WorkspaceWillDeleteFilesResult {
    WorkspaceEdit(super::structures::WorkspaceEdit),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    WorkspaceWillRenameFiles                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ The will rename files request is sent from the client to the server before files are actually
/// renamed as long as the rename is triggered from within the client.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_willRenameFiles (Documentation)
pub enum WorkspaceWillRenameFiles {}

impl RequestTrait for WorkspaceWillRenameFiles {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "workspace/willRenameFiles";
    type RegistrationOptions = super::structures::FileOperationRegistrationOptions;
    type Params = super::structures::RenameFilesParams;
    type PartialResult = ();
    type Result = WorkspaceWillRenameFilesResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum WorkspaceWillRenameFilesResult {
    WorkspaceEdit(super::structures::WorkspaceEdit),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   WorkspaceWorkspaceFolders                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↪️ The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspace_workspaceFolders (Documentation)
pub enum WorkspaceWorkspaceFolders {}

impl RequestTrait for WorkspaceWorkspaceFolders {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "workspace/workspaceFolders";
    type RegistrationOptions = ();
    type Params = ();
    type PartialResult = ();
    type Result = WorkspaceWorkspaceFoldersResult;
    type Error = ();
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum WorkspaceWorkspaceFoldersResult {
    WorkspaceFolderList(Vec<super::structures::WorkspaceFolder>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     WorkspaceSymbolResolve                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] ↩️ A request to resolve the range inside the workspace
/// symbol's location.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceSymbol_resolve (Documentation)
pub enum WorkspaceSymbolResolve {}

impl RequestTrait for WorkspaceSymbolResolve {
    const REGISTRATION_METHOD: Option<&'static str> = None;
    const METHOD: &'static str = "workspaceSymbol/resolve";
    type RegistrationOptions = ();
    type Params = super::structures::WorkspaceSymbol;
    type PartialResult = ();
    type Result = super::structures::WorkspaceSymbol;
    type Error = ();
}
