// 🚨 This file is generated by `cargo xtask-lsp`

use super::*;

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   ChangeAnnotationIdentifier                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] An identifier to refer to a change annotation stored with a workspace edit.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#changeAnnotationIdentifier (Documentation)
pub type ChangeAnnotationIdentifier = String;

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          Declaration                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The declaration of a symbol representation as one or many {@link Location locations}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#declaration (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum Declaration {
    Location(super::structures::Location),
    LocationList(Vec<super::structures::Location>),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        DeclarationLink                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Information about where a symbol is declared.
///
/// Provides additional metadata over normal {@link Location location} declarations, including the range of
/// the declaring symbol.
///
/// Servers should prefer returning `DeclarationLink` over `Declaration` if supported
/// by the client.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#declarationLink (Documentation)
pub type DeclarationLink = super::structures::LocationLink;

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           Definition                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The definition of a symbol represented as one or many {@link Location locations}.
/// For most programming languages there is only one location at which a symbol is
/// defined.
///
/// Servers should prefer returning `DefinitionLink` over `Definition` if supported
/// by the client.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#definition (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum Definition {
    Location(super::structures::Location),
    LocationList(Vec<super::structures::Location>),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         DefinitionLink                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Information about where a symbol is defined.
///
/// Provides additional metadata over normal {@link Location location} definitions, including the range of
/// the defining symbol
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#definitionLink (Documentation)
pub type DefinitionLink = super::structures::LocationLink;

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    DocumentDiagnosticReport                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The result of a document diagnostic pull request. A report can
/// either be a full report containing all diagnostics for the
/// requested document or an unchanged report indicating that nothing
/// has changed in terms of diagnostics in comparison to the last
/// pull request.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentDiagnosticReport (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum DocumentDiagnosticReport {
    RelatedFullDocumentDiagnosticReport(super::structures::RelatedFullDocumentDiagnosticReport),
    RelatedUnchangedDocumentDiagnosticReport(
        super::structures::RelatedUnchangedDocumentDiagnosticReport,
    ),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         DocumentFilter                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A document filter describes a top level text document or
/// a notebook cell document.
///
/// @since 3.17.0 - proposed support for NotebookCellTextDocumentFilter.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentFilter (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum DocumentFilter {
    TextDocumentFilter(super::type_aliases::TextDocumentFilter),
    NotebookCellTextDocumentFilter(super::structures::NotebookCellTextDocumentFilter),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        DocumentSelector                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A document selector is the combination of one or many document filters.
///
/// @sample `let sel:DocumentSelector = [{ language: 'typescript' }, { language: 'json', pattern: '**∕tsconfig.json' }]`;
///
/// The use of a string as a document filter is deprecated @since 3.16.0.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentSelector (Documentation)
pub type DocumentSelector = Vec<super::type_aliases::DocumentFilter>;

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          GlobPattern                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The glob pattern. Either a string pattern or a relative pattern.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#globPattern (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum GlobPattern {
    Pattern(super::type_aliases::Pattern),
    RelativePattern(super::structures::RelativePattern),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          InlineValue                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Inline value information can be provided by different means:
/// - directly as a text value (class InlineValueText).
/// - as a name to use for a variable lookup (class InlineValueVariableLookup)
/// - as an evaluatable expression (class InlineValueEvaluatableExpression)
/// The InlineValue types combines all inline value types into one type.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlineValue (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum InlineValue {
    InlineValueText(super::structures::InlineValueText),
    InlineValueVariableLookup(super::structures::InlineValueVariableLookup),
    InlineValueEvaluatableExpression(super::structures::InlineValueEvaluatableExpression),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                             LspAny                                             //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The LSP any type.
/// Please note that strictly speaking a property with the value `undefined`
/// can't be converted into JSON preserving the property name. However for
/// convenience it is allowed and assumed that all these properties are
/// optional as well.
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#lspAny (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum LspAny {
    LspObject(super::type_aliases::LspObject),
    LspArray(super::type_aliases::LspArray),
    String(String),
    Integer(Integer),
    UInteger(UInteger),
    Decimal(Decimal),
    Bool(bool),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                            LspArray                                            //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] LSP arrays.
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#lspArray (Documentation)
pub type LspArray = Vec<super::type_aliases::LspAny>;

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           LspObject                                            //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] LSP object definition.
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#lspObject (Documentation)
pub type LspObject = HashMap<String, super::type_aliases::LspAny>;

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     NotebookDocumentFilter                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A notebook document filter denotes a notebook document by
/// different properties. The properties will be match
/// against the notebook's URI (same as with documents)
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#notebookDocumentFilter (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum NotebookDocumentFilter {
    NotebookTypeAndOptionalSchemeAndOptionalPattern(
        NotebookDocumentFilterNotebookTypeAndOptionalSchemeAndOptionalPattern,
    ),
    OptionalNotebookTypeAndSchemeAndOptionalPattern(
        NotebookDocumentFilterOptionalNotebookTypeAndSchemeAndOptionalPattern,
    ),
    OptionalNotebookTypeAndOptionalSchemeAndPattern(
        NotebookDocumentFilterOptionalNotebookTypeAndOptionalSchemeAndPattern,
    ),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookDocumentFilterNotebookTypeAndOptionalSchemeAndOptionalPattern {
    /// The type of the enclosing notebook.
    #[serde(rename = "notebookType")]
    notebook_type: String,
    /// A Uri {@link Uri.scheme scheme}, like `file` or `untitled`.
    #[serde(rename = "scheme")]
    scheme: Option<String>,
    /// A glob pattern.
    #[serde(rename = "pattern")]
    pattern: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookDocumentFilterOptionalNotebookTypeAndSchemeAndOptionalPattern {
    /// The type of the enclosing notebook.
    #[serde(rename = "notebookType")]
    notebook_type: Option<String>,
    /// A Uri {@link Uri.scheme scheme}, like `file` or `untitled`.
    #[serde(rename = "scheme")]
    scheme: String,
    /// A glob pattern.
    #[serde(rename = "pattern")]
    pattern: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookDocumentFilterOptionalNotebookTypeAndOptionalSchemeAndPattern {
    /// The type of the enclosing notebook.
    #[serde(rename = "notebookType")]
    notebook_type: Option<String>,
    /// A Uri {@link Uri.scheme scheme}, like `file` or `untitled`.
    #[serde(rename = "scheme")]
    scheme: Option<String>,
    /// A glob pattern.
    #[serde(rename = "pattern")]
    pattern: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                            Pattern                                             //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The glob pattern to watch relative to the base path. Glob patterns can have the following syntax:
/// - `*` to match one or more characters in a path segment
/// - `?` to match on one character in a path segment
/// - `**` to match any number of path segments, including none
/// - `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
/// - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
/// - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#pattern (Documentation)
pub type Pattern = String;

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      PrepareRenameResult                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#prepareRenameResult (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum PrepareRenameResult {
    Range(super::structures::Range),
    RangeAndPlaceholder(PrepareRenameResultRangeAndPlaceholder),
    DefaultBehavior(PrepareRenameResultDefaultBehavior),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct PrepareRenameResultRangeAndPlaceholder {
    #[serde(rename = "range")]
    range: super::structures::Range,
    #[serde(rename = "placeholder")]
    placeholder: String,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct PrepareRenameResultDefaultBehavior {
    #[serde(rename = "defaultBehavior")]
    default_behavior: bool,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         ProgressToken                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#progressToken (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ProgressToken {
    Integer(Integer),
    String(String),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 TextDocumentContentChangeEvent                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] An event describing a change to a text document. If only a text is provided
/// it is considered to be the full content of the document.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentContentChangeEvent (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentContentChangeEvent {
    RangeAndText(TextDocumentContentChangeEventRangeAndText),
    Text(TextDocumentContentChangeEventText),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TextDocumentContentChangeEventRangeAndText {
    /// The range of the document that changed.
    #[serde(rename = "range")]
    range: super::structures::Range,
    /// The new text for the provided range.
    #[serde(rename = "text")]
    text: String,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TextDocumentContentChangeEventText {
    /// The new text of the whole document.
    #[serde(rename = "text")]
    text: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       TextDocumentFilter                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A document filter denotes a document by different properties like
/// the {@link TextDocument.languageId language}, the {@link Uri.scheme scheme} of
/// its resource, or a glob-pattern that is applied to the {@link TextDocument.fileName path}.
///
/// Glob patterns can have the following syntax:
/// - `*` to match one or more characters in a path segment
/// - `?` to match on one character in a path segment
/// - `**` to match any number of path segments, including none
/// - `{}` to group sub patterns into an OR expression. (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
/// - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
/// - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
///
/// @sample A language filter that applies to typescript files on disk: `{ language: 'typescript', scheme: 'file' }`
/// @sample A language filter that applies to all package.json paths: `{ language: 'json', pattern: '**package.json' }`
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentFilter (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentFilter {
    LanguageAndOptionalSchemeAndOptionalPattern(
        TextDocumentFilterLanguageAndOptionalSchemeAndOptionalPattern,
    ),
    OptionalLanguageAndSchemeAndOptionalPattern(
        TextDocumentFilterOptionalLanguageAndSchemeAndOptionalPattern,
    ),
    OptionalLanguageAndOptionalSchemeAndPattern(
        TextDocumentFilterOptionalLanguageAndOptionalSchemeAndPattern,
    ),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TextDocumentFilterLanguageAndOptionalSchemeAndOptionalPattern {
    /// A language id, like `typescript`.
    #[serde(rename = "language")]
    language: String,
    /// A Uri {@link Uri.scheme scheme}, like `file` or `untitled`.
    #[serde(rename = "scheme")]
    scheme: Option<String>,
    /// A glob pattern, like **​/*.{ts,js}. See TextDocumentFilter for examples.
    #[serde(rename = "pattern")]
    pattern: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TextDocumentFilterOptionalLanguageAndSchemeAndOptionalPattern {
    /// A language id, like `typescript`.
    #[serde(rename = "language")]
    language: Option<String>,
    /// A Uri {@link Uri.scheme scheme}, like `file` or `untitled`.
    #[serde(rename = "scheme")]
    scheme: String,
    /// A glob pattern, like **​/*.{ts,js}. See TextDocumentFilter for examples.
    #[serde(rename = "pattern")]
    pattern: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TextDocumentFilterOptionalLanguageAndOptionalSchemeAndPattern {
    /// A language id, like `typescript`.
    #[serde(rename = "language")]
    language: Option<String>,
    /// A Uri {@link Uri.scheme scheme}, like `file` or `untitled`.
    #[serde(rename = "scheme")]
    scheme: Option<String>,
    /// A glob pattern, like **​/*.{ts,js}. See TextDocumentFilter for examples.
    #[serde(rename = "pattern")]
    pattern: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                               WorkspaceDocumentDiagnosticReport                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A workspace diagnostic document report.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceDocumentDiagnosticReport (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum WorkspaceDocumentDiagnosticReport {
    WorkspaceFullDocumentDiagnosticReport(super::structures::WorkspaceFullDocumentDiagnosticReport),
    WorkspaceUnchangedDocumentDiagnosticReport(
        super::structures::WorkspaceUnchangedDocumentDiagnosticReport,
    ),
}
