// 🚨 This file is generated by `cargo xtask-lsp`

use super::*;

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       AnnotatedTextEdit                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A special text edit with an additional change annotation.
///
/// @since 3.16.0.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#annotatedTextEdit (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct AnnotatedTextEdit {
    /// A text edit applicable to a text document.
    #[serde(flatten)]
    pub text_edit: TextEdit,
    /// The actual identifier of the change annotation
    #[serde(rename = "annotationId")]
    pub annotation_id: super::type_aliases::ChangeAnnotationIdentifier,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    ApplyWorkspaceEditParams                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters passed via an apply workspace edit request.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#applyWorkspaceEditParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ApplyWorkspaceEditParams {
    /// An optional label of the workspace edit. This label is
    /// presented in the user interface for example on an undo
    /// stack to undo the workspace edit.
    #[serde(rename = "label")]
    pub label: Option<String>,
    /// The edits to apply.
    #[serde(rename = "edit")]
    pub edit: super::structures::WorkspaceEdit,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    ApplyWorkspaceEditResult                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The result returned from the apply workspace edit request.
///
/// @since 3.17 renamed from ApplyWorkspaceEditResponse
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#applyWorkspaceEditResult (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ApplyWorkspaceEditResult {
    /// Indicates whether the edit was applied or not.
    #[serde(rename = "applied")]
    pub applied: bool,
    /// An optional textual description for why the edit was not applied.
    /// This may be used by the server for diagnostic logging or to provide
    /// a suitable error for a request that triggered the edit.
    #[serde(rename = "failureReason")]
    pub failure_reason: Option<String>,
    /// Depending on the client's failure handling strategy `failedChange` might
    /// contain the index of the change that failed. This property is only available
    /// if the client signals a `failureHandlingStrategy` in its client capabilities.
    #[serde(rename = "failedChange")]
    pub failed_change: Option<UInteger>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     BaseSymbolInformation                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A base for all symbol information.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#baseSymbolInformation (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct BaseSymbolInformation {
    /// The name of this symbol.
    #[serde(rename = "name")]
    pub name: String,
    /// The kind of this symbol.
    #[serde(rename = "kind")]
    pub kind: super::enumerations::SymbolKind,
    /// Tags for this symbol.
    ///
    /// @since 3.16.0
    #[serde(rename = "tags")]
    pub tags: Option<Vec<super::enumerations::SymbolTag>>,
    /// The name of the symbol containing this symbol. This information is for
    /// user interface purposes (e.g. to render a qualifier in the user interface
    /// if necessary). It can't be used to re-infer a hierarchy for the document
    /// symbols.
    #[serde(rename = "containerName")]
    pub container_name: Option<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                CallHierarchyClientCapabilities                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#callHierarchyClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CallHierarchyClientCapabilities {
    /// Whether implementation supports dynamic registration. If this is set to `true`
    /// the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`
    /// return value for the corresponding server capability as well.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   CallHierarchyIncomingCall                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents an incoming call, e.g. a caller of a method or constructor.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#callHierarchyIncomingCall (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CallHierarchyIncomingCall {
    /// The item that makes the call.
    #[serde(rename = "from")]
    pub from: super::structures::CallHierarchyItem,
    /// The ranges at which the calls appear. This is relative to the caller
    /// denoted by {@link CallHierarchyIncomingCall.from `this.from`}.
    #[serde(rename = "fromRanges")]
    pub from_ranges: Vec<super::structures::Range>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                CallHierarchyIncomingCallsParams                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameter of a `callHierarchy/incomingCalls` request.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#callHierarchyIncomingCallsParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CallHierarchyIncomingCallsParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    #[serde(rename = "item")]
    pub item: super::structures::CallHierarchyItem,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       CallHierarchyItem                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents programming constructs like functions or constructors in the context
/// of call hierarchy.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#callHierarchyItem (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CallHierarchyItem {
    /// The name of this item.
    #[serde(rename = "name")]
    pub name: String,
    /// The kind of this item.
    #[serde(rename = "kind")]
    pub kind: super::enumerations::SymbolKind,
    /// Tags for this item.
    #[serde(rename = "tags")]
    pub tags: Option<Vec<super::enumerations::SymbolTag>>,
    /// More detail for this item, e.g. the signature of a function.
    #[serde(rename = "detail")]
    pub detail: Option<String>,
    /// The resource identifier of this item.
    #[serde(rename = "uri")]
    pub uri: DocumentUri,
    /// The range enclosing this symbol not including leading/trailing whitespace but everything else, e.g. comments and code.
    #[serde(rename = "range")]
    pub range: super::structures::Range,
    /// The range that should be selected and revealed when this symbol is being picked, e.g. the name of a function.
    /// Must be contained by the {@link CallHierarchyItem.range `range`}.
    #[serde(rename = "selectionRange")]
    pub selection_range: super::structures::Range,
    /// A data entry field that is preserved between a call hierarchy prepare and
    /// incoming calls or outgoing calls requests.
    #[serde(rename = "data")]
    pub data: Option<super::type_aliases::LspAny>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      CallHierarchyOptions                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Call hierarchy options used during static registration.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#callHierarchyOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CallHierarchyOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   CallHierarchyOutgoingCall                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents an outgoing call, e.g. calling a getter from a method or a method from a constructor etc.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#callHierarchyOutgoingCall (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CallHierarchyOutgoingCall {
    /// The item that is called.
    #[serde(rename = "to")]
    pub to: super::structures::CallHierarchyItem,
    /// The range at which this item is called. This is the range relative to the caller, e.g the item
    /// passed to {@link CallHierarchyItemProvider.provideCallHierarchyOutgoingCalls `provideCallHierarchyOutgoingCalls`}
    /// and not {@link CallHierarchyOutgoingCall.to `this.to`}.
    #[serde(rename = "fromRanges")]
    pub from_ranges: Vec<super::structures::Range>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                CallHierarchyOutgoingCallsParams                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameter of a `callHierarchy/outgoingCalls` request.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#callHierarchyOutgoingCallsParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CallHierarchyOutgoingCallsParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    #[serde(rename = "item")]
    pub item: super::structures::CallHierarchyItem,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   CallHierarchyPrepareParams                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameter of a `textDocument/prepareCallHierarchy` request.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#callHierarchyPrepareParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CallHierarchyPrepareParams {
    /// A parameter literal used in requests to pass a text document and a position inside that
    /// document.
    #[serde(flatten)]
    pub text_document_position_params: TextDocumentPositionParams,
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                CallHierarchyRegistrationOptions                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Call hierarchy options used during static or dynamic registration.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#callHierarchyRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CallHierarchyRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Call hierarchy options used during static registration.
    ///
    /// @since 3.16.0
    #[serde(flatten)]
    pub call_hierarchy_options: CallHierarchyOptions,
    /// Static registration options to be returned in the initialize
    /// request.
    #[serde(flatten)]
    pub static_registration_options: StaticRegistrationOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          CancelParams                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#cancelParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CancelParams {
    /// The request id to cancel.
    #[serde(rename = "id")]
    pub id: CancelParamsId,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum CancelParamsId {
    Integer(Integer),
    String(String),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        ChangeAnnotation                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Additional information that describes document changes.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#changeAnnotation (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ChangeAnnotation {
    /// A human-readable string describing the actual change. The string
    /// is rendered prominent in the user interface.
    #[serde(rename = "label")]
    pub label: String,
    /// A flag which indicates that user confirmation is needed
    /// before applying the change.
    #[serde(rename = "needsConfirmation")]
    pub needs_confirmation: Option<bool>,
    /// A human-readable string which is rendered less prominent in
    /// the user interface.
    #[serde(rename = "description")]
    pub description: Option<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       ClientCapabilities                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Defines the capabilities provided by the client.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#clientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ClientCapabilities {
    /// Workspace specific client capabilities.
    #[serde(rename = "workspace")]
    pub workspace: Option<super::structures::WorkspaceClientCapabilities>,
    /// Text document specific client capabilities.
    #[serde(rename = "textDocument")]
    pub text_document: Option<super::structures::TextDocumentClientCapabilities>,
    /// Capabilities specific to the notebook document support.
    ///
    /// @since 3.17.0
    #[serde(rename = "notebookDocument")]
    pub notebook_document: Option<super::structures::NotebookDocumentClientCapabilities>,
    /// Window specific client capabilities.
    #[serde(rename = "window")]
    pub window: Option<super::structures::WindowClientCapabilities>,
    /// General client capabilities.
    ///
    /// @since 3.16.0
    #[serde(rename = "general")]
    pub general: Option<super::structures::GeneralClientCapabilities>,
    /// Experimental client capabilities.
    #[serde(rename = "experimental")]
    pub experimental: Option<super::type_aliases::LspAny>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           CodeAction                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A code action represents a change that can be performed in code, e.g. to fix a problem or
/// to refactor code.
///
/// A CodeAction must set either `edit` and/or a `command`. If both are supplied, the `edit` is applied first, then the `command` is executed.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeAction (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CodeAction {
    /// A short, human-readable, title for this code action.
    #[serde(rename = "title")]
    pub title: String,
    /// The kind of the code action.
    ///
    /// Used to filter code actions.
    #[serde(rename = "kind")]
    pub kind: Option<super::enumerations::CodeActionKind>,
    /// The diagnostics that this code action resolves.
    #[serde(rename = "diagnostics")]
    pub diagnostics: Option<Vec<super::structures::Diagnostic>>,
    /// Marks this as a preferred action. Preferred actions are used by the `auto fix` command and can be targeted
    /// by keybindings.
    ///
    /// A quick fix should be marked preferred if it properly addresses the underlying error.
    /// A refactoring should be marked preferred if it is the most reasonable choice of actions to take.
    ///
    /// @since 3.15.0
    #[serde(rename = "isPreferred")]
    pub is_preferred: Option<bool>,
    /// Marks that the code action cannot currently be applied.
    ///
    /// Clients should follow the following guidelines regarding disabled code actions:
    ///
    ///   - Disabled code actions are not shown in automatic [lightbulbs](https://code.visualstudio.com/docs/editor/editingevolved#_code-action)
    ///     code action menus.
    ///
    ///   - Disabled actions are shown as faded out in the code action menu when the user requests a more specific type
    ///     of code action, such as refactorings.
    ///
    ///   - If the user has a [keybinding](https://code.visualstudio.com/docs/editor/refactoring#_keybindings-for-code-actions)
    ///     that auto applies a code action and only disabled code actions are returned, the client should show the user an
    ///     error message with `reason` in the editor.
    ///
    /// @since 3.16.0
    #[serde(rename = "disabled")]
    pub disabled: Option<CodeActionDisabled>,
    /// The workspace edit this code action performs.
    #[serde(rename = "edit")]
    pub edit: Option<super::structures::WorkspaceEdit>,
    /// A command this code action executes. If a code action
    /// provides an edit and a command, first the edit is
    /// executed and then the command.
    #[serde(rename = "command")]
    pub command: Option<super::structures::Command>,
    /// A data entry field that is preserved on a code action between
    /// a `textDocument/codeAction` and a `codeAction/resolve` request.
    ///
    /// @since 3.16.0
    #[serde(rename = "data")]
    pub data: Option<super::type_aliases::LspAny>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CodeActionDisabled {
    /// Human readable description of why the code action is currently disabled.
    ///
    /// This is displayed in the code actions UI.
    #[serde(rename = "reason")]
    pub reason: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  CodeActionClientCapabilities                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The Client Capabilities of a {@link CodeActionRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeActionClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CodeActionClientCapabilities {
    /// Whether code action supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// The client support code action literals of type `CodeAction` as a valid
    /// response of the `textDocument/codeAction` request. If the property is not
    /// set the request can only return `Command` literals.
    ///
    /// @since 3.8.0
    #[serde(rename = "codeActionLiteralSupport")]
    pub code_action_literal_support: Option<CodeActionClientCapabilitiesCodeActionLiteralSupport>,
    /// Whether code action supports the `isPreferred` property.
    ///
    /// @since 3.15.0
    #[serde(rename = "isPreferredSupport")]
    pub is_preferred_support: Option<bool>,
    /// Whether code action supports the `disabled` property.
    ///
    /// @since 3.16.0
    #[serde(rename = "disabledSupport")]
    pub disabled_support: Option<bool>,
    /// Whether code action supports the `data` property which is
    /// preserved between a `textDocument/codeAction` and a
    /// `codeAction/resolve` request.
    ///
    /// @since 3.16.0
    #[serde(rename = "dataSupport")]
    pub data_support: Option<bool>,
    /// Whether the client supports resolving additional code action
    /// properties via a separate `codeAction/resolve` request.
    ///
    /// @since 3.16.0
    #[serde(rename = "resolveSupport")]
    pub resolve_support: Option<CodeActionClientCapabilitiesResolveSupport>,
    /// Whether the client honors the change annotations in
    /// text edits and resource operations returned via the
    /// `CodeAction#edit` property by for example presenting
    /// the workspace edit in the user interface and asking
    /// for confirmation.
    ///
    /// @since 3.16.0
    #[serde(rename = "honorsChangeAnnotations")]
    pub honors_change_annotations: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CodeActionClientCapabilitiesCodeActionLiteralSupport {
    /// The code action kind is support with the following value
    /// set.
    #[serde(rename = "codeActionKind")]
    pub code_action_kind: CodeActionClientCapabilitiesCodeActionLiteralSupportCodeActionKind,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CodeActionClientCapabilitiesCodeActionLiteralSupportCodeActionKind {
    /// The code action kind values the client supports. When this
    /// property exists the client also guarantees that it will
    /// handle values outside its set gracefully and falls back
    /// to a default value when unknown.
    #[serde(rename = "valueSet")]
    pub value_set: Vec<super::enumerations::CodeActionKind>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CodeActionClientCapabilitiesResolveSupport {
    /// The properties that a client can resolve lazily.
    #[serde(rename = "properties")]
    pub properties: Vec<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       CodeActionContext                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Contains additional diagnostic information about the context in which
/// a {@link CodeActionProvider.provideCodeActions code action} is run.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeActionContext (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CodeActionContext {
    /// An array of diagnostics known on the client side overlapping the range provided to the
    /// `textDocument/codeAction` request. They are provided so that the server knows which
    /// errors are currently presented to the user for the given range. There is no guarantee
    /// that these accurately reflect the error state of the resource. The primary parameter
    /// to compute code actions is the provided range.
    #[serde(rename = "diagnostics")]
    pub diagnostics: Vec<super::structures::Diagnostic>,
    /// Requested kind of actions to return.
    ///
    /// Actions not of this kind are filtered out by the client before being shown. So servers
    /// can omit computing them.
    #[serde(rename = "only")]
    pub only: Option<Vec<super::enumerations::CodeActionKind>>,
    /// The reason why code actions were requested.
    ///
    /// @since 3.17.0
    #[serde(rename = "triggerKind")]
    pub trigger_kind: Option<super::enumerations::CodeActionTriggerKind>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       CodeActionOptions                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Provider options for a {@link CodeActionRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeActionOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CodeActionOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
    /// CodeActionKinds that this server may return.
    ///
    /// The list of kinds may be generic, such as `CodeActionKind.Refactor`, or the server
    /// may list out every specific kind they provide.
    #[serde(rename = "codeActionKinds")]
    pub code_action_kinds: Option<Vec<super::enumerations::CodeActionKind>>,
    /// The server provides support to resolve additional
    /// information for a code action.
    ///
    /// @since 3.16.0
    #[serde(rename = "resolveProvider")]
    pub resolve_provider: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        CodeActionParams                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters of a {@link CodeActionRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeActionParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CodeActionParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    /// The document in which the command was invoked.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
    /// The range for which the command was invoked.
    #[serde(rename = "range")]
    pub range: super::structures::Range,
    /// Context carrying additional information.
    #[serde(rename = "context")]
    pub context: super::structures::CodeActionContext,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 CodeActionRegistrationOptions                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Registration options for a {@link CodeActionRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeActionRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CodeActionRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Provider options for a {@link CodeActionRequest}.
    #[serde(flatten)]
    pub code_action_options: CodeActionOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        CodeDescription                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Structure to capture a description for an error code.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeDescription (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CodeDescription {
    /// An URI to open with more information about the diagnostic error.
    #[serde(rename = "href")]
    pub href: Uri,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                            CodeLens                                            //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A code lens represents a {@link Command command} that should be shown along with
/// source text, like the number of references, a way to run tests, etc.
///
/// A code lens is _unresolved_ when no command is associated to it. For performance
/// reasons the creation of a code lens and resolving should be done in two stages.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeLens (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CodeLens {
    /// The range in which this code lens is valid. Should only span a single line.
    #[serde(rename = "range")]
    pub range: super::structures::Range,
    /// The command this code lens represents.
    #[serde(rename = "command")]
    pub command: Option<super::structures::Command>,
    /// A data entry field that is preserved on a code lens item between
    /// a {@link CodeLensRequest} and a {@link CodeLensResolveRequest}
    #[serde(rename = "data")]
    pub data: Option<super::type_aliases::LspAny>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   CodeLensClientCapabilities                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The client capabilities  of a {@link CodeLensRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeLensClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CodeLensClientCapabilities {
    /// Whether code lens supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        CodeLensOptions                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Code Lens provider options of a {@link CodeLensRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeLensOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CodeLensOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
    /// Code lens has a resolve provider as well.
    #[serde(rename = "resolveProvider")]
    pub resolve_provider: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         CodeLensParams                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters of a {@link CodeLensRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeLensParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CodeLensParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    /// The document to request code lens for.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  CodeLensRegistrationOptions                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Registration options for a {@link CodeLensRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeLensRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CodeLensRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Code Lens provider options of a {@link CodeLensRequest}.
    #[serde(flatten)]
    pub code_lens_options: CodeLensOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                              CodeLensWorkspaceClientCapabilities                               //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeLensWorkspaceClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CodeLensWorkspaceClientCapabilities {
    /// Whether the client implementation supports a refresh request sent from the
    /// server to the client.
    ///
    /// Note that this event is global and will force the client to refresh all
    /// code lenses currently shown. It should be used with absolute care and is
    /// useful for situation where a server for example detect a project wide
    /// change that requires such a calculation.
    #[serde(rename = "refreshSupport")]
    pub refresh_support: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                             Color                                              //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents a color in RGBA space.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#color (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct Color {
    /// The red component of this color in the range [0-1].
    #[serde(rename = "red")]
    pub red: Decimal,
    /// The green component of this color in the range [0-1].
    #[serde(rename = "green")]
    pub green: Decimal,
    /// The blue component of this color in the range [0-1].
    #[serde(rename = "blue")]
    pub blue: Decimal,
    /// The alpha component of this color in the range [0-1].
    #[serde(rename = "alpha")]
    pub alpha: Decimal,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        ColorInformation                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents a color range from a document.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#colorInformation (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ColorInformation {
    /// The range in the document where this color appears.
    #[serde(rename = "range")]
    pub range: super::structures::Range,
    /// The actual color value for this color range.
    #[serde(rename = "color")]
    pub color: super::structures::Color,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       ColorPresentation                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#colorPresentation (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ColorPresentation {
    /// The label of this color presentation. It will be shown on the color
    /// picker header. By default this is also the text that is inserted when selecting
    /// this color presentation.
    #[serde(rename = "label")]
    pub label: String,
    /// An {@link TextEdit edit} which is applied to a document when selecting
    /// this presentation for the color.  When `falsy` the {@link ColorPresentation.label label}
    /// is used.
    #[serde(rename = "textEdit")]
    pub text_edit: Option<super::structures::TextEdit>,
    /// An optional array of additional {@link TextEdit text edits} that are applied when
    /// selecting this color presentation. Edits must not overlap with the main {@link ColorPresentation.textEdit edit} nor with themselves.
    #[serde(rename = "additionalTextEdits")]
    pub additional_text_edits: Option<Vec<super::structures::TextEdit>>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    ColorPresentationParams                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Parameters for a {@link ColorPresentationRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#colorPresentationParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ColorPresentationParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    /// The text document.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
    /// The color to request presentations for.
    #[serde(rename = "color")]
    pub color: super::structures::Color,
    /// The range where the color would be inserted. Serves as a context.
    #[serde(rename = "range")]
    pub range: super::structures::Range,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                            Command                                             //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents a reference to a command. Provides a title which
/// will be used to represent a command in the UI and, optionally,
/// an array of arguments which will be passed to the command handler
/// function when invoked.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#command (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct Command {
    /// Title of the command, like `save`.
    #[serde(rename = "title")]
    pub title: String,
    /// The identifier of the actual command handler.
    #[serde(rename = "command")]
    pub command: String,
    /// Arguments that the command handler should be
    /// invoked with.
    #[serde(rename = "arguments")]
    pub arguments: Option<Vec<super::type_aliases::LspAny>>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  CompletionClientCapabilities                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Completion client capabilities
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#completionClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CompletionClientCapabilities {
    /// Whether completion supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// The client supports the following `CompletionItem` specific
    /// capabilities.
    #[serde(rename = "completionItem")]
    pub completion_item: Option<CompletionClientCapabilitiesCompletionItem>,
    #[serde(rename = "completionItemKind")]
    pub completion_item_kind: Option<CompletionClientCapabilitiesCompletionItemKind>,
    /// Defines how the client handles whitespace and indentation
    /// when accepting a completion item that uses multi line
    /// text in either `insertText` or `textEdit`.
    ///
    /// @since 3.17.0
    #[serde(rename = "insertTextMode")]
    pub insert_text_mode: Option<super::enumerations::InsertTextMode>,
    /// The client supports to send additional context information for a
    /// `textDocument/completion` request.
    #[serde(rename = "contextSupport")]
    pub context_support: Option<bool>,
    /// The client supports the following `CompletionList` specific
    /// capabilities.
    ///
    /// @since 3.17.0
    #[serde(rename = "completionList")]
    pub completion_list: Option<CompletionClientCapabilitiesCompletionList>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CompletionClientCapabilitiesCompletionItem {
    /// Client supports snippets as insert text.
    ///
    /// A snippet can define tab stops and placeholders with `$1`, `$2`
    /// and `${3:foo}`. `$0` defines the final tab stop, it defaults to
    /// the end of the snippet. Placeholders with equal identifiers are linked,
    /// that is typing in one will update others too.
    #[serde(rename = "snippetSupport")]
    pub snippet_support: Option<bool>,
    /// Client supports commit characters on a completion item.
    #[serde(rename = "commitCharactersSupport")]
    pub commit_characters_support: Option<bool>,
    /// Client supports the following content formats for the documentation
    /// property. The order describes the preferred format of the client.
    #[serde(rename = "documentationFormat")]
    pub documentation_format: Option<Vec<super::enumerations::MarkupKind>>,
    /// Client supports the deprecated property on a completion item.
    #[serde(rename = "deprecatedSupport")]
    pub deprecated_support: Option<bool>,
    /// Client supports the preselect property on a completion item.
    #[serde(rename = "preselectSupport")]
    pub preselect_support: Option<bool>,
    /// Client supports the tag property on a completion item. Clients supporting
    /// tags have to handle unknown tags gracefully. Clients especially need to
    /// preserve unknown tags when sending a completion item back to the server in
    /// a resolve call.
    ///
    /// @since 3.15.0
    #[serde(rename = "tagSupport")]
    pub tag_support: Option<CompletionClientCapabilitiesCompletionItemTagSupport>,
    /// Client support insert replace edit to control different behavior if a
    /// completion item is inserted in the text or should replace text.
    ///
    /// @since 3.16.0
    #[serde(rename = "insertReplaceSupport")]
    pub insert_replace_support: Option<bool>,
    /// Indicates which properties a client can resolve lazily on a completion
    /// item. Before version 3.16.0 only the predefined properties `documentation`
    /// and `details` could be resolved lazily.
    ///
    /// @since 3.16.0
    #[serde(rename = "resolveSupport")]
    pub resolve_support: Option<CompletionClientCapabilitiesCompletionItemResolveSupport>,
    /// The client supports the `insertTextMode` property on
    /// a completion item to override the whitespace handling mode
    /// as defined by the client (see `insertTextMode`).
    ///
    /// @since 3.16.0
    #[serde(rename = "insertTextModeSupport")]
    pub insert_text_mode_support:
        Option<CompletionClientCapabilitiesCompletionItemInsertTextModeSupport>,
    /// The client has support for completion item label
    /// details (see also `CompletionItemLabelDetails`).
    ///
    /// @since 3.17.0
    #[serde(rename = "labelDetailsSupport")]
    pub label_details_support: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CompletionClientCapabilitiesCompletionItemTagSupport {
    /// The tags supported by the client.
    #[serde(rename = "valueSet")]
    pub value_set: Vec<super::enumerations::CompletionItemTag>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CompletionClientCapabilitiesCompletionItemResolveSupport {
    /// The properties that a client can resolve lazily.
    #[serde(rename = "properties")]
    pub properties: Vec<String>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CompletionClientCapabilitiesCompletionItemInsertTextModeSupport {
    #[serde(rename = "valueSet")]
    pub value_set: Vec<super::enumerations::InsertTextMode>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CompletionClientCapabilitiesCompletionItemKind {
    /// The completion item kind values the client supports. When this
    /// property exists the client also guarantees that it will
    /// handle values outside its set gracefully and falls back
    /// to a default value when unknown.
    ///
    /// If this property is not present the client only supports
    /// the completion items kinds from `Text` to `Reference` as defined in
    /// the initial version of the protocol.
    #[serde(rename = "valueSet")]
    pub value_set: Option<Vec<super::enumerations::CompletionItemKind>>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CompletionClientCapabilitiesCompletionList {
    /// The client supports the following itemDefaults on
    /// a completion list.
    ///
    /// The value lists the supported property names of the
    /// `CompletionList.itemDefaults` object. If omitted
    /// no properties are supported.
    ///
    /// @since 3.17.0
    #[serde(rename = "itemDefaults")]
    pub item_defaults: Option<Vec<String>>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       CompletionContext                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Contains additional information about the context in which a completion request is triggered.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#completionContext (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CompletionContext {
    /// How the completion was triggered.
    #[serde(rename = "triggerKind")]
    pub trigger_kind: super::enumerations::CompletionTriggerKind,
    /// The trigger character (a single character) that has trigger code complete.
    /// Is undefined if `triggerKind !== CompletionTriggerKind.TriggerCharacter`
    #[serde(rename = "triggerCharacter")]
    pub trigger_character: Option<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         CompletionItem                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A completion item represents a text snippet that is
/// proposed to complete text that is being typed.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#completionItem (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CompletionItem {
    /// The label of this completion item.
    ///
    /// The label property is also by default the text that
    /// is inserted when selecting this completion.
    ///
    /// If label details are provided the label itself should
    /// be an unqualified name of the completion item.
    #[serde(rename = "label")]
    pub label: String,
    /// Additional details for the label
    ///
    /// @since 3.17.0
    #[serde(rename = "labelDetails")]
    pub label_details: Option<super::structures::CompletionItemLabelDetails>,
    /// The kind of this completion item. Based of the kind
    /// an icon is chosen by the editor.
    #[serde(rename = "kind")]
    pub kind: Option<super::enumerations::CompletionItemKind>,
    /// Tags for this completion item.
    ///
    /// @since 3.15.0
    #[serde(rename = "tags")]
    pub tags: Option<Vec<super::enumerations::CompletionItemTag>>,
    /// A human-readable string with additional information
    /// about this item, like type or symbol information.
    #[serde(rename = "detail")]
    pub detail: Option<String>,
    /// A human-readable string that represents a doc-comment.
    #[serde(rename = "documentation")]
    pub documentation: Option<CompletionItemDocumentation>,
    /// Select this item when showing.
    ///
    /// *Note* that only one completion item can be selected and that the
    /// tool / client decides which item that is. The rule is that the *first*
    /// item of those that match best is selected.
    #[serde(rename = "preselect")]
    pub preselect: Option<bool>,
    /// A string that should be used when comparing this item
    /// with other items. When `falsy` the {@link CompletionItem.label label}
    /// is used.
    #[serde(rename = "sortText")]
    pub sort_text: Option<String>,
    /// A string that should be used when filtering a set of
    /// completion items. When `falsy` the {@link CompletionItem.label label}
    /// is used.
    #[serde(rename = "filterText")]
    pub filter_text: Option<String>,
    /// A string that should be inserted into a document when selecting
    /// this completion. When `falsy` the {@link CompletionItem.label label}
    /// is used.
    ///
    /// The `insertText` is subject to interpretation by the client side.
    /// Some tools might not take the string literally. For example
    /// VS Code when code complete is requested in this example
    /// `con<cursor position>` and a completion item with an `insertText` of
    /// `console` is provided it will only insert `sole`. Therefore it is
    /// recommended to use `textEdit` instead since it avoids additional client
    /// side interpretation.
    #[serde(rename = "insertText")]
    pub insert_text: Option<String>,
    /// The format of the insert text. The format applies to both the
    /// `insertText` property and the `newText` property of a provided
    /// `textEdit`. If omitted defaults to `InsertTextFormat.PlainText`.
    ///
    /// Please note that the insertTextFormat doesn't apply to
    /// `additionalTextEdits`.
    #[serde(rename = "insertTextFormat")]
    pub insert_text_format: Option<super::enumerations::InsertTextFormat>,
    /// How whitespace and indentation is handled during completion
    /// item insertion. If not provided the clients default value depends on
    /// the `textDocument.completion.insertTextMode` client capability.
    ///
    /// @since 3.16.0
    #[serde(rename = "insertTextMode")]
    pub insert_text_mode: Option<super::enumerations::InsertTextMode>,
    /// An {@link TextEdit edit} which is applied to a document when selecting
    /// this completion. When an edit is provided the value of
    /// {@link CompletionItem.insertText insertText} is ignored.
    ///
    /// Most editors support two different operations when accepting a completion
    /// item. One is to insert a completion text and the other is to replace an
    /// existing text with a completion text. Since this can usually not be
    /// predetermined by a server it can report both ranges. Clients need to
    /// signal support for `InsertReplaceEdits` via the
    /// `textDocument.completion.insertReplaceSupport` client capability
    /// property.
    ///
    /// *Note 1:* The text edit's range as well as both ranges from an insert
    /// replace edit must be a [single line] and they must contain the position
    /// at which completion has been requested.
    /// *Note 2:* If an `InsertReplaceEdit` is returned the edit's insert range
    /// must be a prefix of the edit's replace range, that means it must be
    /// contained and starting at the same position.
    ///
    /// @since 3.16.0 additional type `InsertReplaceEdit`
    #[serde(rename = "textEdit")]
    pub text_edit: Option<CompletionItemTextEdit>,
    /// The edit text used if the completion item is part of a CompletionList and
    /// CompletionList defines an item default for the text edit range.
    ///
    /// Clients will only honor this property if they opt into completion list
    /// item defaults using the capability `completionList.itemDefaults`.
    ///
    /// If not provided and a list's default range is provided the label
    /// property is used as a text.
    ///
    /// @since 3.17.0
    #[serde(rename = "textEditText")]
    pub text_edit_text: Option<String>,
    /// An optional array of additional {@link TextEdit text edits} that are applied when
    /// selecting this completion. Edits must not overlap (including the same insert position)
    /// with the main {@link CompletionItem.textEdit edit} nor with themselves.
    ///
    /// Additional text edits should be used to change text unrelated to the current cursor position
    /// (for example adding an import statement at the top of the file if the completion item will
    /// insert an unqualified type).
    #[serde(rename = "additionalTextEdits")]
    pub additional_text_edits: Option<Vec<super::structures::TextEdit>>,
    /// An optional set of characters that when pressed while this completion is active will accept it first and
    /// then type that character. *Note* that all commit characters should have `length=1` and that superfluous
    /// characters will be ignored.
    #[serde(rename = "commitCharacters")]
    pub commit_characters: Option<Vec<String>>,
    /// An optional {@link Command command} that is executed *after* inserting this completion. *Note* that
    /// additional modifications to the current document should be described with the
    /// {@link CompletionItem.additionalTextEdits additionalTextEdits}-property.
    #[serde(rename = "command")]
    pub command: Option<super::structures::Command>,
    /// A data entry field that is preserved on a completion item between a
    /// {@link CompletionRequest} and a {@link CompletionResolveRequest}.
    #[serde(rename = "data")]
    pub data: Option<super::type_aliases::LspAny>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum CompletionItemDocumentation {
    String(String),
    MarkupContent(super::structures::MarkupContent),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum CompletionItemTextEdit {
    TextEdit(super::structures::TextEdit),
    InsertReplaceEdit(super::structures::InsertReplaceEdit),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   CompletionItemLabelDetails                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Additional details for a completion item label.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#completionItemLabelDetails (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CompletionItemLabelDetails {
    /// An optional string which is rendered less prominently directly after {@link CompletionItem.label label},
    /// without any spacing. Should be used for function signatures and type annotations.
    #[serde(rename = "detail")]
    pub detail: Option<String>,
    /// An optional string which is rendered less prominently after {@link CompletionItem.detail}. Should be used
    /// for fully qualified names and file paths.
    #[serde(rename = "description")]
    pub description: Option<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         CompletionList                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents a collection of {@link CompletionItem completion items} to be presented
/// in the editor.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#completionList (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CompletionList {
    /// This list it not complete. Further typing results in recomputing this list.
    ///
    /// Recomputed lists have all their items replaced (not appended) in the
    /// incomplete completion sessions.
    #[serde(rename = "isIncomplete")]
    pub is_incomplete: bool,
    /// In many cases the items of an actual completion result share the same
    /// value for properties like `commitCharacters` or the range of a text
    /// edit. A completion list can therefore define item defaults which will
    /// be used if a completion item itself doesn't specify the value.
    ///
    /// If a completion list specifies a default value and a completion item
    /// also specifies a corresponding value the one from the item is used.
    ///
    /// Servers are only allowed to return default values if the client
    /// signals support for this via the `completionList.itemDefaults`
    /// capability.
    ///
    /// @since 3.17.0
    #[serde(rename = "itemDefaults")]
    pub item_defaults: Option<CompletionListItemDefaults>,
    /// The completion items.
    #[serde(rename = "items")]
    pub items: Vec<super::structures::CompletionItem>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CompletionListItemDefaults {
    /// A default commit character set.
    ///
    /// @since 3.17.0
    #[serde(rename = "commitCharacters")]
    pub commit_characters: Option<Vec<String>>,
    /// A default edit range.
    ///
    /// @since 3.17.0
    #[serde(rename = "editRange")]
    pub edit_range: Option<CompletionListItemDefaultsEditRange>,
    /// A default insert text format.
    ///
    /// @since 3.17.0
    #[serde(rename = "insertTextFormat")]
    pub insert_text_format: Option<super::enumerations::InsertTextFormat>,
    /// A default insert text mode.
    ///
    /// @since 3.17.0
    #[serde(rename = "insertTextMode")]
    pub insert_text_mode: Option<super::enumerations::InsertTextMode>,
    /// A default data value.
    ///
    /// @since 3.17.0
    #[serde(rename = "data")]
    pub data: Option<super::type_aliases::LspAny>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum CompletionListItemDefaultsEditRange {
    Range(super::structures::Range),
    InsertAndReplace(CompletionListItemDefaultsEditRangeInsertAndReplace),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CompletionListItemDefaultsEditRangeInsertAndReplace {
    #[serde(rename = "insert")]
    pub insert: super::structures::Range,
    #[serde(rename = "replace")]
    pub replace: super::structures::Range,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       CompletionOptions                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Completion options.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#completionOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CompletionOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
    /// Most tools trigger completion request automatically without explicitly requesting
    /// it using a keyboard shortcut (e.g. Ctrl+Space). Typically they do so when the user
    /// starts to type an identifier. For example if the user types `c` in a JavaScript file
    /// code complete will automatically pop up present `console` besides others as a
    /// completion item. Characters that make up identifiers don't need to be listed here.
    ///
    /// If code complete should automatically be trigger on characters not being valid inside
    /// an identifier (for example `.` in JavaScript) list them in `triggerCharacters`.
    #[serde(rename = "triggerCharacters")]
    pub trigger_characters: Option<Vec<String>>,
    /// The list of all possible characters that commit a completion. This field can be used
    /// if clients don't support individual commit characters per completion item. See
    /// `ClientCapabilities.textDocument.completion.completionItem.commitCharactersSupport`
    ///
    /// If a server provides both `allCommitCharacters` and commit characters on an individual
    /// completion item the ones on the completion item win.
    ///
    /// @since 3.2.0
    #[serde(rename = "allCommitCharacters")]
    pub all_commit_characters: Option<Vec<String>>,
    /// The server provides support to resolve additional
    /// information for a completion item.
    #[serde(rename = "resolveProvider")]
    pub resolve_provider: Option<bool>,
    /// The server supports the following `CompletionItem` specific
    /// capabilities.
    ///
    /// @since 3.17.0
    #[serde(rename = "completionItem")]
    pub completion_item: Option<CompletionOptionsCompletionItem>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CompletionOptionsCompletionItem {
    /// The server has support for completion item label
    /// details (see also `CompletionItemLabelDetails`) when
    /// receiving a completion item in a resolve call.
    ///
    /// @since 3.17.0
    #[serde(rename = "labelDetailsSupport")]
    pub label_details_support: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        CompletionParams                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Completion parameters
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#completionParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CompletionParams {
    /// A parameter literal used in requests to pass a text document and a position inside that
    /// document.
    #[serde(flatten)]
    pub text_document_position_params: TextDocumentPositionParams,
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    /// The completion context. This is only available it the client specifies
    /// to send this using the client capability `textDocument.completion.contextSupport === true`
    #[serde(rename = "context")]
    pub context: Option<super::structures::CompletionContext>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 CompletionRegistrationOptions                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Registration options for a {@link CompletionRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#completionRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CompletionRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Completion options.
    #[serde(flatten)]
    pub completion_options: CompletionOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       ConfigurationItem                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#configurationItem (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ConfigurationItem {
    /// The scope to get the configuration section for.
    #[serde(rename = "scopeUri")]
    pub scope_uri: Option<Uri>,
    /// The configuration section asked for.
    #[serde(rename = "section")]
    pub section: Option<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      ConfigurationParams                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters of a configuration request.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#configurationParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ConfigurationParams {
    #[serde(rename = "items")]
    pub items: Vec<super::structures::ConfigurationItem>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           CreateFile                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Create file operation.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#createFile (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CreateFile {
    /// A generic resource operation.
    #[serde(flatten)]
    pub resource_operation: ResourceOperation,
    /// A create
    #[serde(rename = "kind")]
    pub kind: CreateFileKind,
    /// The resource to create.
    #[serde(rename = "uri")]
    pub uri: DocumentUri,
    /// Additional options
    #[serde(rename = "options")]
    pub options: Option<super::structures::CreateFileOptions>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum CreateFileKind {
    #[serde(rename = "create")]
    Create,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       CreateFileOptions                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Options to create a file.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#createFileOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CreateFileOptions {
    /// Overwrite existing file. Overwrite wins over `ignoreIfExists`
    #[serde(rename = "overwrite")]
    pub overwrite: Option<bool>,
    /// Ignore if exists.
    #[serde(rename = "ignoreIfExists")]
    pub ignore_if_exists: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       CreateFilesParams                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters sent in notifications/requests for user-initiated creation of
/// files.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#createFilesParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct CreateFilesParams {
    /// An array of all files/folders created in this operation.
    #[serde(rename = "files")]
    pub files: Vec<super::structures::FileCreate>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 DeclarationClientCapabilities                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.14.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#declarationClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DeclarationClientCapabilities {
    /// Whether declaration supports dynamic registration. If this is set to `true`
    /// the client supports the new `DeclarationRegistrationOptions` return value
    /// for the corresponding server capability as well.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// The client supports additional metadata in the form of declaration links.
    #[serde(rename = "linkSupport")]
    pub link_support: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       DeclarationOptions                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#declarationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DeclarationOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       DeclarationParams                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#declarationParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DeclarationParams {
    /// A parameter literal used in requests to pass a text document and a position inside that
    /// document.
    #[serde(flatten)]
    pub text_document_position_params: TextDocumentPositionParams,
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 DeclarationRegistrationOptions                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#declarationRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DeclarationRegistrationOptions {
    #[serde(flatten)]
    pub declaration_options: DeclarationOptions,
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Static registration options to be returned in the initialize
    /// request.
    #[serde(flatten)]
    pub static_registration_options: StaticRegistrationOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  DefinitionClientCapabilities                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client Capabilities for a {@link DefinitionRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#definitionClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DefinitionClientCapabilities {
    /// Whether definition supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// The client supports additional metadata in the form of definition links.
    ///
    /// @since 3.14.0
    #[serde(rename = "linkSupport")]
    pub link_support: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       DefinitionOptions                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Server Capabilities for a {@link DefinitionRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#definitionOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DefinitionOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        DefinitionParams                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Parameters for a {@link DefinitionRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#definitionParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DefinitionParams {
    /// A parameter literal used in requests to pass a text document and a position inside that
    /// document.
    #[serde(flatten)]
    pub text_document_position_params: TextDocumentPositionParams,
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 DefinitionRegistrationOptions                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Registration options for a {@link DefinitionRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#definitionRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DefinitionRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Server Capabilities for a {@link DefinitionRequest}.
    #[serde(flatten)]
    pub definition_options: DefinitionOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           DeleteFile                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Delete file operation
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#deleteFile (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DeleteFile {
    /// A generic resource operation.
    #[serde(flatten)]
    pub resource_operation: ResourceOperation,
    /// A delete
    #[serde(rename = "kind")]
    pub kind: DeleteFileKind,
    /// The file to delete.
    #[serde(rename = "uri")]
    pub uri: DocumentUri,
    /// Delete options.
    #[serde(rename = "options")]
    pub options: Option<super::structures::DeleteFileOptions>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum DeleteFileKind {
    #[serde(rename = "delete")]
    Delete,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       DeleteFileOptions                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Delete file options
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#deleteFileOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DeleteFileOptions {
    /// Delete the content recursively if a folder is denoted.
    #[serde(rename = "recursive")]
    pub recursive: Option<bool>,
    /// Ignore the operation if the file doesn't exist.
    #[serde(rename = "ignoreIfNotExists")]
    pub ignore_if_not_exists: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       DeleteFilesParams                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters sent in notifications/requests for user-initiated deletes of
/// files.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#deleteFilesParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DeleteFilesParams {
    /// An array of all files/folders deleted in this operation.
    #[serde(rename = "files")]
    pub files: Vec<super::structures::FileDelete>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           Diagnostic                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents a diagnostic, such as a compiler error or warning. Diagnostic objects
/// are only valid in the scope of a resource.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnostic (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct Diagnostic {
    /// The range at which the message applies
    #[serde(rename = "range")]
    pub range: super::structures::Range,
    /// The diagnostic's severity. Can be omitted. If omitted it is up to the
    /// client to interpret diagnostics as error, warning, info or hint.
    #[serde(rename = "severity")]
    pub severity: Option<super::enumerations::DiagnosticSeverity>,
    /// The diagnostic's code, which usually appear in the user interface.
    #[serde(rename = "code")]
    pub code: Option<DiagnosticCode>,
    /// An optional property to describe the error code.
    /// Requires the code field (above) to be present/not null.
    ///
    /// @since 3.16.0
    #[serde(rename = "codeDescription")]
    pub code_description: Option<super::structures::CodeDescription>,
    /// A human-readable string describing the source of this
    /// diagnostic, e.g. 'typescript' or 'super lint'. It usually
    /// appears in the user interface.
    #[serde(rename = "source")]
    pub source: Option<String>,
    /// The diagnostic's message. It usually appears in the user interface
    #[serde(rename = "message")]
    pub message: String,
    /// Additional metadata about the diagnostic.
    ///
    /// @since 3.15.0
    #[serde(rename = "tags")]
    pub tags: Option<Vec<super::enumerations::DiagnosticTag>>,
    /// An array of related diagnostic information, e.g. when symbol-names within
    /// a scope collide all definitions can be marked via this property.
    #[serde(rename = "relatedInformation")]
    pub related_information: Option<Vec<super::structures::DiagnosticRelatedInformation>>,
    /// A data entry field that is preserved between a `textDocument/publishDiagnostics`
    /// notification and `textDocument/codeAction` request.
    ///
    /// @since 3.16.0
    #[serde(rename = "data")]
    pub data: Option<super::type_aliases::LspAny>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum DiagnosticCode {
    Integer(Integer),
    String(String),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  DiagnosticClientCapabilities                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client capabilities specific to diagnostic pull requests.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnosticClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DiagnosticClientCapabilities {
    /// Whether implementation supports dynamic registration. If this is set to `true`
    /// the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`
    /// return value for the corresponding server capability as well.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// Whether the clients supports related documents for document diagnostic pulls.
    #[serde(rename = "relatedDocumentSupport")]
    pub related_document_support: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       DiagnosticOptions                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Diagnostic options.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnosticOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DiagnosticOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
    /// An optional identifier under which the diagnostics are
    /// managed by the client.
    #[serde(rename = "identifier")]
    pub identifier: Option<String>,
    /// Whether the language has inter file dependencies meaning that
    /// editing code in one file can result in a different diagnostic
    /// set in another file. Inter file dependencies are common for
    /// most programming languages and typically uncommon for linters.
    #[serde(rename = "interFileDependencies")]
    pub inter_file_dependencies: bool,
    /// The server provides support for workspace diagnostics as well.
    #[serde(rename = "workspaceDiagnostics")]
    pub workspace_diagnostics: bool,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 DiagnosticRegistrationOptions                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Diagnostic registration options.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnosticRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DiagnosticRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Diagnostic options.
    ///
    /// @since 3.17.0
    #[serde(flatten)]
    pub diagnostic_options: DiagnosticOptions,
    /// Static registration options to be returned in the initialize
    /// request.
    #[serde(flatten)]
    pub static_registration_options: StaticRegistrationOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  DiagnosticRelatedInformation                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents a related message and source code location for a diagnostic. This should be
/// used to point to code locations that cause or related to a diagnostics, e.g when duplicating
/// a symbol in a scope.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnosticRelatedInformation (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DiagnosticRelatedInformation {
    /// The location of this related diagnostic information.
    #[serde(rename = "location")]
    pub location: super::structures::Location,
    /// The message of this related diagnostic information.
    #[serde(rename = "message")]
    pub message: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                DiagnosticServerCancellationData                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Cancellation data returned from a diagnostic request.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnosticServerCancellationData (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DiagnosticServerCancellationData {
    #[serde(rename = "retriggerRequest")]
    pub retrigger_request: bool,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                             DiagnosticWorkspaceClientCapabilities                              //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Workspace client capabilities specific to diagnostic pull requests.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnosticWorkspaceClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DiagnosticWorkspaceClientCapabilities {
    /// Whether the client implementation supports a refresh request sent from
    /// the server to the client.
    ///
    /// Note that this event is global and will force the client to refresh all
    /// pulled diagnostics currently shown. It should be used with absolute care and
    /// is useful for situation where a server for example detects a project wide
    /// change that requires such a calculation.
    #[serde(rename = "refreshSupport")]
    pub refresh_support: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                            DidChangeConfigurationClientCapabilities                            //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#didChangeConfigurationClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DidChangeConfigurationClientCapabilities {
    /// Did change configuration notification supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  DidChangeConfigurationParams                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters of a change configuration notification.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#didChangeConfigurationParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DidChangeConfigurationParams {
    /// The actual changed settings
    #[serde(rename = "settings")]
    pub settings: super::type_aliases::LspAny,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                           DidChangeConfigurationRegistrationOptions                            //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#didChangeConfigurationRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DidChangeConfigurationRegistrationOptions {
    #[serde(rename = "section")]
    pub section: Option<DidChangeConfigurationRegistrationOptionsSection>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum DidChangeConfigurationRegistrationOptionsSection {
    String(String),
    StringList(Vec<String>),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                DidChangeNotebookDocumentParams                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The params sent in a change notebook document notification.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#didChangeNotebookDocumentParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DidChangeNotebookDocumentParams {
    /// The notebook document that did change. The version number points
    /// to the version after all provided changes have been applied. If
    /// only the text document content of a cell changes the notebook version
    /// doesn't necessarily have to change.
    #[serde(rename = "notebookDocument")]
    pub notebook_document: super::structures::VersionedNotebookDocumentIdentifier,
    /// The actual changes to the notebook document.
    ///
    /// The changes describe single state changes to the notebook document.
    /// So if there are two changes c1 (at array index 0) and c2 (at array
    /// index 1) for a notebook in state S then c1 moves the notebook from
    /// S to S' and c2 from S' to S''. So c1 is computed on the state S and
    /// c2 is computed on the state S'.
    ///
    /// To mirror the content of a notebook using change events use the following approach:
    /// - start with the same initial content
    /// - apply the 'notebookDocument/didChange' notifications in the order you receive them.
    /// - apply the `NotebookChangeEvent`s in a single notification in the order
    ///   you receive them.
    #[serde(rename = "change")]
    pub change: super::structures::NotebookDocumentChangeEvent,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  DidChangeTextDocumentParams                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The change text document notification's parameters.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#didChangeTextDocumentParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DidChangeTextDocumentParams {
    /// The document that did change. The version number points
    /// to the version after all provided content changes have
    /// been applied.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::VersionedTextDocumentIdentifier,
    /// The actual content changes. The content changes describe single state changes
    /// to the document. So if there are two content changes c1 (at array index 0) and
    /// c2 (at array index 1) for a document in state S then c1 moves the document from
    /// S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
    /// on the state S'.
    ///
    /// To mirror the content of a document using change events use the following approach:
    /// - start with the same initial content
    /// - apply the 'textDocument/didChange' notifications in the order you receive them.
    /// - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
    ///   you receive them.
    #[serde(rename = "contentChanges")]
    pub content_changes: Vec<super::type_aliases::TextDocumentContentChangeEvent>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                            DidChangeWatchedFilesClientCapabilities                             //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#didChangeWatchedFilesClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DidChangeWatchedFilesClientCapabilities {
    /// Did change watched files notification supports dynamic registration. Please note
    /// that the current protocol doesn't support static configuration for file changes
    /// from the server side.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// Whether the client has support for {@link  RelativePattern relative pattern}
    /// or not.
    ///
    /// @since 3.17.0
    #[serde(rename = "relativePatternSupport")]
    pub relative_pattern_support: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  DidChangeWatchedFilesParams                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The watched files change notification's parameters.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#didChangeWatchedFilesParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DidChangeWatchedFilesParams {
    /// The actual file events.
    #[serde(rename = "changes")]
    pub changes: Vec<super::structures::FileEvent>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                            DidChangeWatchedFilesRegistrationOptions                            //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Describe options to be used when registered for text document change events.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#didChangeWatchedFilesRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DidChangeWatchedFilesRegistrationOptions {
    /// The watchers to register.
    #[serde(rename = "watchers")]
    pub watchers: Vec<super::structures::FileSystemWatcher>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                DidChangeWorkspaceFoldersParams                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters of a `workspace/didChangeWorkspaceFolders` notification.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#didChangeWorkspaceFoldersParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DidChangeWorkspaceFoldersParams {
    /// The actual workspace folder change event.
    #[serde(rename = "event")]
    pub event: super::structures::WorkspaceFoldersChangeEvent,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 DidCloseNotebookDocumentParams                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The params sent in a close notebook document notification.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#didCloseNotebookDocumentParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DidCloseNotebookDocumentParams {
    /// The notebook document that got closed.
    #[serde(rename = "notebookDocument")]
    pub notebook_document: super::structures::NotebookDocumentIdentifier,
    /// The text documents that represent the content
    /// of a notebook cell that got closed.
    #[serde(rename = "cellTextDocuments")]
    pub cell_text_documents: Vec<super::structures::TextDocumentIdentifier>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   DidCloseTextDocumentParams                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters sent in a close text document notification
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#didCloseTextDocumentParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DidCloseTextDocumentParams {
    /// The document that was closed.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 DidOpenNotebookDocumentParams                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The params sent in an open notebook document notification.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#didOpenNotebookDocumentParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DidOpenNotebookDocumentParams {
    /// The notebook document that got opened.
    #[serde(rename = "notebookDocument")]
    pub notebook_document: super::structures::NotebookDocument,
    /// The text documents that represent the content
    /// of a notebook cell.
    #[serde(rename = "cellTextDocuments")]
    pub cell_text_documents: Vec<super::structures::TextDocumentItem>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   DidOpenTextDocumentParams                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters sent in an open text document notification
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#didOpenTextDocumentParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DidOpenTextDocumentParams {
    /// The document that was opened.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentItem,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 DidSaveNotebookDocumentParams                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The params sent in a save notebook document notification.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#didSaveNotebookDocumentParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DidSaveNotebookDocumentParams {
    /// The notebook document that got saved.
    #[serde(rename = "notebookDocument")]
    pub notebook_document: super::structures::NotebookDocumentIdentifier,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   DidSaveTextDocumentParams                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters sent in a save text document notification
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#didSaveTextDocumentParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DidSaveTextDocumentParams {
    /// The document that was saved.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
    /// Optional the content when saved. Depends on the includeText value
    /// when the save notification was requested.
    #[serde(rename = "text")]
    pub text: Option<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                DocumentColorClientCapabilities                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentColorClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentColorClientCapabilities {
    /// Whether implementation supports dynamic registration. If this is set to `true`
    /// the client supports the new `DocumentColorRegistrationOptions` return value
    /// for the corresponding server capability as well.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      DocumentColorOptions                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentColorOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentColorOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      DocumentColorParams                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Parameters for a {@link DocumentColorRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentColorParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentColorParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    /// The text document.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                DocumentColorRegistrationOptions                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentColorRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentColorRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    #[serde(flatten)]
    pub document_color_options: DocumentColorOptions,
    /// Static registration options to be returned in the initialize
    /// request.
    #[serde(flatten)]
    pub static_registration_options: StaticRegistrationOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    DocumentDiagnosticParams                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Parameters of the document diagnostic request.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentDiagnosticParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentDiagnosticParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    /// The text document.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
    /// The additional identifier  provided during registration.
    #[serde(rename = "identifier")]
    pub identifier: Option<String>,
    /// The result id of a previous response if provided.
    #[serde(rename = "previousResultId")]
    pub previous_result_id: Option<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                             DocumentDiagnosticReportPartialResult                              //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A partial result for a document diagnostic report.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentDiagnosticReportPartialResult (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentDiagnosticReportPartialResult {
    #[serde(rename = "relatedDocuments")]
    pub related_documents:
        HashMap<DocumentUri, DocumentDiagnosticReportPartialResultRelatedDocuments>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum DocumentDiagnosticReportPartialResultRelatedDocuments {
    FullDocumentDiagnosticReport(super::structures::FullDocumentDiagnosticReport),
    UnchangedDocumentDiagnosticReport(super::structures::UnchangedDocumentDiagnosticReport),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                              DocumentFormattingClientCapabilities                              //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client capabilities of a {@link DocumentFormattingRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentFormattingClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentFormattingClientCapabilities {
    /// Whether formatting supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   DocumentFormattingOptions                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Provider options for a {@link DocumentFormattingRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentFormattingOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentFormattingOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    DocumentFormattingParams                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters of a {@link DocumentFormattingRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentFormattingParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentFormattingParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    /// The document to format.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
    /// The format options.
    #[serde(rename = "options")]
    pub options: super::structures::FormattingOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                             DocumentFormattingRegistrationOptions                              //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Registration options for a {@link DocumentFormattingRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentFormattingRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentFormattingRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Provider options for a {@link DocumentFormattingRequest}.
    #[serde(flatten)]
    pub document_formatting_options: DocumentFormattingOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       DocumentHighlight                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A document highlight is a range inside a text document which deserves
/// special attention. Usually a document highlight is visualized by changing
/// the background color of its range.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentHighlight (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentHighlight {
    /// The range this highlight applies to.
    #[serde(rename = "range")]
    pub range: super::structures::Range,
    /// The highlight kind, default is {@link DocumentHighlightKind.Text text}.
    #[serde(rename = "kind")]
    pub kind: Option<super::enumerations::DocumentHighlightKind>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                              DocumentHighlightClientCapabilities                               //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client Capabilities for a {@link DocumentHighlightRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentHighlightClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentHighlightClientCapabilities {
    /// Whether document highlight supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    DocumentHighlightOptions                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Provider options for a {@link DocumentHighlightRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentHighlightOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentHighlightOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    DocumentHighlightParams                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Parameters for a {@link DocumentHighlightRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentHighlightParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentHighlightParams {
    /// A parameter literal used in requests to pass a text document and a position inside that
    /// document.
    #[serde(flatten)]
    pub text_document_position_params: TextDocumentPositionParams,
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                              DocumentHighlightRegistrationOptions                              //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Registration options for a {@link DocumentHighlightRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentHighlightRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentHighlightRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Provider options for a {@link DocumentHighlightRequest}.
    #[serde(flatten)]
    pub document_highlight_options: DocumentHighlightOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          DocumentLink                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A document link is a range in a text document that links to an internal or external resource, like another
/// text document or a web site.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentLink (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentLink {
    /// The range this link applies to.
    #[serde(rename = "range")]
    pub range: super::structures::Range,
    /// The uri this link points to. If missing a resolve request is sent later.
    #[serde(rename = "target")]
    pub target: Option<Uri>,
    /// The tooltip text when you hover over this link.
    ///
    /// If a tooltip is provided, is will be displayed in a string that includes instructions on how to
    /// trigger the link, such as `{0} (ctrl + click)`. The specific instructions vary depending on OS,
    /// user settings, and localization.
    ///
    /// @since 3.15.0
    #[serde(rename = "tooltip")]
    pub tooltip: Option<String>,
    /// A data entry field that is preserved on a document link between a
    /// DocumentLinkRequest and a DocumentLinkResolveRequest.
    #[serde(rename = "data")]
    pub data: Option<super::type_aliases::LspAny>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 DocumentLinkClientCapabilities                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The client capabilities of a {@link DocumentLinkRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentLinkClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentLinkClientCapabilities {
    /// Whether document link supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// Whether the client supports the `tooltip` property on `DocumentLink`.
    ///
    /// @since 3.15.0
    #[serde(rename = "tooltipSupport")]
    pub tooltip_support: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      DocumentLinkOptions                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Provider options for a {@link DocumentLinkRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentLinkOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentLinkOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
    /// Document links have a resolve provider as well.
    #[serde(rename = "resolveProvider")]
    pub resolve_provider: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       DocumentLinkParams                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters of a {@link DocumentLinkRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentLinkParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentLinkParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    /// The document to provide document links for.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                DocumentLinkRegistrationOptions                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Registration options for a {@link DocumentLinkRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentLinkRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentLinkRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Provider options for a {@link DocumentLinkRequest}.
    #[serde(flatten)]
    pub document_link_options: DocumentLinkOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                           DocumentOnTypeFormattingClientCapabilities                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client capabilities of a {@link DocumentOnTypeFormattingRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentOnTypeFormattingClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentOnTypeFormattingClientCapabilities {
    /// Whether on type formatting supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                DocumentOnTypeFormattingOptions                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Provider options for a {@link DocumentOnTypeFormattingRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentOnTypeFormattingOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentOnTypeFormattingOptions {
    /// A character on which formatting should be triggered, like `{`.
    #[serde(rename = "firstTriggerCharacter")]
    pub first_trigger_character: String,
    /// More trigger characters.
    #[serde(rename = "moreTriggerCharacter")]
    pub more_trigger_character: Option<Vec<String>>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 DocumentOnTypeFormattingParams                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters of a {@link DocumentOnTypeFormattingRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentOnTypeFormattingParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentOnTypeFormattingParams {
    /// The document to format.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
    /// The position around which the on type formatting should happen.
    /// This is not necessarily the exact position where the character denoted
    /// by the property `ch` got typed.
    #[serde(rename = "position")]
    pub position: super::structures::Position,
    /// The character that has been typed that triggered the formatting
    /// on type request. That is not necessarily the last character that
    /// got inserted into the document since the client could auto insert
    /// characters as well (e.g. like automatic brace completion).
    #[serde(rename = "ch")]
    pub ch: String,
    /// The formatting options.
    #[serde(rename = "options")]
    pub options: super::structures::FormattingOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                          DocumentOnTypeFormattingRegistrationOptions                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Registration options for a {@link DocumentOnTypeFormattingRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentOnTypeFormattingRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentOnTypeFormattingRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Provider options for a {@link DocumentOnTypeFormattingRequest}.
    #[serde(flatten)]
    pub document_on_type_formatting_options: DocumentOnTypeFormattingOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                           DocumentRangeFormattingClientCapabilities                            //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client capabilities of a {@link DocumentRangeFormattingRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentRangeFormattingClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentRangeFormattingClientCapabilities {
    /// Whether range formatting supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 DocumentRangeFormattingOptions                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Provider options for a {@link DocumentRangeFormattingRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentRangeFormattingOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentRangeFormattingOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 DocumentRangeFormattingParams                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters of a {@link DocumentRangeFormattingRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentRangeFormattingParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentRangeFormattingParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    /// The document to format.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
    /// The range to format
    #[serde(rename = "range")]
    pub range: super::structures::Range,
    /// The format options
    #[serde(rename = "options")]
    pub options: super::structures::FormattingOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                           DocumentRangeFormattingRegistrationOptions                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Registration options for a {@link DocumentRangeFormattingRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentRangeFormattingRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentRangeFormattingRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Provider options for a {@link DocumentRangeFormattingRequest}.
    #[serde(flatten)]
    pub document_range_formatting_options: DocumentRangeFormattingOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         DocumentSymbol                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents programming constructs like variables, classes, interfaces etc.
/// that appear in a document. Document symbols can be hierarchical and they
/// have two ranges: one that encloses its definition and one that points to
/// its most interesting range, e.g. the range of an identifier.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentSymbol (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentSymbol {
    /// The name of this symbol. Will be displayed in the user interface and therefore must not be
    /// an empty string or a string only consisting of white spaces.
    #[serde(rename = "name")]
    pub name: String,
    /// More detail for this symbol, e.g the signature of a function.
    #[serde(rename = "detail")]
    pub detail: Option<String>,
    /// The kind of this symbol.
    #[serde(rename = "kind")]
    pub kind: super::enumerations::SymbolKind,
    /// Tags for this document symbol.
    ///
    /// @since 3.16.0
    #[serde(rename = "tags")]
    pub tags: Option<Vec<super::enumerations::SymbolTag>>,
    /// The range enclosing this symbol not including leading/trailing whitespace but everything else
    /// like comments. This information is typically used to determine if the clients cursor is
    /// inside the symbol to reveal in the symbol in the UI.
    #[serde(rename = "range")]
    pub range: super::structures::Range,
    /// The range that should be selected and revealed when this symbol is being picked, e.g the name of a function.
    /// Must be contained by the `range`.
    #[serde(rename = "selectionRange")]
    pub selection_range: super::structures::Range,
    /// Children of this symbol, e.g. properties of a class.
    #[serde(rename = "children")]
    pub children: Option<Vec<super::structures::DocumentSymbol>>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                DocumentSymbolClientCapabilities                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client Capabilities for a {@link DocumentSymbolRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentSymbolClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentSymbolClientCapabilities {
    /// Whether document symbol supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// Specific capabilities for the `SymbolKind` in the
    /// `textDocument/documentSymbol` request.
    #[serde(rename = "symbolKind")]
    pub symbol_kind: Option<DocumentSymbolClientCapabilitiesSymbolKind>,
    /// The client supports hierarchical document symbols.
    #[serde(rename = "hierarchicalDocumentSymbolSupport")]
    pub hierarchical_document_symbol_support: Option<bool>,
    /// The client supports tags on `SymbolInformation`. Tags are supported on
    /// `DocumentSymbol` if `hierarchicalDocumentSymbolSupport` is set to true.
    /// Clients supporting tags have to handle unknown tags gracefully.
    ///
    /// @since 3.16.0
    #[serde(rename = "tagSupport")]
    pub tag_support: Option<DocumentSymbolClientCapabilitiesTagSupport>,
    /// The client supports an additional label presented in the UI when
    /// registering a document symbol provider.
    ///
    /// @since 3.16.0
    #[serde(rename = "labelSupport")]
    pub label_support: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentSymbolClientCapabilitiesSymbolKind {
    /// The symbol kind values the client supports. When this
    /// property exists the client also guarantees that it will
    /// handle values outside its set gracefully and falls back
    /// to a default value when unknown.
    ///
    /// If this property is not present the client only supports
    /// the symbol kinds from `File` to `Array` as defined in
    /// the initial version of the protocol.
    #[serde(rename = "valueSet")]
    pub value_set: Option<Vec<super::enumerations::SymbolKind>>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentSymbolClientCapabilitiesTagSupport {
    /// The tags supported by the client.
    #[serde(rename = "valueSet")]
    pub value_set: Vec<super::enumerations::SymbolTag>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     DocumentSymbolOptions                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Provider options for a {@link DocumentSymbolRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentSymbolOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentSymbolOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
    /// A human-readable string that is shown when multiple outlines trees
    /// are shown for the same document.
    ///
    /// @since 3.16.0
    #[serde(rename = "label")]
    pub label: Option<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      DocumentSymbolParams                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Parameters for a {@link DocumentSymbolRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentSymbolParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentSymbolParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    /// The text document.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                               DocumentSymbolRegistrationOptions                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Registration options for a {@link DocumentSymbolRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentSymbolRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct DocumentSymbolRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Provider options for a {@link DocumentSymbolRequest}.
    #[serde(flatten)]
    pub document_symbol_options: DocumentSymbolOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                ExecuteCommandClientCapabilities                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The client capabilities of a {@link ExecuteCommandRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#executeCommandClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ExecuteCommandClientCapabilities {
    /// Execute command supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     ExecuteCommandOptions                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The server capabilities of a {@link ExecuteCommandRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#executeCommandOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ExecuteCommandOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
    /// The commands to be executed on the server
    #[serde(rename = "commands")]
    pub commands: Vec<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      ExecuteCommandParams                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters of a {@link ExecuteCommandRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#executeCommandParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ExecuteCommandParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    /// The identifier of the actual command handler.
    #[serde(rename = "command")]
    pub command: String,
    /// Arguments that the command should be invoked with.
    #[serde(rename = "arguments")]
    pub arguments: Option<Vec<super::type_aliases::LspAny>>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                               ExecuteCommandRegistrationOptions                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Registration options for a {@link ExecuteCommandRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#executeCommandRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ExecuteCommandRegistrationOptions {
    /// The server capabilities of a {@link ExecuteCommandRequest}.
    #[serde(flatten)]
    pub execute_command_options: ExecuteCommandOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        ExecutionSummary                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#executionSummary (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ExecutionSummary {
    /// A strict monotonically increasing value
    /// indicating the execution order of a cell
    /// inside a notebook.
    #[serde(rename = "executionOrder")]
    pub execution_order: UInteger,
    /// Whether the execution was successful or
    /// not if known by the client.
    #[serde(rename = "success")]
    pub success: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           FileCreate                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents information on a file/folder create.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#fileCreate (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FileCreate {
    /// A file:// URI for the location of the file/folder being created.
    #[serde(rename = "uri")]
    pub uri: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           FileDelete                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents information on a file/folder delete.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#fileDelete (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FileDelete {
    /// A file:// URI for the location of the file/folder being deleted.
    #[serde(rename = "uri")]
    pub uri: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           FileEvent                                            //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] An event describing a file change.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#fileEvent (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FileEvent {
    /// The file's uri.
    #[serde(rename = "uri")]
    pub uri: DocumentUri,
    /// The change type.
    #[serde(rename = "type")]
    pub type_: super::enumerations::FileChangeType,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                FileOperationClientCapabilities                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Capabilities relating to events from file operations by the user in the client.
///
/// These events do not come from the file system, they come from user operations
/// like renaming a file in the UI.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#fileOperationClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FileOperationClientCapabilities {
    /// Whether the client supports dynamic registration for file requests/notifications.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// The client has support for sending didCreateFiles notifications.
    #[serde(rename = "didCreate")]
    pub did_create: Option<bool>,
    /// The client has support for sending willCreateFiles requests.
    #[serde(rename = "willCreate")]
    pub will_create: Option<bool>,
    /// The client has support for sending didRenameFiles notifications.
    #[serde(rename = "didRename")]
    pub did_rename: Option<bool>,
    /// The client has support for sending willRenameFiles requests.
    #[serde(rename = "willRename")]
    pub will_rename: Option<bool>,
    /// The client has support for sending didDeleteFiles notifications.
    #[serde(rename = "didDelete")]
    pub did_delete: Option<bool>,
    /// The client has support for sending willDeleteFiles requests.
    #[serde(rename = "willDelete")]
    pub will_delete: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      FileOperationFilter                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A filter to describe in which file operation requests or notifications
/// the server is interested in receiving.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#fileOperationFilter (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FileOperationFilter {
    /// A Uri scheme like `file` or `untitled`.
    #[serde(rename = "scheme")]
    pub scheme: Option<String>,
    /// The actual file operation pattern.
    #[serde(rename = "pattern")]
    pub pattern: super::structures::FileOperationPattern,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      FileOperationOptions                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Options for notifications/requests for user operations on files.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#fileOperationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FileOperationOptions {
    /// The server is interested in receiving didCreateFiles notifications.
    #[serde(rename = "didCreate")]
    pub did_create: Option<super::structures::FileOperationRegistrationOptions>,
    /// The server is interested in receiving willCreateFiles requests.
    #[serde(rename = "willCreate")]
    pub will_create: Option<super::structures::FileOperationRegistrationOptions>,
    /// The server is interested in receiving didRenameFiles notifications.
    #[serde(rename = "didRename")]
    pub did_rename: Option<super::structures::FileOperationRegistrationOptions>,
    /// The server is interested in receiving willRenameFiles requests.
    #[serde(rename = "willRename")]
    pub will_rename: Option<super::structures::FileOperationRegistrationOptions>,
    /// The server is interested in receiving didDeleteFiles file notifications.
    #[serde(rename = "didDelete")]
    pub did_delete: Option<super::structures::FileOperationRegistrationOptions>,
    /// The server is interested in receiving willDeleteFiles file requests.
    #[serde(rename = "willDelete")]
    pub will_delete: Option<super::structures::FileOperationRegistrationOptions>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      FileOperationPattern                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A pattern to describe in which file operation requests or notifications
/// the server is interested in receiving.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#fileOperationPattern (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FileOperationPattern {
    /// The glob pattern to match. Glob patterns can have the following syntax:
    /// - `*` to match one or more characters in a path segment
    /// - `?` to match on one character in a path segment
    /// - `**` to match any number of path segments, including none
    /// - `{}` to group sub patterns into an OR expression. (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
    /// - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
    /// - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
    #[serde(rename = "glob")]
    pub glob: String,
    /// Whether to match files or folders with this pattern.
    ///
    /// Matches both if undefined.
    #[serde(rename = "matches")]
    pub matches: Option<super::enumerations::FileOperationPatternKind>,
    /// Additional options used during matching.
    #[serde(rename = "options")]
    pub options: Option<super::structures::FileOperationPatternOptions>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  FileOperationPatternOptions                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Matching options for the file operation pattern.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#fileOperationPatternOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FileOperationPatternOptions {
    /// The pattern should be matched ignoring casing.
    #[serde(rename = "ignoreCase")]
    pub ignore_case: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                FileOperationRegistrationOptions                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The options to register for file operations.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#fileOperationRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FileOperationRegistrationOptions {
    /// The actual filters.
    #[serde(rename = "filters")]
    pub filters: Vec<super::structures::FileOperationFilter>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           FileRename                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents information on a file/folder rename.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#fileRename (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FileRename {
    /// A file:// URI for the original location of the file/folder being renamed.
    #[serde(rename = "oldUri")]
    pub old_uri: String,
    /// A file:// URI for the new location of the file/folder being renamed.
    #[serde(rename = "newUri")]
    pub new_uri: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       FileSystemWatcher                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#fileSystemWatcher (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FileSystemWatcher {
    /// The glob pattern to watch. See {@link GlobPattern glob pattern} for more detail.
    ///
    /// @since 3.17.0 support for relative patterns.
    #[serde(rename = "globPattern")]
    pub glob_pattern: super::type_aliases::GlobPattern,
    /// The kind of events of interest. If omitted it defaults
    /// to WatchKind.Create | WatchKind.Change | WatchKind.Delete
    /// which is 7.
    #[serde(rename = "kind")]
    pub kind: Option<super::enumerations::WatchKind>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          FoldingRange                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents a folding range. To be valid, start and end line must be bigger than zero and smaller
/// than the number of lines in the document. Clients are free to ignore invalid ranges.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#foldingRange (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FoldingRange {
    /// The zero-based start line of the range to fold. The folded area starts after the line's last character.
    /// To be valid, the end must be zero or larger and smaller than the number of lines in the document.
    #[serde(rename = "startLine")]
    pub start_line: UInteger,
    /// The zero-based character offset from where the folded range starts. If not defined, defaults to the length of the start line.
    #[serde(rename = "startCharacter")]
    pub start_character: Option<UInteger>,
    /// The zero-based end line of the range to fold. The folded area ends with the line's last character.
    /// To be valid, the end must be zero or larger and smaller than the number of lines in the document.
    #[serde(rename = "endLine")]
    pub end_line: UInteger,
    /// The zero-based character offset before the folded range ends. If not defined, defaults to the length of the end line.
    #[serde(rename = "endCharacter")]
    pub end_character: Option<UInteger>,
    /// Describes the kind of the folding range such as `comment' or 'region'. The kind
    /// is used to categorize folding ranges and used by commands like 'Fold all comments'.
    /// See {@link FoldingRangeKind} for an enumeration of standardized kinds.
    #[serde(rename = "kind")]
    pub kind: Option<super::enumerations::FoldingRangeKind>,
    /// The text that the client should show when the specified range is
    /// collapsed. If not defined or not supported by the client, a default
    /// will be chosen by the client.
    ///
    /// @since 3.17.0
    #[serde(rename = "collapsedText")]
    pub collapsed_text: Option<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 FoldingRangeClientCapabilities                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#foldingRangeClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FoldingRangeClientCapabilities {
    /// Whether implementation supports dynamic registration for folding range
    /// providers. If this is set to `true` the client supports the new
    /// `FoldingRangeRegistrationOptions` return value for the corresponding
    /// server capability as well.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// The maximum number of folding ranges that the client prefers to receive
    /// per document. The value serves as a hint, servers are free to follow the
    /// limit.
    #[serde(rename = "rangeLimit")]
    pub range_limit: Option<UInteger>,
    /// If set, the client signals that it only supports folding complete lines.
    /// If set, client will ignore specified `startCharacter` and `endCharacter`
    /// properties in a FoldingRange.
    #[serde(rename = "lineFoldingOnly")]
    pub line_folding_only: Option<bool>,
    /// Specific options for the folding range kind.
    ///
    /// @since 3.17.0
    #[serde(rename = "foldingRangeKind")]
    pub folding_range_kind: Option<FoldingRangeClientCapabilitiesFoldingRangeKind>,
    /// Specific options for the folding range.
    ///
    /// @since 3.17.0
    #[serde(rename = "foldingRange")]
    pub folding_range: Option<FoldingRangeClientCapabilitiesFoldingRange>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FoldingRangeClientCapabilitiesFoldingRangeKind {
    /// The folding range kind values the client supports. When this
    /// property exists the client also guarantees that it will
    /// handle values outside its set gracefully and falls back
    /// to a default value when unknown.
    #[serde(rename = "valueSet")]
    pub value_set: Option<Vec<super::enumerations::FoldingRangeKind>>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FoldingRangeClientCapabilitiesFoldingRange {
    /// If set, the client signals that it supports setting collapsedText on
    /// folding ranges to display custom labels instead of the default text.
    ///
    /// @since 3.17.0
    #[serde(rename = "collapsedText")]
    pub collapsed_text: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      FoldingRangeOptions                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#foldingRangeOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FoldingRangeOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       FoldingRangeParams                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Parameters for a {@link FoldingRangeRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#foldingRangeParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FoldingRangeParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    /// The text document.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                FoldingRangeRegistrationOptions                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#foldingRangeRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FoldingRangeRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    #[serde(flatten)]
    pub folding_range_options: FoldingRangeOptions,
    /// Static registration options to be returned in the initialize
    /// request.
    #[serde(flatten)]
    pub static_registration_options: StaticRegistrationOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       FormattingOptions                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Value-object describing what options formatting should use.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#formattingOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FormattingOptions {
    /// Size of a tab in spaces.
    #[serde(rename = "tabSize")]
    pub tab_size: UInteger,
    /// Prefer spaces over tabs.
    #[serde(rename = "insertSpaces")]
    pub insert_spaces: bool,
    /// Trim trailing whitespace on a line.
    ///
    /// @since 3.15.0
    #[serde(rename = "trimTrailingWhitespace")]
    pub trim_trailing_whitespace: Option<bool>,
    /// Insert a newline character at the end of the file if one does not exist.
    ///
    /// @since 3.15.0
    #[serde(rename = "insertFinalNewline")]
    pub insert_final_newline: Option<bool>,
    /// Trim all newlines after the final newline at the end of the file.
    ///
    /// @since 3.15.0
    #[serde(rename = "trimFinalNewlines")]
    pub trim_final_newlines: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  FullDocumentDiagnosticReport                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A diagnostic report with a full set of problems.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#fullDocumentDiagnosticReport (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct FullDocumentDiagnosticReport {
    /// A full document diagnostic report.
    #[serde(rename = "kind")]
    pub kind: FullDocumentDiagnosticReportKind,
    /// An optional result id. If provided it will
    /// be sent on the next diagnostic request for the
    /// same document.
    #[serde(rename = "resultId")]
    pub result_id: Option<String>,
    /// The actual items.
    #[serde(rename = "items")]
    pub items: Vec<super::structures::Diagnostic>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum FullDocumentDiagnosticReportKind {
    #[serde(rename = "full")]
    Full,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   GeneralClientCapabilities                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] General client capabilities.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#generalClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct GeneralClientCapabilities {
    /// Client capability that signals how the client
    /// handles stale requests (e.g. a request
    /// for which the client will not process the response
    /// anymore since the information is outdated).
    ///
    /// @since 3.17.0
    #[serde(rename = "staleRequestSupport")]
    pub stale_request_support: Option<GeneralClientCapabilitiesStaleRequestSupport>,
    /// Client capabilities specific to regular expressions.
    ///
    /// @since 3.16.0
    #[serde(rename = "regularExpressions")]
    pub regular_expressions: Option<super::structures::RegularExpressionsClientCapabilities>,
    /// Client capabilities specific to the client's markdown parser.
    ///
    /// @since 3.16.0
    #[serde(rename = "markdown")]
    pub markdown: Option<super::structures::MarkdownClientCapabilities>,
    /// The position encodings supported by the client. Client and server
    /// have to agree on the same position encoding to ensure that offsets
    /// (e.g. character position in a line) are interpreted the same on both
    /// sides.
    ///
    /// To keep the protocol backwards compatible the following applies: if
    /// the value 'utf-16' is missing from the array of position encodings
    /// servers can assume that the client supports UTF-16. UTF-16 is
    /// therefore a mandatory encoding.
    ///
    /// If omitted it defaults to ['utf-16'].
    ///
    /// Implementation considerations: since the conversion from one encoding
    /// into another requires the content of the file / line the conversion
    /// is best done where the file is read which is usually on the server
    /// side.
    ///
    /// @since 3.17.0
    #[serde(rename = "positionEncodings")]
    pub position_encodings: Option<Vec<super::enumerations::PositionEncodingKind>>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct GeneralClientCapabilitiesStaleRequestSupport {
    /// The client will actively cancel the request.
    #[serde(rename = "cancel")]
    pub cancel: bool,
    /// The list of requests for which the client
    /// will retry the request if it receives a
    /// response with error code `ContentModified`
    #[serde(rename = "retryOnContentModified")]
    pub retry_on_content_modified: Vec<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                             Hover                                              //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The result of a hover request.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#hover (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct Hover {
    /// The hover's content
    #[serde(rename = "contents")]
    pub contents: HoverContents,
    /// An optional range inside the text document that is used to
    /// visualize the hover, e.g. by changing the background color.
    #[serde(rename = "range")]
    pub range: Option<super::structures::Range>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum HoverContents {
    MarkupContent(super::structures::MarkupContent),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    HoverClientCapabilities                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#hoverClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct HoverClientCapabilities {
    /// Whether hover supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// Client supports the following content formats for the content
    /// property. The order describes the preferred format of the client.
    #[serde(rename = "contentFormat")]
    pub content_format: Option<Vec<super::enumerations::MarkupKind>>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          HoverOptions                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Hover options.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#hoverOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct HoverOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          HoverParams                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Parameters for a {@link HoverRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#hoverParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct HoverParams {
    /// A parameter literal used in requests to pass a text document and a position inside that
    /// document.
    #[serde(flatten)]
    pub text_document_position_params: TextDocumentPositionParams,
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    HoverRegistrationOptions                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Registration options for a {@link HoverRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#hoverRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct HoverRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Hover options.
    #[serde(flatten)]
    pub hover_options: HoverOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                ImplementationClientCapabilities                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.6.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#implementationClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ImplementationClientCapabilities {
    /// Whether implementation supports dynamic registration. If this is set to `true`
    /// the client supports the new `ImplementationRegistrationOptions` return value
    /// for the corresponding server capability as well.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// The client supports additional metadata in the form of definition links.
    ///
    /// @since 3.14.0
    #[serde(rename = "linkSupport")]
    pub link_support: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     ImplementationOptions                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#implementationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ImplementationOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      ImplementationParams                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#implementationParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ImplementationParams {
    /// A parameter literal used in requests to pass a text document and a position inside that
    /// document.
    #[serde(flatten)]
    pub text_document_position_params: TextDocumentPositionParams,
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                               ImplementationRegistrationOptions                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#implementationRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ImplementationRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    #[serde(flatten)]
    pub implementation_options: ImplementationOptions,
    /// Static registration options to be returned in the initialize
    /// request.
    #[serde(flatten)]
    pub static_registration_options: StaticRegistrationOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        InitializeError                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The data type of the ResponseError if the
/// initialize request fails.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#initializeError (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InitializeError {
    /// Indicates whether the client execute the following retry logic:
    /// (1) show the message provided by the ResponseError to the user
    /// (2) user selects retry or cancel
    /// (3) if user selected retry the initialize method is sent again.
    #[serde(rename = "retry")]
    pub retry: bool,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        InitializeParams                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#initializeParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InitializeParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    /// The process Id of the parent process that started
    /// the server.
    ///
    /// Is `null` if the process has not been started by another process.
    /// If the parent process is not alive then the server should exit.
    #[serde(rename = "processId")]
    pub process_id: InitializeParamsProcessId,
    /// Information about the client
    ///
    /// @since 3.15.0
    #[serde(rename = "clientInfo")]
    pub client_info: Option<InitializeParamsClientInfo>,
    /// The locale the client is currently showing the user interface
    /// in. This must not necessarily be the locale of the operating
    /// system.
    ///
    /// Uses IETF language tags as the value's syntax
    /// (See https://en.wikipedia.org/wiki/IETF_language_tag)
    ///
    /// @since 3.16.0
    #[serde(rename = "locale")]
    pub locale: Option<String>,
    /// The capabilities provided by the client (editor or tool)
    #[serde(rename = "capabilities")]
    pub capabilities: super::structures::ClientCapabilities,
    /// User provided initialization options.
    #[serde(rename = "initializationOptions")]
    pub initialization_options: Option<super::type_aliases::LspAny>,
    /// The initial trace setting. If omitted trace is disabled ('off').
    #[serde(rename = "trace")]
    pub trace: Option<super::enumerations::TraceValues>,
    /// The workspace folders configured in the client when the server starts.
    ///
    /// This property is only available if the client supports workspace folders.
    /// It can be `null` if the client supports workspace folders but none are
    /// configured.
    ///
    /// @since 3.6.0
    #[serde(rename = "workspaceFolders")]
    pub workspace_folders: Option<InitializeParamsWorkspaceFolders>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum InitializeParamsProcessId {
    Integer(Integer),
    Null(Null),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InitializeParamsClientInfo {
    /// The name of the client as defined by the client.
    #[serde(rename = "name")]
    pub name: String,
    /// The client's version as defined by the client.
    #[serde(rename = "version")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum InitializeParamsWorkspaceFolders {
    WorkspaceFolderList(Vec<super::structures::WorkspaceFolder>),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        InitializeResult                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The result returned from an initialize request.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#initializeResult (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InitializeResult {
    /// The capabilities the language server provides.
    #[serde(rename = "capabilities")]
    pub capabilities: super::structures::ServerCapabilities,
    /// Information about the server.
    ///
    /// @since 3.15.0
    #[serde(rename = "serverInfo")]
    pub server_info: Option<InitializeResultServerInfo>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InitializeResultServerInfo {
    /// The name of the server as defined by the server.
    #[serde(rename = "name")]
    pub name: String,
    /// The server's version as defined by the server.
    #[serde(rename = "version")]
    pub version: Option<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       InitializedParams                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#initializedParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InitializedParams {}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           InlayHint                                            //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Inlay hint information.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlayHint (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InlayHint {
    /// The position of this hint.
    ///
    /// If multiple hints have the same position, they will be shown in the order
    /// they appear in the response.
    #[serde(rename = "position")]
    pub position: super::structures::Position,
    /// The label of this hint. A human readable string or an array of
    /// InlayHintLabelPart label parts.
    ///
    /// *Note* that neither the string nor the label part can be empty.
    #[serde(rename = "label")]
    pub label: InlayHintLabel,
    /// The kind of this hint. Can be omitted in which case the client
    /// should fall back to a reasonable default.
    #[serde(rename = "kind")]
    pub kind: Option<super::enumerations::InlayHintKind>,
    /// Optional text edits that are performed when accepting this inlay hint.
    ///
    /// *Note* that edits are expected to change the document so that the inlay
    /// hint (or its nearest variant) is now part of the document and the inlay
    /// hint itself is now obsolete.
    #[serde(rename = "textEdits")]
    pub text_edits: Option<Vec<super::structures::TextEdit>>,
    /// The tooltip text when you hover over this item.
    #[serde(rename = "tooltip")]
    pub tooltip: Option<InlayHintTooltip>,
    /// Render padding before the hint.
    ///
    /// Note: Padding should use the editor's background color, not the
    /// background color of the hint itself. That means padding can be used
    /// to visually align/separate an inlay hint.
    #[serde(rename = "paddingLeft")]
    pub padding_left: Option<bool>,
    /// Render padding after the hint.
    ///
    /// Note: Padding should use the editor's background color, not the
    /// background color of the hint itself. That means padding can be used
    /// to visually align/separate an inlay hint.
    #[serde(rename = "paddingRight")]
    pub padding_right: Option<bool>,
    /// A data entry field that is preserved on an inlay hint between
    /// a `textDocument/inlayHint` and a `inlayHint/resolve` request.
    #[serde(rename = "data")]
    pub data: Option<super::type_aliases::LspAny>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum InlayHintLabel {
    String(String),
    InlayHintLabelPartList(Vec<super::structures::InlayHintLabelPart>),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum InlayHintTooltip {
    String(String),
    MarkupContent(super::structures::MarkupContent),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  InlayHintClientCapabilities                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Inlay hint client capabilities.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlayHintClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InlayHintClientCapabilities {
    /// Whether inlay hints support dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// Indicates which properties a client can resolve lazily on an inlay
    /// hint.
    #[serde(rename = "resolveSupport")]
    pub resolve_support: Option<InlayHintClientCapabilitiesResolveSupport>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InlayHintClientCapabilitiesResolveSupport {
    /// The properties that a client can resolve lazily.
    #[serde(rename = "properties")]
    pub properties: Vec<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       InlayHintLabelPart                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] An inlay hint label part allows for interactive and composite labels
/// of inlay hints.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlayHintLabelPart (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InlayHintLabelPart {
    /// The value of this label part.
    #[serde(rename = "value")]
    pub value: String,
    /// The tooltip text when you hover over this label part. Depending on
    /// the client capability `inlayHint.resolveSupport` clients might resolve
    /// this property late using the resolve request.
    #[serde(rename = "tooltip")]
    pub tooltip: Option<InlayHintLabelPartTooltip>,
    /// An optional source code location that represents this
    /// label part.
    ///
    /// The editor will use this location for the hover and for code navigation
    /// features: This part will become a clickable link that resolves to the
    /// definition of the symbol at the given location (not necessarily the
    /// location itself), it shows the hover that shows at the given location,
    /// and it shows a context menu with further code navigation commands.
    ///
    /// Depending on the client capability `inlayHint.resolveSupport` clients
    /// might resolve this property late using the resolve request.
    #[serde(rename = "location")]
    pub location: Option<super::structures::Location>,
    /// An optional command for this label part.
    ///
    /// Depending on the client capability `inlayHint.resolveSupport` clients
    /// might resolve this property late using the resolve request.
    #[serde(rename = "command")]
    pub command: Option<super::structures::Command>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum InlayHintLabelPartTooltip {
    String(String),
    MarkupContent(super::structures::MarkupContent),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        InlayHintOptions                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Inlay hint options used during static registration.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlayHintOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InlayHintOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
    /// The server provides support to resolve additional
    /// information for an inlay hint item.
    #[serde(rename = "resolveProvider")]
    pub resolve_provider: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        InlayHintParams                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A parameter literal used in inlay hint requests.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlayHintParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InlayHintParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    /// The text document.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
    /// The document range for which inlay hints should be computed.
    #[serde(rename = "range")]
    pub range: super::structures::Range,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  InlayHintRegistrationOptions                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Inlay hint options used during static or dynamic registration.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlayHintRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InlayHintRegistrationOptions {
    /// Inlay hint options used during static registration.
    ///
    /// @since 3.17.0
    #[serde(flatten)]
    pub inlay_hint_options: InlayHintOptions,
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Static registration options to be returned in the initialize
    /// request.
    #[serde(flatten)]
    pub static_registration_options: StaticRegistrationOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                              InlayHintWorkspaceClientCapabilities                              //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client workspace capabilities specific to inlay hints.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlayHintWorkspaceClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InlayHintWorkspaceClientCapabilities {
    /// Whether the client implementation supports a refresh request sent from
    /// the server to the client.
    ///
    /// Note that this event is global and will force the client to refresh all
    /// inlay hints currently shown. It should be used with absolute care and
    /// is useful for situation where a server for example detects a project wide
    /// change that requires such a calculation.
    #[serde(rename = "refreshSupport")]
    pub refresh_support: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 InlineValueClientCapabilities                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client capabilities specific to inline values.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlineValueClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InlineValueClientCapabilities {
    /// Whether implementation supports dynamic registration for inline value providers.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       InlineValueContext                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlineValueContext (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InlineValueContext {
    /// The stack frame (as a DAP Id) where the execution has stopped.
    #[serde(rename = "frameId")]
    pub frame_id: Integer,
    /// The document range where execution has stopped.
    /// Typically the end position of the range denotes the line where the inline values are shown.
    #[serde(rename = "stoppedLocation")]
    pub stopped_location: super::structures::Range,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                InlineValueEvaluatableExpression                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Provide an inline value through an expression evaluation.
/// If only a range is specified, the expression will be extracted from the underlying document.
/// An optional expression can be used to override the extracted expression.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlineValueEvaluatableExpression (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InlineValueEvaluatableExpression {
    /// The document range for which the inline value applies.
    /// The range is used to extract the evaluatable expression from the underlying document.
    #[serde(rename = "range")]
    pub range: super::structures::Range,
    /// If specified the expression overrides the extracted expression.
    #[serde(rename = "expression")]
    pub expression: Option<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       InlineValueOptions                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Inline value options used during static registration.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlineValueOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InlineValueOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       InlineValueParams                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A parameter literal used in inline value requests.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlineValueParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InlineValueParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    /// The text document.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
    /// The document range for which inline values should be computed.
    #[serde(rename = "range")]
    pub range: super::structures::Range,
    /// Additional information about the context in which inline values were
    /// requested.
    #[serde(rename = "context")]
    pub context: super::structures::InlineValueContext,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 InlineValueRegistrationOptions                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Inline value options used during static or dynamic registration.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlineValueRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InlineValueRegistrationOptions {
    /// Inline value options used during static registration.
    ///
    /// @since 3.17.0
    #[serde(flatten)]
    pub inline_value_options: InlineValueOptions,
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Static registration options to be returned in the initialize
    /// request.
    #[serde(flatten)]
    pub static_registration_options: StaticRegistrationOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        InlineValueText                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Provide inline value as text.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlineValueText (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InlineValueText {
    /// The document range for which the inline value applies.
    #[serde(rename = "range")]
    pub range: super::structures::Range,
    /// The text of the inline value.
    #[serde(rename = "text")]
    pub text: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   InlineValueVariableLookup                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Provide inline value through a variable lookup.
/// If only a range is specified, the variable name will be extracted from the underlying document.
/// An optional variable name can be used to override the extracted name.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlineValueVariableLookup (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InlineValueVariableLookup {
    /// The document range for which the inline value applies.
    /// The range is used to extract the variable name from the underlying document.
    #[serde(rename = "range")]
    pub range: super::structures::Range,
    /// If specified the name of the variable to look up.
    #[serde(rename = "variableName")]
    pub variable_name: Option<String>,
    /// How to perform the lookup.
    #[serde(rename = "caseSensitiveLookup")]
    pub case_sensitive_lookup: bool,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                             InlineValueWorkspaceClientCapabilities                             //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client workspace capabilities specific to inline values.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlineValueWorkspaceClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InlineValueWorkspaceClientCapabilities {
    /// Whether the client implementation supports a refresh request sent from the
    /// server to the client.
    ///
    /// Note that this event is global and will force the client to refresh all
    /// inline values currently shown. It should be used with absolute care and is
    /// useful for situation where a server for example detects a project wide
    /// change that requires such a calculation.
    #[serde(rename = "refreshSupport")]
    pub refresh_support: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       InsertReplaceEdit                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A special text edit to provide an insert and a replace operation.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#insertReplaceEdit (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct InsertReplaceEdit {
    /// The string to be inserted.
    #[serde(rename = "newText")]
    pub new_text: String,
    /// The range if the insert is requested
    #[serde(rename = "insert")]
    pub insert: super::structures::Range,
    /// The range if the replace is requested.
    #[serde(rename = "replace")]
    pub replace: super::structures::Range,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                              LinkedEditingRangeClientCapabilities                              //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client capabilities for the linked editing range request.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#linkedEditingRangeClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct LinkedEditingRangeClientCapabilities {
    /// Whether implementation supports dynamic registration. If this is set to `true`
    /// the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`
    /// return value for the corresponding server capability as well.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   LinkedEditingRangeOptions                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#linkedEditingRangeOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct LinkedEditingRangeOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    LinkedEditingRangeParams                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#linkedEditingRangeParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct LinkedEditingRangeParams {
    /// A parameter literal used in requests to pass a text document and a position inside that
    /// document.
    #[serde(flatten)]
    pub text_document_position_params: TextDocumentPositionParams,
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                             LinkedEditingRangeRegistrationOptions                              //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#linkedEditingRangeRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct LinkedEditingRangeRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    #[serde(flatten)]
    pub linked_editing_range_options: LinkedEditingRangeOptions,
    /// Static registration options to be returned in the initialize
    /// request.
    #[serde(flatten)]
    pub static_registration_options: StaticRegistrationOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      LinkedEditingRanges                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The result of a linked editing range request.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#linkedEditingRanges (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct LinkedEditingRanges {
    /// A list of ranges that can be edited together. The ranges must have
    /// identical length and contain identical text content. The ranges cannot overlap.
    #[serde(rename = "ranges")]
    pub ranges: Vec<super::structures::Range>,
    /// An optional word pattern (regular expression) that describes valid contents for
    /// the given ranges. If no pattern is provided, the client configuration's word
    /// pattern will be used.
    #[serde(rename = "wordPattern")]
    pub word_pattern: Option<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                            Location                                            //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents a location inside a resource, such as a line
/// inside a text file.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#location (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct Location {
    #[serde(rename = "uri")]
    pub uri: DocumentUri,
    #[serde(rename = "range")]
    pub range: super::structures::Range,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          LocationLink                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents the connection of two locations. Provides additional metadata over normal {@link Location locations},
/// including an origin range.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#locationLink (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct LocationLink {
    /// Span of the origin of this link.
    ///
    /// Used as the underlined span for mouse interaction. Defaults to the word range at
    /// the definition position.
    #[serde(rename = "originSelectionRange")]
    pub origin_selection_range: Option<super::structures::Range>,
    /// The target resource identifier of this link.
    #[serde(rename = "targetUri")]
    pub target_uri: DocumentUri,
    /// The full target range of this link. If the target for example is a symbol then target range is the
    /// range enclosing this symbol not including leading/trailing whitespace but everything else
    /// like comments. This information is typically used to highlight the range in the editor.
    #[serde(rename = "targetRange")]
    pub target_range: super::structures::Range,
    /// The range that should be selected and revealed when this link is being followed, e.g the name of a function.
    /// Must be contained by the `targetRange`. See also `DocumentSymbol#range`
    #[serde(rename = "targetSelectionRange")]
    pub target_selection_range: super::structures::Range,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        LogMessageParams                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The log message parameters.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#logMessageParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct LogMessageParams {
    /// The message type. See {@link MessageType}
    #[serde(rename = "type")]
    pub type_: super::enumerations::MessageType,
    /// The actual message.
    #[serde(rename = "message")]
    pub message: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         LogTraceParams                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#logTraceParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct LogTraceParams {
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "verbose")]
    pub verbose: Option<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   MarkdownClientCapabilities                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client capabilities specific to the used markdown parser.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#markdownClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct MarkdownClientCapabilities {
    /// The name of the parser.
    #[serde(rename = "parser")]
    pub parser: String,
    /// The version of the parser.
    #[serde(rename = "version")]
    pub version: Option<String>,
    /// A list of HTML tags that the client allows / supports in
    /// Markdown.
    ///
    /// @since 3.17.0
    #[serde(rename = "allowedTags")]
    pub allowed_tags: Option<Vec<String>>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         MarkupContent                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A `MarkupContent` literal represents a string value which content is interpreted base on its
/// kind flag. Currently the protocol supports `plaintext` and `markdown` as markup kinds.
///
/// If the kind is `markdown` then the value can contain fenced code blocks like in GitHub issues.
/// See https://help.github.com/articles/creating-and-highlighting-code-blocks/#syntax-highlighting
///
/// Here is an example how such a string can be constructed using JavaScript / TypeScript:
/// ```ts
/// let markdown: MarkdownContent = {
///  kind: MarkupKind.Markdown,
///  value: [
///    '# Header',
///    'Some text',
///    '```typescript',
///    'someCode();',
///    '```'
///  ].join('\n')
/// };
/// ```
///
/// *Please Note* that clients might sanitize the return markdown. A client could decide to
/// remove HTML from the markdown to avoid script execution.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#markupContent (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct MarkupContent {
    /// The type of the Markup
    #[serde(rename = "kind")]
    pub kind: super::enumerations::MarkupKind,
    /// The content itself
    #[serde(rename = "value")]
    pub value: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       MessageActionItem                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#messageActionItem (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct MessageActionItem {
    /// A short title like 'Retry', 'Open Log' etc.
    #[serde(rename = "title")]
    pub title: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                            Moniker                                             //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Moniker definition to match LSIF 0.5 moniker definition.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#moniker (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct Moniker {
    /// The scheme of the moniker. For example tsc or .Net
    #[serde(rename = "scheme")]
    pub scheme: String,
    /// The identifier of the moniker. The value is opaque in LSIF however
    /// schema owners are allowed to define the structure if they want.
    #[serde(rename = "identifier")]
    pub identifier: String,
    /// The scope in which the moniker is unique
    #[serde(rename = "unique")]
    pub unique: super::enumerations::UniquenessLevel,
    /// The moniker kind if known.
    #[serde(rename = "kind")]
    pub kind: Option<super::enumerations::MonikerKind>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   MonikerClientCapabilities                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client capabilities specific to the moniker request.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#monikerClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct MonikerClientCapabilities {
    /// Whether moniker supports dynamic registration. If this is set to `true`
    /// the client supports the new `MonikerRegistrationOptions` return value
    /// for the corresponding server capability as well.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         MonikerOptions                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#monikerOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct MonikerOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         MonikerParams                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#monikerParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct MonikerParams {
    /// A parameter literal used in requests to pass a text document and a position inside that
    /// document.
    #[serde(flatten)]
    pub text_document_position_params: TextDocumentPositionParams,
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   MonikerRegistrationOptions                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#monikerRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct MonikerRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    #[serde(flatten)]
    pub moniker_options: MonikerOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          NotebookCell                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A notebook cell.
///
/// A cell's document URI must be unique across ALL notebook
/// cells and can therefore be used to uniquely identify a
/// notebook cell or the cell's text document.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#notebookCell (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookCell {
    /// The cell's kind
    #[serde(rename = "kind")]
    pub kind: super::enumerations::NotebookCellKind,
    /// The URI of the cell's text document
    /// content.
    #[serde(rename = "document")]
    pub document: DocumentUri,
    /// Additional metadata stored with the cell.
    ///
    /// Note: should always be an object literal (e.g. LSPObject)
    #[serde(rename = "metadata")]
    pub metadata: Option<super::type_aliases::LspObject>,
    /// Additional execution summary information
    /// if supported by the client.
    #[serde(rename = "executionSummary")]
    pub execution_summary: Option<super::structures::ExecutionSummary>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    NotebookCellArrayChange                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A change describing how to move a `NotebookCell`
/// array from state S to S'.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#notebookCellArrayChange (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookCellArrayChange {
    /// The start oftest of the cell that changed.
    #[serde(rename = "start")]
    pub start: UInteger,
    /// The deleted cells
    #[serde(rename = "deleteCount")]
    pub delete_count: UInteger,
    /// The new cells, if any
    #[serde(rename = "cells")]
    pub cells: Option<Vec<super::structures::NotebookCell>>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 NotebookCellTextDocumentFilter                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A notebook cell text document filter denotes a cell text
/// document by different properties.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#notebookCellTextDocumentFilter (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookCellTextDocumentFilter {
    /// A filter that matches against the notebook
    /// containing the notebook cell. If a string
    /// value is provided it matches against the
    /// notebook type. '*' matches every notebook.
    #[serde(rename = "notebook")]
    pub notebook: NotebookCellTextDocumentFilterNotebook,
    /// A language id like `python`.
    ///
    /// Will be matched against the language id of the
    /// notebook cell document. '*' matches every language.
    #[serde(rename = "language")]
    pub language: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum NotebookCellTextDocumentFilterNotebook {
    String(String),
    NotebookDocumentFilter(super::type_aliases::NotebookDocumentFilter),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        NotebookDocument                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A notebook document.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#notebookDocument (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookDocument {
    /// The notebook document's uri.
    #[serde(rename = "uri")]
    pub uri: Uri,
    /// The type of the notebook.
    #[serde(rename = "notebookType")]
    pub notebook_type: String,
    /// The version number of this document (it will increase after each
    /// change, including undo/redo).
    #[serde(rename = "version")]
    pub version: Integer,
    /// Additional metadata stored with the notebook
    /// document.
    ///
    /// Note: should always be an object literal (e.g. LSPObject)
    #[serde(rename = "metadata")]
    pub metadata: Option<super::type_aliases::LspObject>,
    /// The cells of a notebook.
    #[serde(rename = "cells")]
    pub cells: Vec<super::structures::NotebookCell>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  NotebookDocumentChangeEvent                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A change event for a notebook document.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#notebookDocumentChangeEvent (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookDocumentChangeEvent {
    /// The changed meta data if any.
    ///
    /// Note: should always be an object literal (e.g. LSPObject)
    #[serde(rename = "metadata")]
    pub metadata: Option<super::type_aliases::LspObject>,
    /// Changes to cells
    #[serde(rename = "cells")]
    pub cells: Option<NotebookDocumentChangeEventCells>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookDocumentChangeEventCells {
    /// Changes to the cell structure to add or
    /// remove cells.
    #[serde(rename = "structure")]
    pub structure: Option<NotebookDocumentChangeEventCellsStructure>,
    /// Changes to notebook cells properties like its
    /// kind, execution summary or metadata.
    #[serde(rename = "data")]
    pub data: Option<Vec<super::structures::NotebookCell>>,
    /// Changes to the text content of notebook cells.
    #[serde(rename = "textContent")]
    pub text_content: Option<Vec<NotebookDocumentChangeEventCellsTextContent>>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookDocumentChangeEventCellsStructure {
    /// The change to the cell array.
    #[serde(rename = "array")]
    pub array: super::structures::NotebookCellArrayChange,
    /// Additional opened cell text documents.
    #[serde(rename = "didOpen")]
    pub did_open: Option<Vec<super::structures::TextDocumentItem>>,
    /// Additional closed cell text documents.
    #[serde(rename = "didClose")]
    pub did_close: Option<Vec<super::structures::TextDocumentIdentifier>>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookDocumentChangeEventCellsTextContent {
    #[serde(rename = "document")]
    pub document: super::structures::VersionedTextDocumentIdentifier,
    #[serde(rename = "changes")]
    pub changes: Vec<super::type_aliases::TextDocumentContentChangeEvent>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                               NotebookDocumentClientCapabilities                               //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Capabilities specific to the notebook document support.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#notebookDocumentClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookDocumentClientCapabilities {
    /// Capabilities specific to notebook document synchronization
    ///
    /// @since 3.17.0
    #[serde(rename = "synchronization")]
    pub synchronization: super::structures::NotebookDocumentSyncClientCapabilities,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   NotebookDocumentIdentifier                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A literal to identify a notebook document in the client.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#notebookDocumentIdentifier (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookDocumentIdentifier {
    /// The notebook document's uri.
    #[serde(rename = "uri")]
    pub uri: Uri,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                             NotebookDocumentSyncClientCapabilities                             //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Notebook specific client capabilities.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#notebookDocumentSyncClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookDocumentSyncClientCapabilities {
    /// Whether implementation supports dynamic registration. If this is
    /// set to `true` the client supports the new
    /// `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`
    /// return value for the corresponding server capability as well.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// The client supports sending execution summary data per cell.
    #[serde(rename = "executionSummarySupport")]
    pub execution_summary_support: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  NotebookDocumentSyncOptions                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Options specific to a notebook plus its cells
/// to be synced to the server.
///
/// If a selector provides a notebook document
/// filter but no cell selector all cells of a
/// matching notebook document will be synced.
///
/// If a selector provides no notebook document
/// filter but only a cell selector all notebook
/// document that contain at least one matching
/// cell will be synced.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#notebookDocumentSyncOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookDocumentSyncOptions {
    /// The notebooks to be synced
    #[serde(rename = "notebookSelector")]
    pub notebook_selector: Vec<NotebookDocumentSyncOptionsNotebookSelector>,
    /// Whether save notification should be forwarded to
    /// the server. Will only be honored if mode === `notebook`.
    #[serde(rename = "save")]
    pub save: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum NotebookDocumentSyncOptionsNotebookSelector {
    NotebookAndOptionalCells(NotebookDocumentSyncOptionsNotebookSelectorNotebookAndOptionalCells),
    OptionalNotebookAndCells(NotebookDocumentSyncOptionsNotebookSelectorOptionalNotebookAndCells),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookDocumentSyncOptionsNotebookSelectorNotebookAndOptionalCells {
    /// The notebook to be synced If a string
    /// value is provided it matches against the
    /// notebook type. '*' matches every notebook.
    #[serde(rename = "notebook")]
    pub notebook: NotebookDocumentSyncOptionsNotebookSelectorNotebookAndOptionalCellsNotebook,
    /// The cells of the matching notebook to be synced.
    #[serde(rename = "cells")]
    pub cells:
        Option<Vec<NotebookDocumentSyncOptionsNotebookSelectorNotebookAndOptionalCellsCells>>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum NotebookDocumentSyncOptionsNotebookSelectorNotebookAndOptionalCellsNotebook {
    String(String),
    NotebookDocumentFilter(super::type_aliases::NotebookDocumentFilter),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookDocumentSyncOptionsNotebookSelectorNotebookAndOptionalCellsCells {
    #[serde(rename = "language")]
    pub language: String,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookDocumentSyncOptionsNotebookSelectorOptionalNotebookAndCells {
    /// The notebook to be synced If a string
    /// value is provided it matches against the
    /// notebook type. '*' matches every notebook.
    #[serde(rename = "notebook")]
    pub notebook:
        Option<NotebookDocumentSyncOptionsNotebookSelectorOptionalNotebookAndCellsNotebook>,
    /// The cells of the matching notebook to be synced.
    #[serde(rename = "cells")]
    pub cells: Vec<NotebookDocumentSyncOptionsNotebookSelectorOptionalNotebookAndCellsCells>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum NotebookDocumentSyncOptionsNotebookSelectorOptionalNotebookAndCellsNotebook {
    String(String),
    NotebookDocumentFilter(super::type_aliases::NotebookDocumentFilter),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookDocumentSyncOptionsNotebookSelectorOptionalNotebookAndCellsCells {
    #[serde(rename = "language")]
    pub language: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                            NotebookDocumentSyncRegistrationOptions                             //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Registration options specific to a notebook.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#notebookDocumentSyncRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct NotebookDocumentSyncRegistrationOptions {
    /// Options specific to a notebook plus its cells
    /// to be synced to the server.
    ///
    /// If a selector provides a notebook document
    /// filter but no cell selector all cells of a
    /// matching notebook document will be synced.
    ///
    /// If a selector provides no notebook document
    /// filter but only a cell selector all notebook
    /// document that contain at least one matching
    /// cell will be synced.
    ///
    /// @since 3.17.0
    #[serde(flatten)]
    pub notebook_document_sync_options: NotebookDocumentSyncOptions,
    /// Static registration options to be returned in the initialize
    /// request.
    #[serde(flatten)]
    pub static_registration_options: StaticRegistrationOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                            OptionalVersionedTextDocumentIdentifier                             //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A text document identifier to optionally denote a specific version of a text document.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#optionalVersionedTextDocumentIdentifier (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct OptionalVersionedTextDocumentIdentifier {
    /// A literal to identify a text document in the client.
    #[serde(flatten)]
    pub text_document_identifier: TextDocumentIdentifier,
    /// The version number of this document. If a versioned text document identifier
    /// is sent from the server to the client and the file is not open in the editor
    /// (the server has not received an open notification before) the server can send
    /// `null` to indicate that the version is unknown and the content on disk is the
    /// truth (as specified with document content ownership).
    #[serde(rename = "version")]
    pub version: OptionalVersionedTextDocumentIdentifierVersion,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum OptionalVersionedTextDocumentIdentifierVersion {
    Integer(Integer),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      ParameterInformation                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents a parameter of a callable-signature. A parameter can
/// have a label and a doc-comment.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#parameterInformation (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ParameterInformation {
    /// The label of this parameter information.
    ///
    /// Either a string or an inclusive start and exclusive end offsets within its containing
    /// signature label. (see SignatureInformation.label). The offsets are based on a UTF-16
    /// string representation as `Position` and `Range` does.
    ///
    /// *Note*: a label of type string should be a substring of its containing signature label.
    /// Its intended use case is to highlight the parameter label part in the `SignatureInformation.label`.
    #[serde(rename = "label")]
    pub label: ParameterInformationLabel,
    /// The human-readable doc-comment of this parameter. Will be shown
    /// in the UI but can be omitted.
    #[serde(rename = "documentation")]
    pub documentation: Option<ParameterInformationDocumentation>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ParameterInformationLabel {
    String(String),
    UIntegerAndUInteger((UInteger, UInteger)),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ParameterInformationDocumentation {
    String(String),
    MarkupContent(super::structures::MarkupContent),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      PartialResultParams                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#partialResultParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct PartialResultParams {
    /// An optional token that a server can use to report partial results (e.g. streaming) to
    /// the client.
    #[serde(rename = "partialResultToken")]
    pub partial_result_token: Option<super::type_aliases::ProgressToken>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                            Position                                            //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Position in a text document expressed as zero-based line and character
/// offset. Prior to 3.17 the offsets were always based on a UTF-16 string
/// representation. So a string of the form `a𐐀b` the character offset of the
/// character `a` is 0, the character offset of `𐐀` is 1 and the character
/// offset of b is 3 since `𐐀` is represented using two code units in UTF-16.
/// Since 3.17 clients and servers can agree on a different string encoding
/// representation (e.g. UTF-8). The client announces it's supported encoding
/// via the client capability [`general.positionEncodings`](https://microsoft.github.io/language-server-protocol/specifications/specification-current/#clientCapabilities).
/// The value is an array of position encodings the client supports, with
/// decreasing preference (e.g. the encoding at index `0` is the most preferred
/// one). To stay backwards compatible the only mandatory encoding is UTF-16
/// represented via the string `utf-16`. The server can pick one of the
/// encodings offered by the client and signals that encoding back to the
/// client via the initialize result's property
/// [`capabilities.positionEncoding`](https://microsoft.github.io/language-server-protocol/specifications/specification-current/#serverCapabilities). If the string value
/// `utf-16` is missing from the client's capability `general.positionEncodings`
/// servers can safely assume that the client supports UTF-16. If the server
/// omits the position encoding in its initialize result the encoding defaults
/// to the string value `utf-16`. Implementation considerations: since the
/// conversion from one encoding into another requires the content of the
/// file / line the conversion is best done where the file is read which is
/// usually on the server side.
///
/// Positions are line end character agnostic. So you can not specify a position
/// that denotes `\r|\n` or `\n|` where `|` represents the character offset.
///
/// @since 3.17.0 - support for negotiated position encoding.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#position (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct Position {
    /// Line position in a document (zero-based).
    ///
    /// If a line number is greater than the number of lines in a document, it defaults back to the number of lines in the document.
    /// If a line number is negative, it defaults to 0.
    #[serde(rename = "line")]
    pub line: UInteger,
    /// Character offset on a line in a document (zero-based).
    ///
    /// The meaning of this offset is determined by the negotiated
    /// `PositionEncodingKind`.
    ///
    /// If the character value is greater than the line length it defaults back to the
    /// line length.
    #[serde(rename = "character")]
    pub character: UInteger,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      PrepareRenameParams                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#prepareRenameParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct PrepareRenameParams {
    /// A parameter literal used in requests to pass a text document and a position inside that
    /// document.
    #[serde(flatten)]
    pub text_document_position_params: TextDocumentPositionParams,
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        PreviousResultId                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A previous result id in a workspace pull request.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#previousResultId (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct PreviousResultId {
    /// The URI for which the client knowns a
    /// result id.
    #[serde(rename = "uri")]
    pub uri: DocumentUri,
    /// The value of the previous result id.
    #[serde(rename = "value")]
    pub value: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         ProgressParams                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#progressParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ProgressParams {
    /// The progress token provided by the client or server.
    #[serde(rename = "token")]
    pub token: super::type_aliases::ProgressToken,
    /// The progress data.
    #[serde(rename = "value")]
    pub value: super::type_aliases::LspAny,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                              PublishDiagnosticsClientCapabilities                              //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The publish diagnostic client capabilities.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#publishDiagnosticsClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct PublishDiagnosticsClientCapabilities {
    /// Whether the clients accepts diagnostics with related information.
    #[serde(rename = "relatedInformation")]
    pub related_information: Option<bool>,
    /// Client supports the tag property to provide meta data about a diagnostic.
    /// Clients supporting tags have to handle unknown tags gracefully.
    ///
    /// @since 3.15.0
    #[serde(rename = "tagSupport")]
    pub tag_support: Option<PublishDiagnosticsClientCapabilitiesTagSupport>,
    /// Whether the client interprets the version property of the
    /// `textDocument/publishDiagnostics` notification's parameter.
    ///
    /// @since 3.15.0
    #[serde(rename = "versionSupport")]
    pub version_support: Option<bool>,
    /// Client supports a codeDescription property
    ///
    /// @since 3.16.0
    #[serde(rename = "codeDescriptionSupport")]
    pub code_description_support: Option<bool>,
    /// Whether code action supports the `data` property which is
    /// preserved between a `textDocument/publishDiagnostics` and
    /// `textDocument/codeAction` request.
    ///
    /// @since 3.16.0
    #[serde(rename = "dataSupport")]
    pub data_support: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct PublishDiagnosticsClientCapabilitiesTagSupport {
    /// The tags supported by the client.
    #[serde(rename = "valueSet")]
    pub value_set: Vec<super::enumerations::DiagnosticTag>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    PublishDiagnosticsParams                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The publish diagnostic notification's parameters.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#publishDiagnosticsParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct PublishDiagnosticsParams {
    /// The URI for which diagnostic information is reported.
    #[serde(rename = "uri")]
    pub uri: DocumentUri,
    /// Optional the version number of the document the diagnostics are published for.
    ///
    /// @since 3.15.0
    #[serde(rename = "version")]
    pub version: Option<Integer>,
    /// An array of diagnostic information items.
    #[serde(rename = "diagnostics")]
    pub diagnostics: Vec<super::structures::Diagnostic>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                             Range                                              //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A range in a text document expressed as (zero-based) start and end positions.
///
/// If you want to specify a range that contains a line including the line ending
/// character(s) then use an end position denoting the start of the next line.
/// For example:
/// ```ts
/// {
///     start: { line: 5, character: 23 }
///     end : { line 6, character : 0 }
/// }
/// ```
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#range (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct Range {
    /// The range's start position.
    #[serde(rename = "start")]
    pub start: super::structures::Position,
    /// The range's end position.
    #[serde(rename = "end")]
    pub end: super::structures::Position,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  ReferenceClientCapabilities                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client Capabilities for a {@link ReferencesRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#referenceClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ReferenceClientCapabilities {
    /// Whether references supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        ReferenceContext                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Value-object that contains additional information when
/// requesting references.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#referenceContext (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ReferenceContext {
    /// Include the declaration of the current symbol.
    #[serde(rename = "includeDeclaration")]
    pub include_declaration: bool,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        ReferenceOptions                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Reference options.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#referenceOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ReferenceOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        ReferenceParams                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Parameters for a {@link ReferencesRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#referenceParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ReferenceParams {
    /// A parameter literal used in requests to pass a text document and a position inside that
    /// document.
    #[serde(flatten)]
    pub text_document_position_params: TextDocumentPositionParams,
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    #[serde(rename = "context")]
    pub context: super::structures::ReferenceContext,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  ReferenceRegistrationOptions                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Registration options for a {@link ReferencesRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#referenceRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ReferenceRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Reference options.
    #[serde(flatten)]
    pub reference_options: ReferenceOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          Registration                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] General parameters to register for a notification or to register a provider.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#registration (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct Registration {
    /// The id used to register the request. The id can be used to deregister
    /// the request again.
    #[serde(rename = "id")]
    pub id: String,
    /// The method / capability to register for.
    #[serde(rename = "method")]
    pub method: String,
    /// Options necessary for the registration.
    #[serde(rename = "registerOptions")]
    pub register_options: Option<super::type_aliases::LspAny>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       RegistrationParams                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#registrationParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct RegistrationParams {
    #[serde(rename = "registrations")]
    pub registrations: Vec<super::structures::Registration>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                              RegularExpressionsClientCapabilities                              //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client capabilities specific to regular expressions.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#regularExpressionsClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct RegularExpressionsClientCapabilities {
    /// The engine's name.
    #[serde(rename = "engine")]
    pub engine: String,
    /// The engine's version.
    #[serde(rename = "version")]
    pub version: Option<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                              RelatedFullDocumentDiagnosticReport                               //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A full diagnostic report with a set of related documents.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#relatedFullDocumentDiagnosticReport (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct RelatedFullDocumentDiagnosticReport {
    /// A diagnostic report with a full set of problems.
    ///
    /// @since 3.17.0
    #[serde(flatten)]
    pub full_document_diagnostic_report: FullDocumentDiagnosticReport,
    /// Diagnostics of related documents. This information is useful
    /// in programming languages where code in a file A can generate
    /// diagnostics in a file B which A depends on. An example of
    /// such a language is C/C++ where marco definitions in a file
    /// a.cpp and result in errors in a header file b.hpp.
    ///
    /// @since 3.17.0
    #[serde(rename = "relatedDocuments")]
    pub related_documents:
        Option<HashMap<DocumentUri, RelatedFullDocumentDiagnosticReportRelatedDocuments>>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum RelatedFullDocumentDiagnosticReportRelatedDocuments {
    FullDocumentDiagnosticReport(super::structures::FullDocumentDiagnosticReport),
    UnchangedDocumentDiagnosticReport(super::structures::UnchangedDocumentDiagnosticReport),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                            RelatedUnchangedDocumentDiagnosticReport                            //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] An unchanged diagnostic report with a set of related documents.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#relatedUnchangedDocumentDiagnosticReport (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct RelatedUnchangedDocumentDiagnosticReport {
    /// A diagnostic report indicating that the last returned
    /// report is still accurate.
    ///
    /// @since 3.17.0
    #[serde(flatten)]
    pub unchanged_document_diagnostic_report: UnchangedDocumentDiagnosticReport,
    /// Diagnostics of related documents. This information is useful
    /// in programming languages where code in a file A can generate
    /// diagnostics in a file B which A depends on. An example of
    /// such a language is C/C++ where marco definitions in a file
    /// a.cpp and result in errors in a header file b.hpp.
    ///
    /// @since 3.17.0
    #[serde(rename = "relatedDocuments")]
    pub related_documents:
        Option<HashMap<DocumentUri, RelatedUnchangedDocumentDiagnosticReportRelatedDocuments>>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum RelatedUnchangedDocumentDiagnosticReportRelatedDocuments {
    FullDocumentDiagnosticReport(super::structures::FullDocumentDiagnosticReport),
    UnchangedDocumentDiagnosticReport(super::structures::UnchangedDocumentDiagnosticReport),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        RelativePattern                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A relative pattern is a helper to construct glob patterns that are matched
/// relatively to a base URI. The common value for a `baseUri` is a workspace
/// folder root, but it can be another absolute URI as well.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#relativePattern (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct RelativePattern {
    /// A workspace folder or a base URI to which this pattern will be matched
    /// against relatively.
    #[serde(rename = "baseUri")]
    pub base_uri: RelativePatternBaseUri,
    /// The actual glob pattern;
    #[serde(rename = "pattern")]
    pub pattern: super::type_aliases::Pattern,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum RelativePatternBaseUri {
    WorkspaceFolder(super::structures::WorkspaceFolder),
    Uri(Uri),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    RenameClientCapabilities                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#renameClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct RenameClientCapabilities {
    /// Whether rename supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// Client supports testing for validity of rename operations
    /// before execution.
    ///
    /// @since 3.12.0
    #[serde(rename = "prepareSupport")]
    pub prepare_support: Option<bool>,
    /// Client supports the default behavior result.
    ///
    /// The value indicates the default behavior used by the
    /// client.
    ///
    /// @since 3.16.0
    #[serde(rename = "prepareSupportDefaultBehavior")]
    pub prepare_support_default_behavior:
        Option<super::enumerations::PrepareSupportDefaultBehavior>,
    /// Whether the client honors the change annotations in
    /// text edits and resource operations returned via the
    /// rename request's workspace edit by for example presenting
    /// the workspace edit in the user interface and asking
    /// for confirmation.
    ///
    /// @since 3.16.0
    #[serde(rename = "honorsChangeAnnotations")]
    pub honors_change_annotations: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           RenameFile                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Rename file operation
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#renameFile (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct RenameFile {
    /// A generic resource operation.
    #[serde(flatten)]
    pub resource_operation: ResourceOperation,
    /// A rename
    #[serde(rename = "kind")]
    pub kind: RenameFileKind,
    /// The old (existing) location.
    #[serde(rename = "oldUri")]
    pub old_uri: DocumentUri,
    /// The new location.
    #[serde(rename = "newUri")]
    pub new_uri: DocumentUri,
    /// Rename options.
    #[serde(rename = "options")]
    pub options: Option<super::structures::RenameFileOptions>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum RenameFileKind {
    #[serde(rename = "rename")]
    Rename,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       RenameFileOptions                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Rename file options
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#renameFileOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct RenameFileOptions {
    /// Overwrite target if existing. Overwrite wins over `ignoreIfExists`
    #[serde(rename = "overwrite")]
    pub overwrite: Option<bool>,
    /// Ignores if target exists.
    #[serde(rename = "ignoreIfExists")]
    pub ignore_if_exists: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       RenameFilesParams                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters sent in notifications/requests for user-initiated renames of
/// files.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#renameFilesParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct RenameFilesParams {
    /// An array of all files/folders renamed in this operation. When a folder is renamed, only
    /// the folder will be included, and not its children.
    #[serde(rename = "files")]
    pub files: Vec<super::structures::FileRename>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         RenameOptions                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Provider options for a {@link RenameRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#renameOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct RenameOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
    /// Renames should be checked and tested before being executed.
    ///
    /// @since version 3.12.0
    #[serde(rename = "prepareProvider")]
    pub prepare_provider: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          RenameParams                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters of a {@link RenameRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#renameParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct RenameParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    /// The document to rename.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
    /// The position at which this request was sent.
    #[serde(rename = "position")]
    pub position: super::structures::Position,
    /// The new name of the symbol. If the given name is not valid the
    /// request must return a {@link ResponseError} with an
    /// appropriate message set.
    #[serde(rename = "newName")]
    pub new_name: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   RenameRegistrationOptions                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Registration options for a {@link RenameRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#renameRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct RenameRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Provider options for a {@link RenameRequest}.
    #[serde(flatten)]
    pub rename_options: RenameOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       ResourceOperation                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A generic resource operation.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#resourceOperation (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ResourceOperation {
    /// The resource operation kind.
    #[serde(rename = "kind")]
    pub kind: String,
    /// An optional annotation identifier describing the operation.
    ///
    /// @since 3.16.0
    #[serde(rename = "annotationId")]
    pub annotation_id: Option<super::type_aliases::ChangeAnnotationIdentifier>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          SaveOptions                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Save options.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#saveOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SaveOptions {
    /// The client is supposed to include the content on save.
    #[serde(rename = "includeText")]
    pub include_text: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         SelectionRange                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A selection range represents a part of a selection hierarchy. A selection range
/// may have a parent selection range that contains it.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#selectionRange (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SelectionRange {
    /// The {@link Range range} of this selection range.
    #[serde(rename = "range")]
    pub range: super::structures::Range,
    /// The parent selection range containing this range. Therefore `parent.range` must contain `this.range`.
    #[serde(rename = "parent")]
    pub parent: Option<Box<super::structures::SelectionRange>>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                SelectionRangeClientCapabilities                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#selectionRangeClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SelectionRangeClientCapabilities {
    /// Whether implementation supports dynamic registration for selection range providers. If this is set to `true`
    /// the client supports the new `SelectionRangeRegistrationOptions` return value for the corresponding server
    /// capability as well.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     SelectionRangeOptions                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#selectionRangeOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SelectionRangeOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      SelectionRangeParams                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A parameter literal used in selection range requests.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#selectionRangeParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SelectionRangeParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    /// The text document.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
    /// The positions inside the text document.
    #[serde(rename = "positions")]
    pub positions: Vec<super::structures::Position>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                               SelectionRangeRegistrationOptions                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#selectionRangeRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SelectionRangeRegistrationOptions {
    #[serde(flatten)]
    pub selection_range_options: SelectionRangeOptions,
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Static registration options to be returned in the initialize
    /// request.
    #[serde(flatten)]
    pub static_registration_options: StaticRegistrationOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         SemanticTokens                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#semanticTokens (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokens {
    /// An optional result id. If provided and clients support delta updating
    /// the client will include the result id in the next semantic token request.
    /// A server can then instead of computing all semantic tokens again simply
    /// send a delta.
    #[serde(rename = "resultId")]
    pub result_id: Option<String>,
    /// The actual tokens.
    #[serde(rename = "data")]
    pub data: Vec<UInteger>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                SemanticTokensClientCapabilities                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#semanticTokensClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokensClientCapabilities {
    /// Whether implementation supports dynamic registration. If this is set to `true`
    /// the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`
    /// return value for the corresponding server capability as well.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// Which requests the client supports and might send to the server
    /// depending on the server's capability. Please note that clients might not
    /// show semantic tokens or degrade some of the user experience if a range
    /// or full request is advertised by the client but not provided by the
    /// server. If for example the client capability `requests.full` and
    /// `request.range` are both set to true but the server only provides a
    /// range provider the client might not render a minimap correctly or might
    /// even decide to not show any semantic tokens at all.
    #[serde(rename = "requests")]
    pub requests: SemanticTokensClientCapabilitiesRequests,
    /// The token types that the client supports.
    #[serde(rename = "tokenTypes")]
    pub token_types: Vec<String>,
    /// The token modifiers that the client supports.
    #[serde(rename = "tokenModifiers")]
    pub token_modifiers: Vec<String>,
    /// The token formats the clients supports.
    #[serde(rename = "formats")]
    pub formats: Vec<super::enumerations::TokenFormat>,
    /// Whether the client supports tokens that can overlap each other.
    #[serde(rename = "overlappingTokenSupport")]
    pub overlapping_token_support: Option<bool>,
    /// Whether the client supports tokens that can span multiple lines.
    #[serde(rename = "multilineTokenSupport")]
    pub multiline_token_support: Option<bool>,
    /// Whether the client allows the server to actively cancel a
    /// semantic token request, e.g. supports returning
    /// LSPErrorCodes.ServerCancelled. If a server does the client
    /// needs to retrigger the request.
    ///
    /// @since 3.17.0
    #[serde(rename = "serverCancelSupport")]
    pub server_cancel_support: Option<bool>,
    /// Whether the client uses semantic tokens to augment existing
    /// syntax tokens. If set to `true` client side created syntax
    /// tokens and semantic tokens are both used for colorization. If
    /// set to `false` the client only uses the returned semantic tokens
    /// for colorization.
    ///
    /// If the value is `undefined` then the client behavior is not
    /// specified.
    ///
    /// @since 3.17.0
    #[serde(rename = "augmentsSyntaxTokens")]
    pub augments_syntax_tokens: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokensClientCapabilitiesRequests {
    /// The client will send the `textDocument/semanticTokens/range` request if
    /// the server provides a corresponding handler.
    #[serde(rename = "range")]
    pub range: Option<SemanticTokensClientCapabilitiesRequestsRange>,
    /// The client will send the `textDocument/semanticTokens/full` request if
    /// the server provides a corresponding handler.
    #[serde(rename = "full")]
    pub full: Option<SemanticTokensClientCapabilitiesRequestsFull>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum SemanticTokensClientCapabilitiesRequestsRange {
    Bool(bool),
    Empty(SemanticTokensClientCapabilitiesRequestsRangeEmpty),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokensClientCapabilitiesRequestsRangeEmpty {}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum SemanticTokensClientCapabilitiesRequestsFull {
    Bool(bool),
    OptionalDelta(SemanticTokensClientCapabilitiesRequestsFullOptionalDelta),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokensClientCapabilitiesRequestsFullOptionalDelta {
    /// The client will send the `textDocument/semanticTokens/full/delta` request if
    /// the server provides a corresponding handler.
    #[serde(rename = "delta")]
    pub delta: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      SemanticTokensDelta                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#semanticTokensDelta (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokensDelta {
    #[serde(rename = "resultId")]
    pub result_id: Option<String>,
    /// The semantic token edits to transform a previous result into a new result.
    #[serde(rename = "edits")]
    pub edits: Vec<super::structures::SemanticTokensEdit>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   SemanticTokensDeltaParams                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#semanticTokensDeltaParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokensDeltaParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    /// The text document.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
    /// The result id of a previous response. The result Id can either point to a full response
    /// or a delta response depending on what was received last.
    #[serde(rename = "previousResultId")]
    pub previous_result_id: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                SemanticTokensDeltaPartialResult                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#semanticTokensDeltaPartialResult (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokensDeltaPartialResult {
    #[serde(rename = "edits")]
    pub edits: Vec<super::structures::SemanticTokensEdit>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       SemanticTokensEdit                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#semanticTokensEdit (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokensEdit {
    /// The start offset of the edit.
    #[serde(rename = "start")]
    pub start: UInteger,
    /// The count of elements to remove.
    #[serde(rename = "deleteCount")]
    pub delete_count: UInteger,
    /// The elements to insert.
    #[serde(rename = "data")]
    pub data: Option<Vec<UInteger>>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      SemanticTokensLegend                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#semanticTokensLegend (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokensLegend {
    /// The token types a server uses.
    #[serde(rename = "tokenTypes")]
    pub token_types: Vec<String>,
    /// The token modifiers a server uses.
    #[serde(rename = "tokenModifiers")]
    pub token_modifiers: Vec<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     SemanticTokensOptions                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#semanticTokensOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokensOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
    /// The legend used by the server
    #[serde(rename = "legend")]
    pub legend: super::structures::SemanticTokensLegend,
    /// Server supports providing semantic tokens for a specific range
    /// of a document.
    #[serde(rename = "range")]
    pub range: Option<SemanticTokensOptionsRange>,
    /// Server supports providing semantic tokens for a full document.
    #[serde(rename = "full")]
    pub full: Option<SemanticTokensOptionsFull>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum SemanticTokensOptionsRange {
    Bool(bool),
    Empty(SemanticTokensOptionsRangeEmpty),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokensOptionsRangeEmpty {}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum SemanticTokensOptionsFull {
    Bool(bool),
    OptionalDelta(SemanticTokensOptionsFullOptionalDelta),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokensOptionsFullOptionalDelta {
    /// The server supports deltas for full documents.
    #[serde(rename = "delta")]
    pub delta: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      SemanticTokensParams                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#semanticTokensParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokensParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    /// The text document.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  SemanticTokensPartialResult                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#semanticTokensPartialResult (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokensPartialResult {
    #[serde(rename = "data")]
    pub data: Vec<UInteger>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   SemanticTokensRangeParams                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#semanticTokensRangeParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokensRangeParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    /// The text document.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
    /// The range the semantic tokens are requested for.
    #[serde(rename = "range")]
    pub range: super::structures::Range,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                               SemanticTokensRegistrationOptions                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#semanticTokensRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokensRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// @since 3.16.0
    #[serde(flatten)]
    pub semantic_tokens_options: SemanticTokensOptions,
    /// Static registration options to be returned in the initialize
    /// request.
    #[serde(flatten)]
    pub static_registration_options: StaticRegistrationOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                           SemanticTokensWorkspaceClientCapabilities                            //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#semanticTokensWorkspaceClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SemanticTokensWorkspaceClientCapabilities {
    /// Whether the client implementation supports a refresh request sent from
    /// the server to the client.
    ///
    /// Note that this event is global and will force the client to refresh all
    /// semantic tokens currently shown. It should be used with absolute care
    /// and is useful for situation where a server for example detects a project
    /// wide change that requires such a calculation.
    #[serde(rename = "refreshSupport")]
    pub refresh_support: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       ServerCapabilities                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Defines the capabilities provided by a language
/// server.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#serverCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ServerCapabilities {
    /// The position encoding the server picked from the encodings offered
    /// by the client via the client capability `general.positionEncodings`.
    ///
    /// If the client didn't provide any position encodings the only valid
    /// value that a server can return is 'utf-16'.
    ///
    /// If omitted it defaults to 'utf-16'.
    ///
    /// @since 3.17.0
    #[serde(rename = "positionEncoding")]
    pub position_encoding: Option<super::enumerations::PositionEncodingKind>,
    /// Defines how text documents are synced. Is either a detailed structure
    /// defining each notification or for backwards compatibility the
    /// TextDocumentSyncKind number.
    #[serde(rename = "textDocumentSync")]
    pub text_document_sync: Option<ServerCapabilitiesTextDocumentSync>,
    /// Defines how notebook documents are synced.
    ///
    /// @since 3.17.0
    #[serde(rename = "notebookDocumentSync")]
    pub notebook_document_sync: Option<ServerCapabilitiesNotebookDocumentSync>,
    /// The server provides completion support.
    #[serde(rename = "completionProvider")]
    pub completion_provider: Option<super::structures::CompletionOptions>,
    /// The server provides hover support.
    #[serde(rename = "hoverProvider")]
    pub hover_provider: Option<ServerCapabilitiesHoverProvider>,
    /// The server provides signature help support.
    #[serde(rename = "signatureHelpProvider")]
    pub signature_help_provider: Option<super::structures::SignatureHelpOptions>,
    /// The server provides Goto Declaration support.
    #[serde(rename = "declarationProvider")]
    pub declaration_provider: Option<ServerCapabilitiesDeclarationProvider>,
    /// The server provides goto definition support.
    #[serde(rename = "definitionProvider")]
    pub definition_provider: Option<ServerCapabilitiesDefinitionProvider>,
    /// The server provides Goto Type Definition support.
    #[serde(rename = "typeDefinitionProvider")]
    pub type_definition_provider: Option<ServerCapabilitiesTypeDefinitionProvider>,
    /// The server provides Goto Implementation support.
    #[serde(rename = "implementationProvider")]
    pub implementation_provider: Option<ServerCapabilitiesImplementationProvider>,
    /// The server provides find references support.
    #[serde(rename = "referencesProvider")]
    pub references_provider: Option<ServerCapabilitiesReferencesProvider>,
    /// The server provides document highlight support.
    #[serde(rename = "documentHighlightProvider")]
    pub document_highlight_provider: Option<ServerCapabilitiesDocumentHighlightProvider>,
    /// The server provides document symbol support.
    #[serde(rename = "documentSymbolProvider")]
    pub document_symbol_provider: Option<ServerCapabilitiesDocumentSymbolProvider>,
    /// The server provides code actions. CodeActionOptions may only be
    /// specified if the client states that it supports
    /// `codeActionLiteralSupport` in its initial `initialize` request.
    #[serde(rename = "codeActionProvider")]
    pub code_action_provider: Option<ServerCapabilitiesCodeActionProvider>,
    /// The server provides code lens.
    #[serde(rename = "codeLensProvider")]
    pub code_lens_provider: Option<super::structures::CodeLensOptions>,
    /// The server provides document link support.
    #[serde(rename = "documentLinkProvider")]
    pub document_link_provider: Option<super::structures::DocumentLinkOptions>,
    /// The server provides color provider support.
    #[serde(rename = "colorProvider")]
    pub color_provider: Option<ServerCapabilitiesColorProvider>,
    /// The server provides workspace symbol support.
    #[serde(rename = "workspaceSymbolProvider")]
    pub workspace_symbol_provider: Option<ServerCapabilitiesWorkspaceSymbolProvider>,
    /// The server provides document formatting.
    #[serde(rename = "documentFormattingProvider")]
    pub document_formatting_provider: Option<ServerCapabilitiesDocumentFormattingProvider>,
    /// The server provides document range formatting.
    #[serde(rename = "documentRangeFormattingProvider")]
    pub document_range_formatting_provider:
        Option<ServerCapabilitiesDocumentRangeFormattingProvider>,
    /// The server provides document formatting on typing.
    #[serde(rename = "documentOnTypeFormattingProvider")]
    pub document_on_type_formatting_provider:
        Option<super::structures::DocumentOnTypeFormattingOptions>,
    /// The server provides rename support. RenameOptions may only be
    /// specified if the client states that it supports
    /// `prepareSupport` in its initial `initialize` request.
    #[serde(rename = "renameProvider")]
    pub rename_provider: Option<ServerCapabilitiesRenameProvider>,
    /// The server provides folding provider support.
    #[serde(rename = "foldingRangeProvider")]
    pub folding_range_provider: Option<ServerCapabilitiesFoldingRangeProvider>,
    /// The server provides selection range support.
    #[serde(rename = "selectionRangeProvider")]
    pub selection_range_provider: Option<ServerCapabilitiesSelectionRangeProvider>,
    /// The server provides execute command support.
    #[serde(rename = "executeCommandProvider")]
    pub execute_command_provider: Option<super::structures::ExecuteCommandOptions>,
    /// The server provides call hierarchy support.
    ///
    /// @since 3.16.0
    #[serde(rename = "callHierarchyProvider")]
    pub call_hierarchy_provider: Option<ServerCapabilitiesCallHierarchyProvider>,
    /// The server provides linked editing range support.
    ///
    /// @since 3.16.0
    #[serde(rename = "linkedEditingRangeProvider")]
    pub linked_editing_range_provider: Option<ServerCapabilitiesLinkedEditingRangeProvider>,
    /// The server provides semantic tokens support.
    ///
    /// @since 3.16.0
    #[serde(rename = "semanticTokensProvider")]
    pub semantic_tokens_provider: Option<ServerCapabilitiesSemanticTokensProvider>,
    /// The server provides moniker support.
    ///
    /// @since 3.16.0
    #[serde(rename = "monikerProvider")]
    pub moniker_provider: Option<ServerCapabilitiesMonikerProvider>,
    /// The server provides type hierarchy support.
    ///
    /// @since 3.17.0
    #[serde(rename = "typeHierarchyProvider")]
    pub type_hierarchy_provider: Option<ServerCapabilitiesTypeHierarchyProvider>,
    /// The server provides inline values.
    ///
    /// @since 3.17.0
    #[serde(rename = "inlineValueProvider")]
    pub inline_value_provider: Option<ServerCapabilitiesInlineValueProvider>,
    /// The server provides inlay hints.
    ///
    /// @since 3.17.0
    #[serde(rename = "inlayHintProvider")]
    pub inlay_hint_provider: Option<ServerCapabilitiesInlayHintProvider>,
    /// The server has support for pull model diagnostics.
    ///
    /// @since 3.17.0
    #[serde(rename = "diagnosticProvider")]
    pub diagnostic_provider: Option<ServerCapabilitiesDiagnosticProvider>,
    /// Workspace specific server capabilities.
    #[serde(rename = "workspace")]
    pub workspace: Option<ServerCapabilitiesWorkspace>,
    /// Experimental server capabilities.
    #[serde(rename = "experimental")]
    pub experimental: Option<super::type_aliases::LspAny>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesTextDocumentSync {
    TextDocumentSyncOptions(super::structures::TextDocumentSyncOptions),
    TextDocumentSyncKind(super::enumerations::TextDocumentSyncKind),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesNotebookDocumentSync {
    NotebookDocumentSyncOptions(super::structures::NotebookDocumentSyncOptions),
    NotebookDocumentSyncRegistrationOptions(
        super::structures::NotebookDocumentSyncRegistrationOptions,
    ),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesHoverProvider {
    Bool(bool),
    HoverOptions(super::structures::HoverOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesDeclarationProvider {
    Bool(bool),
    DeclarationOptions(super::structures::DeclarationOptions),
    DeclarationRegistrationOptions(super::structures::DeclarationRegistrationOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesDefinitionProvider {
    Bool(bool),
    DefinitionOptions(super::structures::DefinitionOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesTypeDefinitionProvider {
    Bool(bool),
    TypeDefinitionOptions(super::structures::TypeDefinitionOptions),
    TypeDefinitionRegistrationOptions(super::structures::TypeDefinitionRegistrationOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesImplementationProvider {
    Bool(bool),
    ImplementationOptions(super::structures::ImplementationOptions),
    ImplementationRegistrationOptions(super::structures::ImplementationRegistrationOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesReferencesProvider {
    Bool(bool),
    ReferenceOptions(super::structures::ReferenceOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesDocumentHighlightProvider {
    Bool(bool),
    DocumentHighlightOptions(super::structures::DocumentHighlightOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesDocumentSymbolProvider {
    Bool(bool),
    DocumentSymbolOptions(super::structures::DocumentSymbolOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesCodeActionProvider {
    Bool(bool),
    CodeActionOptions(super::structures::CodeActionOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesColorProvider {
    Bool(bool),
    DocumentColorOptions(super::structures::DocumentColorOptions),
    DocumentColorRegistrationOptions(super::structures::DocumentColorRegistrationOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesWorkspaceSymbolProvider {
    Bool(bool),
    WorkspaceSymbolOptions(super::structures::WorkspaceSymbolOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesDocumentFormattingProvider {
    Bool(bool),
    DocumentFormattingOptions(super::structures::DocumentFormattingOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesDocumentRangeFormattingProvider {
    Bool(bool),
    DocumentRangeFormattingOptions(super::structures::DocumentRangeFormattingOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesRenameProvider {
    Bool(bool),
    RenameOptions(super::structures::RenameOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesFoldingRangeProvider {
    Bool(bool),
    FoldingRangeOptions(super::structures::FoldingRangeOptions),
    FoldingRangeRegistrationOptions(super::structures::FoldingRangeRegistrationOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesSelectionRangeProvider {
    Bool(bool),
    SelectionRangeOptions(super::structures::SelectionRangeOptions),
    SelectionRangeRegistrationOptions(super::structures::SelectionRangeRegistrationOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesCallHierarchyProvider {
    Bool(bool),
    CallHierarchyOptions(super::structures::CallHierarchyOptions),
    CallHierarchyRegistrationOptions(super::structures::CallHierarchyRegistrationOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesLinkedEditingRangeProvider {
    Bool(bool),
    LinkedEditingRangeOptions(super::structures::LinkedEditingRangeOptions),
    LinkedEditingRangeRegistrationOptions(super::structures::LinkedEditingRangeRegistrationOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesSemanticTokensProvider {
    SemanticTokensOptions(super::structures::SemanticTokensOptions),
    SemanticTokensRegistrationOptions(super::structures::SemanticTokensRegistrationOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesMonikerProvider {
    Bool(bool),
    MonikerOptions(super::structures::MonikerOptions),
    MonikerRegistrationOptions(super::structures::MonikerRegistrationOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesTypeHierarchyProvider {
    Bool(bool),
    TypeHierarchyOptions(super::structures::TypeHierarchyOptions),
    TypeHierarchyRegistrationOptions(super::structures::TypeHierarchyRegistrationOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesInlineValueProvider {
    Bool(bool),
    InlineValueOptions(super::structures::InlineValueOptions),
    InlineValueRegistrationOptions(super::structures::InlineValueRegistrationOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesInlayHintProvider {
    Bool(bool),
    InlayHintOptions(super::structures::InlayHintOptions),
    InlayHintRegistrationOptions(super::structures::InlayHintRegistrationOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum ServerCapabilitiesDiagnosticProvider {
    DiagnosticOptions(super::structures::DiagnosticOptions),
    DiagnosticRegistrationOptions(super::structures::DiagnosticRegistrationOptions),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ServerCapabilitiesWorkspace {
    /// The server supports workspace folder.
    ///
    /// @since 3.6.0
    #[serde(rename = "workspaceFolders")]
    pub workspace_folders: Option<super::structures::WorkspaceFoldersServerCapabilities>,
    /// The server is interested in notifications/requests for operations on files.
    ///
    /// @since 3.16.0
    #[serde(rename = "fileOperations")]
    pub file_operations: Option<super::structures::FileOperationOptions>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         SetTraceParams                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#setTraceParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SetTraceParams {
    #[serde(rename = "value")]
    pub value: super::enumerations::TraceValues,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 ShowDocumentClientCapabilities                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client capabilities for the showDocument request.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#showDocumentClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ShowDocumentClientCapabilities {
    /// The client has support for the showDocument
    /// request.
    #[serde(rename = "support")]
    pub support: bool,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       ShowDocumentParams                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Params to show a resource in the UI.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#showDocumentParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ShowDocumentParams {
    /// The uri to show.
    #[serde(rename = "uri")]
    pub uri: Uri,
    /// Indicates to show the resource in an external program.
    /// To show, for example, `https://code.visualstudio.com/`
    /// in the default WEB browser set `external` to `true`.
    #[serde(rename = "external")]
    pub external: Option<bool>,
    /// An optional property to indicate whether the editor
    /// showing the document should take focus or not.
    /// Clients might ignore this property if an external
    /// program is started.
    #[serde(rename = "takeFocus")]
    pub take_focus: Option<bool>,
    /// An optional selection range if the document is a text
    /// document. Clients might ignore the property if an
    /// external program is started or the file is not a text
    /// file.
    #[serde(rename = "selection")]
    pub selection: Option<super::structures::Range>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       ShowDocumentResult                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The result of a showDocument request.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#showDocumentResult (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ShowDocumentResult {
    /// A boolean indicating if the show was successful.
    #[serde(rename = "success")]
    pub success: bool,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       ShowMessageParams                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters of a notification message.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#showMessageParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ShowMessageParams {
    /// The message type. See {@link MessageType}
    #[serde(rename = "type")]
    pub type_: super::enumerations::MessageType,
    /// The actual message.
    #[serde(rename = "message")]
    pub message: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                              ShowMessageRequestClientCapabilities                              //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Show message request client capabilities
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#showMessageRequestClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ShowMessageRequestClientCapabilities {
    /// Capabilities specific to the `MessageActionItem` type.
    #[serde(rename = "messageActionItem")]
    pub message_action_item: Option<ShowMessageRequestClientCapabilitiesMessageActionItem>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ShowMessageRequestClientCapabilitiesMessageActionItem {
    /// Whether the client supports additional attributes which
    /// are preserved and send back to the server in the
    /// request's response.
    #[serde(rename = "additionalPropertiesSupport")]
    pub additional_properties_support: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    ShowMessageRequestParams                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#showMessageRequestParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct ShowMessageRequestParams {
    /// The message type. See {@link MessageType}
    #[serde(rename = "type")]
    pub type_: super::enumerations::MessageType,
    /// The actual message.
    #[serde(rename = "message")]
    pub message: String,
    /// The message action items to present.
    #[serde(rename = "actions")]
    pub actions: Option<Vec<super::structures::MessageActionItem>>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         SignatureHelp                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Signature help represents the signature of something
/// callable. There can be multiple signature but only one
/// active and only one active parameter.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#signatureHelp (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SignatureHelp {
    /// One or more signatures.
    #[serde(rename = "signatures")]
    pub signatures: Vec<super::structures::SignatureInformation>,
    /// The active signature. If omitted or the value lies outside the
    /// range of `signatures` the value defaults to zero or is ignored if
    /// the `SignatureHelp` has no signatures.
    ///
    /// Whenever possible implementors should make an active decision about
    /// the active signature and shouldn't rely on a default value.
    ///
    /// In future version of the protocol this property might become
    /// mandatory to better express this.
    #[serde(rename = "activeSignature")]
    pub active_signature: Option<UInteger>,
    /// The active parameter of the active signature. If omitted or the value
    /// lies outside the range of `signatures[activeSignature].parameters`
    /// defaults to 0 if the active signature has parameters. If
    /// the active signature has no parameters it is ignored.
    /// In future version of the protocol this property might become
    /// mandatory to better express the active parameter if the
    /// active signature does have any.
    #[serde(rename = "activeParameter")]
    pub active_parameter: Option<UInteger>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                SignatureHelpClientCapabilities                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client Capabilities for a {@link SignatureHelpRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#signatureHelpClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SignatureHelpClientCapabilities {
    /// Whether signature help supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// The client supports the following `SignatureInformation`
    /// specific properties.
    #[serde(rename = "signatureInformation")]
    pub signature_information: Option<SignatureHelpClientCapabilitiesSignatureInformation>,
    /// The client supports to send additional context information for a
    /// `textDocument/signatureHelp` request. A client that opts into
    /// contextSupport will also support the `retriggerCharacters` on
    /// `SignatureHelpOptions`.
    ///
    /// @since 3.15.0
    #[serde(rename = "contextSupport")]
    pub context_support: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SignatureHelpClientCapabilitiesSignatureInformation {
    /// Client supports the following content formats for the documentation
    /// property. The order describes the preferred format of the client.
    #[serde(rename = "documentationFormat")]
    pub documentation_format: Option<Vec<super::enumerations::MarkupKind>>,
    /// Client capabilities specific to parameter information.
    #[serde(rename = "parameterInformation")]
    pub parameter_information:
        Option<SignatureHelpClientCapabilitiesSignatureInformationParameterInformation>,
    /// The client supports the `activeParameter` property on `SignatureInformation`
    /// literal.
    ///
    /// @since 3.16.0
    #[serde(rename = "activeParameterSupport")]
    pub active_parameter_support: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SignatureHelpClientCapabilitiesSignatureInformationParameterInformation {
    /// The client supports processing label offsets instead of a
    /// simple label string.
    ///
    /// @since 3.14.0
    #[serde(rename = "labelOffsetSupport")]
    pub label_offset_support: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      SignatureHelpContext                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Additional information about the context in which a signature help request was triggered.
///
/// @since 3.15.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#signatureHelpContext (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SignatureHelpContext {
    /// Action that caused signature help to be triggered.
    #[serde(rename = "triggerKind")]
    pub trigger_kind: super::enumerations::SignatureHelpTriggerKind,
    /// Character that caused signature help to be triggered.
    ///
    /// This is undefined when `triggerKind !== SignatureHelpTriggerKind.TriggerCharacter`
    #[serde(rename = "triggerCharacter")]
    pub trigger_character: Option<String>,
    /// `true` if signature help was already showing when it was triggered.
    ///
    /// Retriggers occurs when the signature help is already active and can be caused by actions such as
    /// typing a trigger character, a cursor move, or document content changes.
    #[serde(rename = "isRetrigger")]
    pub is_retrigger: bool,
    /// The currently active `SignatureHelp`.
    ///
    /// The `activeSignatureHelp` has its `SignatureHelp.activeSignature` field updated based on
    /// the user navigating through available signatures.
    #[serde(rename = "activeSignatureHelp")]
    pub active_signature_help: Option<super::structures::SignatureHelp>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      SignatureHelpOptions                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Server Capabilities for a {@link SignatureHelpRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#signatureHelpOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SignatureHelpOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
    /// List of characters that trigger signature help automatically.
    #[serde(rename = "triggerCharacters")]
    pub trigger_characters: Option<Vec<String>>,
    /// List of characters that re-trigger signature help.
    ///
    /// These trigger characters are only active when signature help is already showing. All trigger characters
    /// are also counted as re-trigger characters.
    ///
    /// @since 3.15.0
    #[serde(rename = "retriggerCharacters")]
    pub retrigger_characters: Option<Vec<String>>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      SignatureHelpParams                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Parameters for a {@link SignatureHelpRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#signatureHelpParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SignatureHelpParams {
    /// A parameter literal used in requests to pass a text document and a position inside that
    /// document.
    #[serde(flatten)]
    pub text_document_position_params: TextDocumentPositionParams,
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    /// The signature help context. This is only available if the client specifies
    /// to send this using the client capability `textDocument.signatureHelp.contextSupport === true`
    ///
    /// @since 3.15.0
    #[serde(rename = "context")]
    pub context: Option<super::structures::SignatureHelpContext>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                SignatureHelpRegistrationOptions                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Registration options for a {@link SignatureHelpRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#signatureHelpRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SignatureHelpRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Server Capabilities for a {@link SignatureHelpRequest}.
    #[serde(flatten)]
    pub signature_help_options: SignatureHelpOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      SignatureInformation                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents the signature of something callable. A signature
/// can have a label, like a function-name, a doc-comment, and
/// a set of parameters.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#signatureInformation (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SignatureInformation {
    /// The label of this signature. Will be shown in
    /// the UI.
    #[serde(rename = "label")]
    pub label: String,
    /// The human-readable doc-comment of this signature. Will be shown
    /// in the UI but can be omitted.
    #[serde(rename = "documentation")]
    pub documentation: Option<SignatureInformationDocumentation>,
    /// The parameters of this signature.
    #[serde(rename = "parameters")]
    pub parameters: Option<Vec<super::structures::ParameterInformation>>,
    /// The index of the active parameter.
    ///
    /// If provided, this is used in place of `SignatureHelp.activeParameter`.
    ///
    /// @since 3.16.0
    #[serde(rename = "activeParameter")]
    pub active_parameter: Option<UInteger>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum SignatureInformationDocumentation {
    String(String),
    MarkupContent(super::structures::MarkupContent),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   StaticRegistrationOptions                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Static registration options to be returned in the initialize
/// request.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#staticRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct StaticRegistrationOptions {
    /// The id used to register the request. The id can be used to deregister
    /// the request again. See also Registration#id.
    #[serde(rename = "id")]
    pub id: Option<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       SymbolInformation                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents information about programming constructs like variables, classes,
/// interfaces etc.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#symbolInformation (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct SymbolInformation {
    /// A base for all symbol information.
    #[serde(flatten)]
    pub base_symbol_information: BaseSymbolInformation,
    /// The location of this symbol. The location's range is used by a tool
    /// to reveal the location in the editor. If the symbol is selected in the
    /// tool the range's start information is used to position the cursor. So
    /// the range usually spans more than the actual symbol's name and does
    /// normally include things like visibility modifiers.
    ///
    /// The range doesn't have to denote a node range in the sense of an abstract
    /// syntax tree. It can therefore not be used to re-construct a hierarchy of
    /// the symbols.
    #[serde(rename = "location")]
    pub location: super::structures::Location,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                             TextDocumentChangeRegistrationOptions                              //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Describe options to be used when registered for text document change events.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentChangeRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TextDocumentChangeRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// How documents are synced to the server.
    #[serde(rename = "syncKind")]
    pub sync_kind: super::enumerations::TextDocumentSyncKind,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 TextDocumentClientCapabilities                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Text document specific client capabilities.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TextDocumentClientCapabilities {
    /// Defines which synchronization capabilities the client supports.
    #[serde(rename = "synchronization")]
    pub synchronization: Option<super::structures::TextDocumentSyncClientCapabilities>,
    /// Capabilities specific to the `textDocument/completion` request.
    #[serde(rename = "completion")]
    pub completion: Option<super::structures::CompletionClientCapabilities>,
    /// Capabilities specific to the `textDocument/hover` request.
    #[serde(rename = "hover")]
    pub hover: Option<super::structures::HoverClientCapabilities>,
    /// Capabilities specific to the `textDocument/signatureHelp` request.
    #[serde(rename = "signatureHelp")]
    pub signature_help: Option<super::structures::SignatureHelpClientCapabilities>,
    /// Capabilities specific to the `textDocument/declaration` request.
    ///
    /// @since 3.14.0
    #[serde(rename = "declaration")]
    pub declaration: Option<super::structures::DeclarationClientCapabilities>,
    /// Capabilities specific to the `textDocument/definition` request.
    #[serde(rename = "definition")]
    pub definition: Option<super::structures::DefinitionClientCapabilities>,
    /// Capabilities specific to the `textDocument/typeDefinition` request.
    ///
    /// @since 3.6.0
    #[serde(rename = "typeDefinition")]
    pub type_definition: Option<super::structures::TypeDefinitionClientCapabilities>,
    /// Capabilities specific to the `textDocument/implementation` request.
    ///
    /// @since 3.6.0
    #[serde(rename = "implementation")]
    pub implementation: Option<super::structures::ImplementationClientCapabilities>,
    /// Capabilities specific to the `textDocument/references` request.
    #[serde(rename = "references")]
    pub references: Option<super::structures::ReferenceClientCapabilities>,
    /// Capabilities specific to the `textDocument/documentHighlight` request.
    #[serde(rename = "documentHighlight")]
    pub document_highlight: Option<super::structures::DocumentHighlightClientCapabilities>,
    /// Capabilities specific to the `textDocument/documentSymbol` request.
    #[serde(rename = "documentSymbol")]
    pub document_symbol: Option<super::structures::DocumentSymbolClientCapabilities>,
    /// Capabilities specific to the `textDocument/codeAction` request.
    #[serde(rename = "codeAction")]
    pub code_action: Option<super::structures::CodeActionClientCapabilities>,
    /// Capabilities specific to the `textDocument/codeLens` request.
    #[serde(rename = "codeLens")]
    pub code_lens: Option<super::structures::CodeLensClientCapabilities>,
    /// Capabilities specific to the `textDocument/documentLink` request.
    #[serde(rename = "documentLink")]
    pub document_link: Option<super::structures::DocumentLinkClientCapabilities>,
    /// Capabilities specific to the `textDocument/documentColor` and the
    /// `textDocument/colorPresentation` request.
    ///
    /// @since 3.6.0
    #[serde(rename = "colorProvider")]
    pub color_provider: Option<super::structures::DocumentColorClientCapabilities>,
    /// Capabilities specific to the `textDocument/formatting` request.
    #[serde(rename = "formatting")]
    pub formatting: Option<super::structures::DocumentFormattingClientCapabilities>,
    /// Capabilities specific to the `textDocument/rangeFormatting` request.
    #[serde(rename = "rangeFormatting")]
    pub range_formatting: Option<super::structures::DocumentRangeFormattingClientCapabilities>,
    /// Capabilities specific to the `textDocument/onTypeFormatting` request.
    #[serde(rename = "onTypeFormatting")]
    pub on_type_formatting: Option<super::structures::DocumentOnTypeFormattingClientCapabilities>,
    /// Capabilities specific to the `textDocument/rename` request.
    #[serde(rename = "rename")]
    pub rename: Option<super::structures::RenameClientCapabilities>,
    /// Capabilities specific to the `textDocument/foldingRange` request.
    ///
    /// @since 3.10.0
    #[serde(rename = "foldingRange")]
    pub folding_range: Option<super::structures::FoldingRangeClientCapabilities>,
    /// Capabilities specific to the `textDocument/selectionRange` request.
    ///
    /// @since 3.15.0
    #[serde(rename = "selectionRange")]
    pub selection_range: Option<super::structures::SelectionRangeClientCapabilities>,
    /// Capabilities specific to the `textDocument/publishDiagnostics` notification.
    #[serde(rename = "publishDiagnostics")]
    pub publish_diagnostics: Option<super::structures::PublishDiagnosticsClientCapabilities>,
    /// Capabilities specific to the various call hierarchy requests.
    ///
    /// @since 3.16.0
    #[serde(rename = "callHierarchy")]
    pub call_hierarchy: Option<super::structures::CallHierarchyClientCapabilities>,
    /// Capabilities specific to the various semantic token request.
    ///
    /// @since 3.16.0
    #[serde(rename = "semanticTokens")]
    pub semantic_tokens: Option<super::structures::SemanticTokensClientCapabilities>,
    /// Capabilities specific to the `textDocument/linkedEditingRange` request.
    ///
    /// @since 3.16.0
    #[serde(rename = "linkedEditingRange")]
    pub linked_editing_range: Option<super::structures::LinkedEditingRangeClientCapabilities>,
    /// Client capabilities specific to the `textDocument/moniker` request.
    ///
    /// @since 3.16.0
    #[serde(rename = "moniker")]
    pub moniker: Option<super::structures::MonikerClientCapabilities>,
    /// Capabilities specific to the various type hierarchy requests.
    ///
    /// @since 3.17.0
    #[serde(rename = "typeHierarchy")]
    pub type_hierarchy: Option<super::structures::TypeHierarchyClientCapabilities>,
    /// Capabilities specific to the `textDocument/inlineValue` request.
    ///
    /// @since 3.17.0
    #[serde(rename = "inlineValue")]
    pub inline_value: Option<super::structures::InlineValueClientCapabilities>,
    /// Capabilities specific to the `textDocument/inlayHint` request.
    ///
    /// @since 3.17.0
    #[serde(rename = "inlayHint")]
    pub inlay_hint: Option<super::structures::InlayHintClientCapabilities>,
    /// Capabilities specific to the diagnostic pull model.
    ///
    /// @since 3.17.0
    #[serde(rename = "diagnostic")]
    pub diagnostic: Option<super::structures::DiagnosticClientCapabilities>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        TextDocumentEdit                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Describes textual changes on a text document. A TextDocumentEdit describes all changes
/// on a document version Si and after they are applied move the document to version Si+1.
/// So the creator of a TextDocumentEdit doesn't need to sort the array of edits or do any
/// kind of ordering. However the edits must be non overlapping.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentEdit (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TextDocumentEdit {
    /// The text document to change.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::OptionalVersionedTextDocumentIdentifier,
    /// The edits to be applied.
    ///
    /// @since 3.16.0 - support for AnnotatedTextEdit. This is guarded using a
    /// client capability.
    #[serde(rename = "edits")]
    pub edits: Vec<TextDocumentEditEdits>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentEditEdits {
    TextEdit(super::structures::TextEdit),
    AnnotatedTextEdit(super::structures::AnnotatedTextEdit),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     TextDocumentIdentifier                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A literal to identify a text document in the client.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentIdentifier (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TextDocumentIdentifier {
    /// The text document's uri.
    #[serde(rename = "uri")]
    pub uri: DocumentUri,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        TextDocumentItem                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] An item to transfer a text document from the client to the
/// server.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentItem (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TextDocumentItem {
    /// The text document's uri.
    #[serde(rename = "uri")]
    pub uri: DocumentUri,
    /// The text document's language identifier.
    #[serde(rename = "languageId")]
    pub language_id: String,
    /// The version number of this document (it will increase after each
    /// change, including undo/redo).
    #[serde(rename = "version")]
    pub version: Integer,
    /// The content of the opened text document.
    #[serde(rename = "text")]
    pub text: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   TextDocumentPositionParams                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A parameter literal used in requests to pass a text document and a position inside that
/// document.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentPositionParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TextDocumentPositionParams {
    /// The text document.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
    /// The position inside the text document.
    #[serde(rename = "position")]
    pub position: super::structures::Position,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                TextDocumentRegistrationOptions                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] General text document registration options.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TextDocumentRegistrationOptions {
    /// A document selector to identify the scope of the registration. If set to null
    /// the document selector provided on the client side will be used.
    #[serde(rename = "documentSelector")]
    pub document_selector: TextDocumentRegistrationOptionsDocumentSelector,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentRegistrationOptionsDocumentSelector {
    DocumentSelector(super::type_aliases::DocumentSelector),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                              TextDocumentSaveRegistrationOptions                               //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Save registration options.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentSaveRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TextDocumentSaveRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Save options.
    #[serde(flatten)]
    pub save_options: SaveOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                               TextDocumentSyncClientCapabilities                               //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentSyncClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TextDocumentSyncClientCapabilities {
    /// Whether text document synchronization supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// The client supports sending will save notifications.
    #[serde(rename = "willSave")]
    pub will_save: Option<bool>,
    /// The client supports sending a will save request and
    /// waits for a response providing text edits which will
    /// be applied to the document before it is saved.
    #[serde(rename = "willSaveWaitUntil")]
    pub will_save_wait_until: Option<bool>,
    /// The client supports did save notifications.
    #[serde(rename = "didSave")]
    pub did_save: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    TextDocumentSyncOptions                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentSyncOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TextDocumentSyncOptions {
    /// Open and close notifications are sent to the server. If omitted open close notification should not
    /// be sent.
    #[serde(rename = "openClose")]
    pub open_close: Option<bool>,
    /// Change notifications are sent to the server. See TextDocumentSyncKind.None, TextDocumentSyncKind.Full
    /// and TextDocumentSyncKind.Incremental. If omitted it defaults to TextDocumentSyncKind.None.
    #[serde(rename = "change")]
    pub change: Option<super::enumerations::TextDocumentSyncKind>,
    /// If present will save notifications are sent to the server. If omitted the notification should not be
    /// sent.
    #[serde(rename = "willSave")]
    pub will_save: Option<bool>,
    /// If present will save wait until requests are sent to the server. If omitted the request should not be
    /// sent.
    #[serde(rename = "willSaveWaitUntil")]
    pub will_save_wait_until: Option<bool>,
    /// If present save notifications are sent to the server. If omitted the notification should not be
    /// sent.
    #[serde(rename = "save")]
    pub save: Option<TextDocumentSyncOptionsSave>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum TextDocumentSyncOptionsSave {
    Bool(bool),
    SaveOptions(super::structures::SaveOptions),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                            TextEdit                                            //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A text edit applicable to a text document.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textEdit (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TextEdit {
    /// The range of the text document to be manipulated. To insert
    /// text into a document create a range where start === end.
    #[serde(rename = "range")]
    pub range: super::structures::Range,
    /// The string to be inserted. For delete operations use an
    /// empty string.
    #[serde(rename = "newText")]
    pub new_text: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                TypeDefinitionClientCapabilities                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Since 3.6.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#typeDefinitionClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TypeDefinitionClientCapabilities {
    /// Whether implementation supports dynamic registration. If this is set to `true`
    /// the client supports the new `TypeDefinitionRegistrationOptions` return value
    /// for the corresponding server capability as well.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// The client supports additional metadata in the form of definition links.
    ///
    /// Since 3.14.0
    #[serde(rename = "linkSupport")]
    pub link_support: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     TypeDefinitionOptions                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#typeDefinitionOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TypeDefinitionOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      TypeDefinitionParams                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#typeDefinitionParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TypeDefinitionParams {
    /// A parameter literal used in requests to pass a text document and a position inside that
    /// document.
    #[serde(flatten)]
    pub text_document_position_params: TextDocumentPositionParams,
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                               TypeDefinitionRegistrationOptions                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#typeDefinitionRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TypeDefinitionRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    #[serde(flatten)]
    pub type_definition_options: TypeDefinitionOptions,
    /// Static registration options to be returned in the initialize
    /// request.
    #[serde(flatten)]
    pub static_registration_options: StaticRegistrationOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                TypeHierarchyClientCapabilities                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#typeHierarchyClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TypeHierarchyClientCapabilities {
    /// Whether implementation supports dynamic registration. If this is set to `true`
    /// the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`
    /// return value for the corresponding server capability as well.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       TypeHierarchyItem                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#typeHierarchyItem (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TypeHierarchyItem {
    /// The name of this item.
    #[serde(rename = "name")]
    pub name: String,
    /// The kind of this item.
    #[serde(rename = "kind")]
    pub kind: super::enumerations::SymbolKind,
    /// Tags for this item.
    #[serde(rename = "tags")]
    pub tags: Option<Vec<super::enumerations::SymbolTag>>,
    /// More detail for this item, e.g. the signature of a function.
    #[serde(rename = "detail")]
    pub detail: Option<String>,
    /// The resource identifier of this item.
    #[serde(rename = "uri")]
    pub uri: DocumentUri,
    /// The range enclosing this symbol not including leading/trailing whitespace
    /// but everything else, e.g. comments and code.
    #[serde(rename = "range")]
    pub range: super::structures::Range,
    /// The range that should be selected and revealed when this symbol is being
    /// picked, e.g. the name of a function. Must be contained by the
    /// {@link TypeHierarchyItem.range `range`}.
    #[serde(rename = "selectionRange")]
    pub selection_range: super::structures::Range,
    /// A data entry field that is preserved between a type hierarchy prepare and
    /// supertypes or subtypes requests. It could also be used to identify the
    /// type hierarchy in the server, helping improve the performance on
    /// resolving supertypes and subtypes.
    #[serde(rename = "data")]
    pub data: Option<super::type_aliases::LspAny>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      TypeHierarchyOptions                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Type hierarchy options used during static registration.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#typeHierarchyOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TypeHierarchyOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   TypeHierarchyPrepareParams                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameter of a `textDocument/prepareTypeHierarchy` request.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#typeHierarchyPrepareParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TypeHierarchyPrepareParams {
    /// A parameter literal used in requests to pass a text document and a position inside that
    /// document.
    #[serde(flatten)]
    pub text_document_position_params: TextDocumentPositionParams,
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                TypeHierarchyRegistrationOptions                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Type hierarchy options used during static or dynamic registration.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#typeHierarchyRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TypeHierarchyRegistrationOptions {
    /// General text document registration options.
    #[serde(flatten)]
    pub text_document_registration_options: TextDocumentRegistrationOptions,
    /// Type hierarchy options used during static registration.
    ///
    /// @since 3.17.0
    #[serde(flatten)]
    pub type_hierarchy_options: TypeHierarchyOptions,
    /// Static registration options to be returned in the initialize
    /// request.
    #[serde(flatten)]
    pub static_registration_options: StaticRegistrationOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  TypeHierarchySubtypesParams                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameter of a `typeHierarchy/subtypes` request.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#typeHierarchySubtypesParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TypeHierarchySubtypesParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    #[serde(rename = "item")]
    pub item: super::structures::TypeHierarchyItem,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 TypeHierarchySupertypesParams                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameter of a `typeHierarchy/supertypes` request.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#typeHierarchySupertypesParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct TypeHierarchySupertypesParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    #[serde(rename = "item")]
    pub item: super::structures::TypeHierarchyItem,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                               UnchangedDocumentDiagnosticReport                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A diagnostic report indicating that the last returned
/// report is still accurate.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#unchangedDocumentDiagnosticReport (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct UnchangedDocumentDiagnosticReport {
    /// A document diagnostic report indicating
    /// no changes to the last result. A server can
    /// only return `unchanged` if result ids are
    /// provided.
    #[serde(rename = "kind")]
    pub kind: UnchangedDocumentDiagnosticReportKind,
    /// A result id which will be sent on the next
    /// diagnostic request for the same document.
    #[serde(rename = "resultId")]
    pub result_id: String,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum UnchangedDocumentDiagnosticReportKind {
    #[serde(rename = "unchanged")]
    Unchanged,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         Unregistration                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] General parameters to unregister a request or notification.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#unregistration (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct Unregistration {
    /// The id used to unregister the request or notification. Usually an id
    /// provided during the register request.
    #[serde(rename = "id")]
    pub id: String,
    /// The method to unregister for.
    #[serde(rename = "method")]
    pub method: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      UnregistrationParams                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#unregistrationParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct UnregistrationParams {
    #[serde(rename = "unregisterations")]
    pub unregisterations: Vec<super::structures::Unregistration>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                              VersionedNotebookDocumentIdentifier                               //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A versioned notebook document identifier.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#versionedNotebookDocumentIdentifier (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct VersionedNotebookDocumentIdentifier {
    /// The version number of this notebook document.
    #[serde(rename = "version")]
    pub version: Integer,
    /// The notebook document's uri.
    #[serde(rename = "uri")]
    pub uri: Uri,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                VersionedTextDocumentIdentifier                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A text document identifier to denote a specific version of a text document.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#versionedTextDocumentIdentifier (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct VersionedTextDocumentIdentifier {
    /// A literal to identify a text document in the client.
    #[serde(flatten)]
    pub text_document_identifier: TextDocumentIdentifier,
    /// The version number of this document.
    #[serde(rename = "version")]
    pub version: Integer,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   WillSaveTextDocumentParams                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters sent in a will save text document notification.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#willSaveTextDocumentParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WillSaveTextDocumentParams {
    /// The document that will be saved.
    #[serde(rename = "textDocument")]
    pub text_document: super::structures::TextDocumentIdentifier,
    /// The 'TextDocumentSaveReason'.
    #[serde(rename = "reason")]
    pub reason: super::enumerations::TextDocumentSaveReason,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    WindowClientCapabilities                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#windowClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WindowClientCapabilities {
    /// It indicates whether the client supports server initiated
    /// progress using the `window/workDoneProgress/create` request.
    ///
    /// The capability also controls Whether client supports handling
    /// of progress notifications. If set servers are allowed to report a
    /// `workDoneProgress` property in the request specific server
    /// capabilities.
    ///
    /// @since 3.15.0
    #[serde(rename = "workDoneProgress")]
    pub work_done_progress: Option<bool>,
    /// Capabilities specific to the showMessage request.
    ///
    /// @since 3.16.0
    #[serde(rename = "showMessage")]
    pub show_message: Option<super::structures::ShowMessageRequestClientCapabilities>,
    /// Capabilities specific to the showDocument request.
    ///
    /// @since 3.16.0
    #[serde(rename = "showDocument")]
    pub show_document: Option<super::structures::ShowDocumentClientCapabilities>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     WorkDoneProgressBegin                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workDoneProgressBegin (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkDoneProgressBegin {
    #[serde(rename = "kind")]
    pub kind: WorkDoneProgressBeginKind,
    /// Mandatory title of the progress operation. Used to briefly inform about
    /// the kind of operation being performed.
    ///
    /// Examples: "Indexing" or "Linking dependencies".
    #[serde(rename = "title")]
    pub title: String,
    /// Controls if a cancel button should show to allow the user to cancel the
    /// long running operation. Clients that don't support cancellation are allowed
    /// to ignore the setting.
    #[serde(rename = "cancellable")]
    pub cancellable: Option<bool>,
    /// Optional, more detailed associated progress message. Contains
    /// complementary information to the `title`.
    ///
    /// Examples: "3/25 files", "project/src/module2", "node_modules/some_dep".
    /// If unset, the previous progress message (if any) is still valid.
    #[serde(rename = "message")]
    pub message: Option<String>,
    /// Optional progress percentage to display (value 100 is considered 100%).
    /// If not provided infinite progress is assumed and clients are allowed
    /// to ignore the `percentage` value in subsequent in report notifications.
    ///
    /// The value should be steadily rising. Clients are free to ignore values
    /// that are not following this rule. The value range is [0, 100].
    #[serde(rename = "percentage")]
    pub percentage: Option<UInteger>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum WorkDoneProgressBeginKind {
    #[serde(rename = "begin")]
    Begin,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  WorkDoneProgressCancelParams                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workDoneProgressCancelParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkDoneProgressCancelParams {
    /// The token to be used to report progress.
    #[serde(rename = "token")]
    pub token: super::type_aliases::ProgressToken,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  WorkDoneProgressCreateParams                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workDoneProgressCreateParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkDoneProgressCreateParams {
    /// The token to be used to report progress.
    #[serde(rename = "token")]
    pub token: super::type_aliases::ProgressToken,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      WorkDoneProgressEnd                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workDoneProgressEnd (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkDoneProgressEnd {
    #[serde(rename = "kind")]
    pub kind: WorkDoneProgressEndKind,
    /// Optional, a final message indicating to for example indicate the outcome
    /// of the operation.
    #[serde(rename = "message")]
    pub message: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum WorkDoneProgressEndKind {
    #[serde(rename = "end")]
    End,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    WorkDoneProgressOptions                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workDoneProgressOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkDoneProgressOptions {
    #[serde(rename = "workDoneProgress")]
    pub work_done_progress: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     WorkDoneProgressParams                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workDoneProgressParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkDoneProgressParams {
    /// An optional token that a server can use to report work done progress.
    #[serde(rename = "workDoneToken")]
    pub work_done_token: Option<super::type_aliases::ProgressToken>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     WorkDoneProgressReport                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workDoneProgressReport (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkDoneProgressReport {
    #[serde(rename = "kind")]
    pub kind: WorkDoneProgressReportKind,
    /// Controls enablement state of a cancel button.
    ///
    /// Clients that don't support cancellation or don't support controlling the button's
    /// enablement state are allowed to ignore the property.
    #[serde(rename = "cancellable")]
    pub cancellable: Option<bool>,
    /// Optional, more detailed associated progress message. Contains
    /// complementary information to the `title`.
    ///
    /// Examples: "3/25 files", "project/src/module2", "node_modules/some_dep".
    /// If unset, the previous progress message (if any) is still valid.
    #[serde(rename = "message")]
    pub message: Option<String>,
    /// Optional progress percentage to display (value 100 is considered 100%).
    /// If not provided infinite progress is assumed and clients are allowed
    /// to ignore the `percentage` value in subsequent in report notifications.
    ///
    /// The value should be steadily rising. Clients are free to ignore values
    /// that are not following this rule. The value range is [0, 100]
    #[serde(rename = "percentage")]
    pub percentage: Option<UInteger>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum WorkDoneProgressReportKind {
    #[serde(rename = "report")]
    Report,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  WorkspaceClientCapabilities                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Workspace specific client capabilities.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceClientCapabilities {
    /// The client supports applying batch edits
    /// to the workspace by supporting the request
    /// 'workspace/applyEdit'
    #[serde(rename = "applyEdit")]
    pub apply_edit: Option<bool>,
    /// Capabilities specific to `WorkspaceEdit`s.
    #[serde(rename = "workspaceEdit")]
    pub workspace_edit: Option<super::structures::WorkspaceEditClientCapabilities>,
    /// Capabilities specific to the `workspace/didChangeConfiguration` notification.
    #[serde(rename = "didChangeConfiguration")]
    pub did_change_configuration:
        Option<super::structures::DidChangeConfigurationClientCapabilities>,
    /// Capabilities specific to the `workspace/didChangeWatchedFiles` notification.
    #[serde(rename = "didChangeWatchedFiles")]
    pub did_change_watched_files:
        Option<super::structures::DidChangeWatchedFilesClientCapabilities>,
    /// Capabilities specific to the `workspace/symbol` request.
    #[serde(rename = "symbol")]
    pub symbol: Option<super::structures::WorkspaceSymbolClientCapabilities>,
    /// Capabilities specific to the `workspace/executeCommand` request.
    #[serde(rename = "executeCommand")]
    pub execute_command: Option<super::structures::ExecuteCommandClientCapabilities>,
    /// The client has support for workspace folders.
    ///
    /// @since 3.6.0
    #[serde(rename = "workspaceFolders")]
    pub workspace_folders: Option<bool>,
    /// The client supports `workspace/configuration` requests.
    ///
    /// @since 3.6.0
    #[serde(rename = "configuration")]
    pub configuration: Option<bool>,
    /// Capabilities specific to the semantic token requests scoped to the
    /// workspace.
    ///
    /// @since 3.16.0.
    #[serde(rename = "semanticTokens")]
    pub semantic_tokens: Option<super::structures::SemanticTokensWorkspaceClientCapabilities>,
    /// Capabilities specific to the code lens requests scoped to the
    /// workspace.
    ///
    /// @since 3.16.0.
    #[serde(rename = "codeLens")]
    pub code_lens: Option<super::structures::CodeLensWorkspaceClientCapabilities>,
    /// The client has support for file notifications/requests for user operations on files.
    ///
    /// Since 3.16.0
    #[serde(rename = "fileOperations")]
    pub file_operations: Option<super::structures::FileOperationClientCapabilities>,
    /// Capabilities specific to the inline values requests scoped to the
    /// workspace.
    ///
    /// @since 3.17.0.
    #[serde(rename = "inlineValue")]
    pub inline_value: Option<super::structures::InlineValueWorkspaceClientCapabilities>,
    /// Capabilities specific to the inlay hint requests scoped to the
    /// workspace.
    ///
    /// @since 3.17.0.
    #[serde(rename = "inlayHint")]
    pub inlay_hint: Option<super::structures::InlayHintWorkspaceClientCapabilities>,
    /// Capabilities specific to the diagnostic requests scoped to the
    /// workspace.
    ///
    /// @since 3.17.0.
    #[serde(rename = "diagnostics")]
    pub diagnostics: Option<super::structures::DiagnosticWorkspaceClientCapabilities>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   WorkspaceDiagnosticParams                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Parameters of the workspace diagnostic request.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceDiagnosticParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceDiagnosticParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    /// The additional identifier provided during registration.
    #[serde(rename = "identifier")]
    pub identifier: Option<String>,
    /// The currently known diagnostic reports with their
    /// previous result ids.
    #[serde(rename = "previousResultIds")]
    pub previous_result_ids: Vec<super::structures::PreviousResultId>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                   WorkspaceDiagnosticReport                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A workspace diagnostic report.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceDiagnosticReport (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceDiagnosticReport {
    #[serde(rename = "items")]
    pub items: Vec<super::type_aliases::WorkspaceDocumentDiagnosticReport>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                             WorkspaceDiagnosticReportPartialResult                             //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A partial result for a workspace diagnostic report.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceDiagnosticReportPartialResult (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceDiagnosticReportPartialResult {
    #[serde(rename = "items")]
    pub items: Vec<super::type_aliases::WorkspaceDocumentDiagnosticReport>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         WorkspaceEdit                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A workspace edit represents changes to many resources managed in the workspace. The edit
/// should either provide `changes` or `documentChanges`. If documentChanges are present
/// they are preferred over `changes` if the client can handle versioned document edits.
///
/// Since version 3.13.0 a workspace edit can contain resource operations as well. If resource
/// operations are present clients need to execute the operations in the order in which they
/// are provided. So a workspace edit for example can consist of the following two changes:
/// (1) a create file a.txt and (2) a text document edit which insert text into file a.txt.
///
/// An invalid sequence (e.g. (1) delete file a.txt and (2) insert text into file a.txt) will
/// cause failure of the operation. How the client recovers from the failure is described by
/// the client capability: `workspace.workspaceEdit.failureHandling`
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceEdit (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceEdit {
    /// Holds changes to existing resources.
    #[serde(rename = "changes")]
    pub changes: Option<HashMap<DocumentUri, Vec<super::structures::TextEdit>>>,
    /// Depending on the client capability `workspace.workspaceEdit.resourceOperations` document changes
    /// are either an array of `TextDocumentEdit`s to express changes to n different text documents
    /// where each text document edit addresses a specific version of a text document. Or it can contain
    /// above `TextDocumentEdit`s mixed with create, rename and delete file / folder operations.
    ///
    /// Whether a client supports versioned document edits is expressed via
    /// `workspace.workspaceEdit.documentChanges` client capability.
    ///
    /// If a client neither supports `documentChanges` nor `workspace.workspaceEdit.resourceOperations` then
    /// only plain `TextEdit`s using the `changes` property are supported.
    #[serde(rename = "documentChanges")]
    pub document_changes: Option<Vec<WorkspaceEditDocumentChanges>>,
    /// A map of change annotations that can be referenced in `AnnotatedTextEdit`s or create, rename and
    /// delete file / folder operations.
    ///
    /// Whether clients honor this property depends on the client capability `workspace.changeAnnotationSupport`.
    ///
    /// @since 3.16.0
    #[serde(rename = "changeAnnotations")]
    pub change_annotations: Option<
        HashMap<
            super::type_aliases::ChangeAnnotationIdentifier,
            super::structures::ChangeAnnotation,
        >,
    >,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum WorkspaceEditDocumentChanges {
    TextDocumentEdit(super::structures::TextDocumentEdit),
    CreateFile(super::structures::CreateFile),
    RenameFile(super::structures::RenameFile),
    DeleteFile(super::structures::DeleteFile),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                WorkspaceEditClientCapabilities                                 //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceEditClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceEditClientCapabilities {
    /// The client supports versioned document changes in `WorkspaceEdit`s
    #[serde(rename = "documentChanges")]
    pub document_changes: Option<bool>,
    /// The resource operations the client supports. Clients should at least
    /// support 'create', 'rename' and 'delete' files and folders.
    ///
    /// @since 3.13.0
    #[serde(rename = "resourceOperations")]
    pub resource_operations: Option<Vec<super::enumerations::ResourceOperationKind>>,
    /// The failure handling strategy of a client if applying the workspace edit
    /// fails.
    ///
    /// @since 3.13.0
    #[serde(rename = "failureHandling")]
    pub failure_handling: Option<super::enumerations::FailureHandlingKind>,
    /// Whether the client normalizes line endings to the client specific
    /// setting.
    /// If set to `true` the client will normalize line ending characters
    /// in a workspace edit to the client-specified new line
    /// character.
    ///
    /// @since 3.16.0
    #[serde(rename = "normalizesLineEndings")]
    pub normalizes_line_endings: Option<bool>,
    /// Whether the client in general supports change annotations on text edits,
    /// create file, rename file and delete file changes.
    ///
    /// @since 3.16.0
    #[serde(rename = "changeAnnotationSupport")]
    pub change_annotation_support: Option<WorkspaceEditClientCapabilitiesChangeAnnotationSupport>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceEditClientCapabilitiesChangeAnnotationSupport {
    /// Whether the client groups edits with equal labels into tree nodes,
    /// for instance all edits labelled with "Changes in Strings" would
    /// be a tree node.
    #[serde(rename = "groupsOnLabel")]
    pub groups_on_label: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        WorkspaceFolder                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A workspace folder inside a client.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceFolder (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceFolder {
    /// The associated URI for this workspace folder.
    #[serde(rename = "uri")]
    pub uri: Uri,
    /// The name of the workspace folder. Used to refer to this
    /// workspace folder in the user interface.
    #[serde(rename = "name")]
    pub name: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  WorkspaceFoldersChangeEvent                                   //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The workspace folder change event.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceFoldersChangeEvent (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceFoldersChangeEvent {
    /// The array of added workspace folders
    #[serde(rename = "added")]
    pub added: Vec<super::structures::WorkspaceFolder>,
    /// The array of the removed workspace folders
    #[serde(rename = "removed")]
    pub removed: Vec<super::structures::WorkspaceFolder>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                               WorkspaceFoldersServerCapabilities                               //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceFoldersServerCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceFoldersServerCapabilities {
    /// The server has support for workspace folders
    #[serde(rename = "supported")]
    pub supported: Option<bool>,
    /// Whether the server wants to receive workspace folder
    /// change notifications.
    ///
    /// If a string is provided the string is treated as an ID
    /// under which the notification is registered on the client
    /// side. The ID can be used to unregister for these events
    /// using the `client/unregisterCapability` request.
    #[serde(rename = "changeNotifications")]
    pub change_notifications: Option<WorkspaceFoldersServerCapabilitiesChangeNotifications>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum WorkspaceFoldersServerCapabilitiesChangeNotifications {
    String(String),
    Bool(bool),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                             WorkspaceFullDocumentDiagnosticReport                              //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A full document diagnostic report for a workspace diagnostic result.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceFullDocumentDiagnosticReport (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceFullDocumentDiagnosticReport {
    /// A diagnostic report with a full set of problems.
    ///
    /// @since 3.17.0
    #[serde(flatten)]
    pub full_document_diagnostic_report: FullDocumentDiagnosticReport,
    /// The URI for which diagnostic information is reported.
    #[serde(rename = "uri")]
    pub uri: DocumentUri,
    /// The version number for which the diagnostics are reported.
    /// If the document is not marked as open `null` can be provided.
    #[serde(rename = "version")]
    pub version: WorkspaceFullDocumentDiagnosticReportVersion,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum WorkspaceFullDocumentDiagnosticReportVersion {
    Integer(Integer),
    Null(Null),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        WorkspaceSymbol                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A special workspace symbol that supports locations without a range.
///
/// See also SymbolInformation.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceSymbol (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceSymbol {
    /// A base for all symbol information.
    #[serde(flatten)]
    pub base_symbol_information: BaseSymbolInformation,
    /// The location of the symbol. Whether a server is allowed to
    /// return a location without a range depends on the client
    /// capability `workspace.symbol.resolveSupport`.
    ///
    /// See SymbolInformation#location for more details.
    #[serde(rename = "location")]
    pub location: WorkspaceSymbolLocation,
    /// A data entry field that is preserved on a workspace symbol between a
    /// workspace symbol request and a workspace symbol resolve request.
    #[serde(rename = "data")]
    pub data: Option<super::type_aliases::LspAny>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum WorkspaceSymbolLocation {
    Location(super::structures::Location),
    Uri(WorkspaceSymbolLocationUri),
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceSymbolLocationUri {
    #[serde(rename = "uri")]
    pub uri: DocumentUri,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                               WorkspaceSymbolClientCapabilities                                //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Client capabilities for a {@link WorkspaceSymbolRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceSymbolClientCapabilities (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceSymbolClientCapabilities {
    /// Symbol request supports dynamic registration.
    #[serde(rename = "dynamicRegistration")]
    pub dynamic_registration: Option<bool>,
    /// Specific capabilities for the `SymbolKind` in the `workspace/symbol` request.
    #[serde(rename = "symbolKind")]
    pub symbol_kind: Option<WorkspaceSymbolClientCapabilitiesSymbolKind>,
    /// The client supports tags on `SymbolInformation`.
    /// Clients supporting tags have to handle unknown tags gracefully.
    ///
    /// @since 3.16.0
    #[serde(rename = "tagSupport")]
    pub tag_support: Option<WorkspaceSymbolClientCapabilitiesTagSupport>,
    /// The client support partial workspace symbols. The client will send the
    /// request `workspaceSymbol/resolve` to the server to resolve additional
    /// properties.
    ///
    /// @since 3.17.0
    #[serde(rename = "resolveSupport")]
    pub resolve_support: Option<WorkspaceSymbolClientCapabilitiesResolveSupport>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceSymbolClientCapabilitiesSymbolKind {
    /// The symbol kind values the client supports. When this
    /// property exists the client also guarantees that it will
    /// handle values outside its set gracefully and falls back
    /// to a default value when unknown.
    ///
    /// If this property is not present the client only supports
    /// the symbol kinds from `File` to `Array` as defined in
    /// the initial version of the protocol.
    #[serde(rename = "valueSet")]
    pub value_set: Option<Vec<super::enumerations::SymbolKind>>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceSymbolClientCapabilitiesTagSupport {
    /// The tags supported by the client.
    #[serde(rename = "valueSet")]
    pub value_set: Vec<super::enumerations::SymbolTag>,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceSymbolClientCapabilitiesResolveSupport {
    /// The properties that a client can resolve lazily. Usually
    /// `location.range`
    #[serde(rename = "properties")]
    pub properties: Vec<String>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     WorkspaceSymbolOptions                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Server capabilities for a {@link WorkspaceSymbolRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceSymbolOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceSymbolOptions {
    #[serde(flatten)]
    pub work_done_progress_options: WorkDoneProgressOptions,
    /// The server provides support to resolve additional
    /// information for a workspace symbol.
    ///
    /// @since 3.17.0
    #[serde(rename = "resolveProvider")]
    pub resolve_provider: Option<bool>,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     WorkspaceSymbolParams                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The parameters of a {@link WorkspaceSymbolRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceSymbolParams (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceSymbolParams {
    #[serde(flatten)]
    pub work_done_progress_params: WorkDoneProgressParams,
    #[serde(flatten)]
    pub partial_result_params: PartialResultParams,
    /// A query string to filter symbols by. Clients may send an empty
    /// string here to request all symbols.
    #[serde(rename = "query")]
    pub query: String,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                               WorkspaceSymbolRegistrationOptions                               //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Registration options for a {@link WorkspaceSymbolRequest}.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceSymbolRegistrationOptions (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceSymbolRegistrationOptions {
    /// Server capabilities for a {@link WorkspaceSymbolRequest}.
    #[serde(flatten)]
    pub workspace_symbol_options: WorkspaceSymbolOptions,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                           WorkspaceUnchangedDocumentDiagnosticReport                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] An unchanged document diagnostic report for a workspace diagnostic result.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#workspaceUnchangedDocumentDiagnosticReport (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct WorkspaceUnchangedDocumentDiagnosticReport {
    /// A diagnostic report indicating that the last returned
    /// report is still accurate.
    ///
    /// @since 3.17.0
    #[serde(flatten)]
    pub unchanged_document_diagnostic_report: UnchangedDocumentDiagnosticReport,
    /// The URI for which diagnostic information is reported.
    #[serde(rename = "uri")]
    pub uri: DocumentUri,
    /// The version number for which the diagnostics are reported.
    /// If the document is not marked as open `null` can be provided.
    #[serde(rename = "version")]
    pub version: WorkspaceUnchangedDocumentDiagnosticReportVersion,
}

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(untagged)]
pub enum WorkspaceUnchangedDocumentDiagnosticReportVersion {
    Integer(Integer),
    Null(Null),
}
