// 🚨 This file is generated by `cargo xtask-lsp`

use super::*;

use super::notifications::*;
use super::requests::*;

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       ServerNotification                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// Parameters of a server-to-client notification.
#[derive(Clone, PartialEq, Debug)]
pub enum ServerNotification {
    /// @see [`CancelRequest`](super::notifications::CancelRequest).
    CancelRequest(super::structures::CancelParams),
    /// @see [`LogTrace`](super::notifications::LogTrace).
    LogTrace(super::structures::LogTraceParams),
    /// @see [`Progress`](super::notifications::Progress).
    Progress(super::structures::ProgressParams),
    /// @see [`TelemetryEvent`](super::notifications::TelemetryEvent).
    TelemetryEvent(super::type_aliases::LspAny),
    /// @see [`TextDocumentPublishDiagnostics`](super::notifications::TextDocumentPublishDiagnostics).
    TextDocumentPublishDiagnostics(super::structures::PublishDiagnosticsParams),
    /// @see [`WindowLogMessage`](super::notifications::WindowLogMessage).
    WindowLogMessage(super::structures::LogMessageParams),
    /// @see [`WindowShowMessage`](super::notifications::WindowShowMessage).
    WindowShowMessage(super::structures::ShowMessageParams),
}

impl ServerNotification {
    pub fn deserialize(notification: Notification<Value>) -> std::io::Result<Self> {
        Ok(match notification.method.as_ref() {
            "$/cancelRequest" => Self::CancelRequest(
                <CancelRequest as NotificationTrait>::deserialize(notification)?,
            ),
            "$/logTrace" => {
                Self::LogTrace(<LogTrace as NotificationTrait>::deserialize(notification)?)
            }
            "$/progress" => {
                Self::Progress(<Progress as NotificationTrait>::deserialize(notification)?)
            }
            "telemetry/event" => Self::TelemetryEvent(
                <TelemetryEvent as NotificationTrait>::deserialize(notification)?,
            ),
            "textDocument/publishDiagnostics" => Self::TextDocumentPublishDiagnostics(
                <TextDocumentPublishDiagnostics as NotificationTrait>::deserialize(notification)?,
            ),
            "window/logMessage" => Self::WindowLogMessage(
                <WindowLogMessage as NotificationTrait>::deserialize(notification)?,
            ),
            "window/showMessage" => Self::WindowShowMessage(
                <WindowShowMessage as NotificationTrait>::deserialize(notification)?,
            ),
            _ => {
                return Err(std::io::Error::new(
                    std::io::ErrorKind::InvalidData,
                    "Unknown method",
                ));
            }
        })
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         ServerRequest                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// Parameters of a server-to-client request.
#[derive(Clone, PartialEq, Debug)]
pub enum ServerRequest {
    /// @see [`ClientRegisterCapability`](super::requests::ClientRegisterCapability).
    ClientRegisterCapability(Id, super::structures::RegistrationParams),
    /// @see [`ClientUnregisterCapability`](super::requests::ClientUnregisterCapability).
    ClientUnregisterCapability(Id, super::structures::UnregistrationParams),
    /// @see [`WindowShowDocument`](super::requests::WindowShowDocument).
    WindowShowDocument(Id, super::structures::ShowDocumentParams),
    /// @see [`WindowShowMessageRequest`](super::requests::WindowShowMessageRequest).
    WindowShowMessageRequest(Id, super::structures::ShowMessageRequestParams),
    /// @see [`WindowWorkDoneProgressCreate`](super::requests::WindowWorkDoneProgressCreate).
    WindowWorkDoneProgressCreate(Id, super::structures::WorkDoneProgressCreateParams),
    /// @see [`WorkspaceApplyEdit`](super::requests::WorkspaceApplyEdit).
    WorkspaceApplyEdit(Id, super::structures::ApplyWorkspaceEditParams),
    /// @see [`WorkspaceCodeLensRefresh`](super::requests::WorkspaceCodeLensRefresh).
    WorkspaceCodeLensRefresh(Id),
    /// @see [`WorkspaceConfiguration`](super::requests::WorkspaceConfiguration).
    WorkspaceConfiguration(Id, super::structures::ConfigurationParams),
    /// @see [`WorkspaceDiagnosticRefresh`](super::requests::WorkspaceDiagnosticRefresh).
    WorkspaceDiagnosticRefresh(Id),
    /// @see [`WorkspaceInlayHintRefresh`](super::requests::WorkspaceInlayHintRefresh).
    WorkspaceInlayHintRefresh(Id),
    /// @see [`WorkspaceInlineValueRefresh`](super::requests::WorkspaceInlineValueRefresh).
    WorkspaceInlineValueRefresh(Id),
    /// @see [`WorkspaceSemanticTokensRefresh`](super::requests::WorkspaceSemanticTokensRefresh).
    WorkspaceSemanticTokensRefresh(Id),
    /// @see [`WorkspaceWorkspaceFolders`](super::requests::WorkspaceWorkspaceFolders).
    WorkspaceWorkspaceFolders(Id),
}

impl ServerRequest {
    pub fn deserialize(request: Request<Value>) -> std::io::Result<Self> {
        Ok(match request.method.as_ref() {
            "client/registerCapability" => Self::ClientRegisterCapability(
                request.id.clone(),
                <ClientRegisterCapability as RequestTrait>::deserialize_request(request)?,
            ),
            "client/unregisterCapability" => Self::ClientUnregisterCapability(
                request.id.clone(),
                <ClientUnregisterCapability as RequestTrait>::deserialize_request(request)?,
            ),
            "window/showDocument" => Self::WindowShowDocument(
                request.id.clone(),
                <WindowShowDocument as RequestTrait>::deserialize_request(request)?,
            ),
            "window/showMessageRequest" => Self::WindowShowMessageRequest(
                request.id.clone(),
                <WindowShowMessageRequest as RequestTrait>::deserialize_request(request)?,
            ),
            "window/workDoneProgress/create" => Self::WindowWorkDoneProgressCreate(
                request.id.clone(),
                <WindowWorkDoneProgressCreate as RequestTrait>::deserialize_request(request)?,
            ),
            "workspace/applyEdit" => Self::WorkspaceApplyEdit(
                request.id.clone(),
                <WorkspaceApplyEdit as RequestTrait>::deserialize_request(request)?,
            ),
            "workspace/codeLens/refresh" => {
                debug_assert!(request.params.is_none());
                Self::WorkspaceCodeLensRefresh(request.id)
            }
            "workspace/configuration" => Self::WorkspaceConfiguration(
                request.id.clone(),
                <WorkspaceConfiguration as RequestTrait>::deserialize_request(request)?,
            ),
            "workspace/diagnostic/refresh" => {
                debug_assert!(request.params.is_none());
                Self::WorkspaceDiagnosticRefresh(request.id)
            }
            "workspace/inlayHint/refresh" => {
                debug_assert!(request.params.is_none());
                Self::WorkspaceInlayHintRefresh(request.id)
            }
            "workspace/inlineValue/refresh" => {
                debug_assert!(request.params.is_none());
                Self::WorkspaceInlineValueRefresh(request.id)
            }
            "workspace/semanticTokens/refresh" => {
                debug_assert!(request.params.is_none());
                Self::WorkspaceSemanticTokensRefresh(request.id)
            }
            "workspace/workspaceFolders" => {
                debug_assert!(request.params.is_none());
                Self::WorkspaceWorkspaceFolders(request.id)
            }
            _ => {
                return Err(std::io::Error::new(
                    std::io::ErrorKind::InvalidData,
                    "Unknown method",
                ));
            }
        })
    }
}
