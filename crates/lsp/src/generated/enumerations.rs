// 🚨 This file is generated by `cargo xtask-lsp`

use super::*;

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         CodeActionKind                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A set of predefined code action kinds
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeActionKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum CodeActionKind {
    /// Empty kind.
    #[serde(rename = "")]
    Empty,
    /// Base kind for quickfix actions: 'quickfix'
    #[serde(rename = "quickfix")]
    QuickFix,
    /// Base kind for refactoring actions: 'refactor'
    #[serde(rename = "refactor")]
    Refactor,
    /// Base kind for refactoring extraction actions: 'refactor.extract'
    ///
    /// Example extract actions:
    ///
    /// - Extract method
    /// - Extract function
    /// - Extract variable
    /// - Extract interface from class
    /// - ...
    #[serde(rename = "refactor.extract")]
    RefactorExtract,
    /// Base kind for refactoring inline actions: 'refactor.inline'
    ///
    /// Example inline actions:
    ///
    /// - Inline function
    /// - Inline variable
    /// - Inline constant
    /// - ...
    #[serde(rename = "refactor.inline")]
    RefactorInline,
    /// Base kind for refactoring rewrite actions: 'refactor.rewrite'
    ///
    /// Example rewrite actions:
    ///
    /// - Convert JavaScript function to class
    /// - Add or remove parameter
    /// - Encapsulate field
    /// - Make method static
    /// - Move method to base class
    /// - ...
    #[serde(rename = "refactor.rewrite")]
    RefactorRewrite,
    /// Base kind for source actions: `source`
    ///
    /// Source code actions apply to the entire file.
    #[serde(rename = "source")]
    Source,
    /// Base kind for an organize imports source action: `source.organizeImports`
    #[serde(rename = "source.organizeImports")]
    SourceOrganizeImports,
    /// Base kind for auto-fix source actions: `source.fixAll`.
    ///
    /// Fix all actions automatically fix errors that have a clear fix that do not require user input.
    /// They should not suppress errors or perform unsafe fixes such as generating new types or classes.
    ///
    /// @since 3.15.0
    #[serde(rename = "source.fixAll")]
    SourceFixAll,
    /// Custom value.
    #[serde(untagged)]
    Custom(String),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     CodeActionTriggerKind                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The reason why code actions were requested.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeActionTriggerKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum CodeActionTriggerKind {
    /// Code actions were explicitly requested by the user or by an extension.
    Invoked,
    /// Code actions were requested automatically.
    ///
    /// This typically happens when current selection in a file changes, but can
    /// also be triggered when file content changes.
    Automatic,
}

impl TryFrom<u32> for CodeActionTriggerKind {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => CodeActionTriggerKind::Invoked,
            2u32 => CodeActionTriggerKind::Automatic,
            _ => {
                return Err(format!(
                    "Invalid `{}` value: {value}",
                    "CodeActionTriggerKind"
                ));
            }
        })
    }
}

impl Into<u32> for CodeActionTriggerKind {
    fn into(self) -> u32 {
        match self {
            CodeActionTriggerKind::Invoked => 1u32,
            CodeActionTriggerKind::Automatic => 2u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       CompletionItemKind                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The kind of a completion entry.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#completionItemKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum CompletionItemKind {
    Text,
    Method,
    Function,
    Constructor,
    Field,
    Variable,
    Class,
    Interface,
    Module,
    Property,
    Unit,
    Value,
    Enum,
    Keyword,
    Snippet,
    Color,
    File,
    Reference,
    Folder,
    EnumMember,
    Constant,
    Struct,
    Event,
    Operator,
    TypeParameter,
}

impl TryFrom<u32> for CompletionItemKind {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => CompletionItemKind::Text,
            2u32 => CompletionItemKind::Method,
            3u32 => CompletionItemKind::Function,
            4u32 => CompletionItemKind::Constructor,
            5u32 => CompletionItemKind::Field,
            6u32 => CompletionItemKind::Variable,
            7u32 => CompletionItemKind::Class,
            8u32 => CompletionItemKind::Interface,
            9u32 => CompletionItemKind::Module,
            10u32 => CompletionItemKind::Property,
            11u32 => CompletionItemKind::Unit,
            12u32 => CompletionItemKind::Value,
            13u32 => CompletionItemKind::Enum,
            14u32 => CompletionItemKind::Keyword,
            15u32 => CompletionItemKind::Snippet,
            16u32 => CompletionItemKind::Color,
            17u32 => CompletionItemKind::File,
            18u32 => CompletionItemKind::Reference,
            19u32 => CompletionItemKind::Folder,
            20u32 => CompletionItemKind::EnumMember,
            21u32 => CompletionItemKind::Constant,
            22u32 => CompletionItemKind::Struct,
            23u32 => CompletionItemKind::Event,
            24u32 => CompletionItemKind::Operator,
            25u32 => CompletionItemKind::TypeParameter,
            _ => {
                return Err(format!("Invalid `{}` value: {value}", "CompletionItemKind"));
            }
        })
    }
}

impl Into<u32> for CompletionItemKind {
    fn into(self) -> u32 {
        match self {
            CompletionItemKind::Text => 1u32,
            CompletionItemKind::Method => 2u32,
            CompletionItemKind::Function => 3u32,
            CompletionItemKind::Constructor => 4u32,
            CompletionItemKind::Field => 5u32,
            CompletionItemKind::Variable => 6u32,
            CompletionItemKind::Class => 7u32,
            CompletionItemKind::Interface => 8u32,
            CompletionItemKind::Module => 9u32,
            CompletionItemKind::Property => 10u32,
            CompletionItemKind::Unit => 11u32,
            CompletionItemKind::Value => 12u32,
            CompletionItemKind::Enum => 13u32,
            CompletionItemKind::Keyword => 14u32,
            CompletionItemKind::Snippet => 15u32,
            CompletionItemKind::Color => 16u32,
            CompletionItemKind::File => 17u32,
            CompletionItemKind::Reference => 18u32,
            CompletionItemKind::Folder => 19u32,
            CompletionItemKind::EnumMember => 20u32,
            CompletionItemKind::Constant => 21u32,
            CompletionItemKind::Struct => 22u32,
            CompletionItemKind::Event => 23u32,
            CompletionItemKind::Operator => 24u32,
            CompletionItemKind::TypeParameter => 25u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       CompletionItemTag                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Completion item tags are extra annotations that tweak the rendering of a completion
/// item.
///
/// @since 3.15.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#completionItemTag (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum CompletionItemTag {
    /// Render a completion as obsolete, usually using a strike-out.
    Deprecated,
}

impl TryFrom<u32> for CompletionItemTag {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => CompletionItemTag::Deprecated,
            _ => {
                return Err(format!("Invalid `{}` value: {value}", "CompletionItemTag"));
            }
        })
    }
}

impl Into<u32> for CompletionItemTag {
    fn into(self) -> u32 {
        match self {
            CompletionItemTag::Deprecated => 1u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     CompletionTriggerKind                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] How a completion was triggered
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#completionTriggerKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum CompletionTriggerKind {
    /// Completion was triggered by typing an identifier (24x7 code
    /// complete), manual invocation (e.g Ctrl+Space) or via API.
    Invoked,
    /// Completion was triggered by a trigger character specified by
    /// the `triggerCharacters` properties of the `CompletionRegistrationOptions`.
    TriggerCharacter,
    /// Completion was re-triggered as current completion list is incomplete
    TriggerForIncompleteCompletions,
}

impl TryFrom<u32> for CompletionTriggerKind {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => CompletionTriggerKind::Invoked,
            2u32 => CompletionTriggerKind::TriggerCharacter,
            3u32 => CompletionTriggerKind::TriggerForIncompleteCompletions,
            _ => {
                return Err(format!(
                    "Invalid `{}` value: {value}",
                    "CompletionTriggerKind"
                ));
            }
        })
    }
}

impl Into<u32> for CompletionTriggerKind {
    fn into(self) -> u32 {
        match self {
            CompletionTriggerKind::Invoked => 1u32,
            CompletionTriggerKind::TriggerCharacter => 2u32,
            CompletionTriggerKind::TriggerForIncompleteCompletions => 3u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       DiagnosticSeverity                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The diagnostic's severity.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnosticSeverity (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum DiagnosticSeverity {
    /// Reports an error.
    Error,
    /// Reports a warning.
    Warning,
    /// Reports an information.
    Information,
    /// Reports a hint.
    Hint,
}

impl TryFrom<u32> for DiagnosticSeverity {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => DiagnosticSeverity::Error,
            2u32 => DiagnosticSeverity::Warning,
            3u32 => DiagnosticSeverity::Information,
            4u32 => DiagnosticSeverity::Hint,
            _ => {
                return Err(format!("Invalid `{}` value: {value}", "DiagnosticSeverity"));
            }
        })
    }
}

impl Into<u32> for DiagnosticSeverity {
    fn into(self) -> u32 {
        match self {
            DiagnosticSeverity::Error => 1u32,
            DiagnosticSeverity::Warning => 2u32,
            DiagnosticSeverity::Information => 3u32,
            DiagnosticSeverity::Hint => 4u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         DiagnosticTag                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The diagnostic tags.
///
/// @since 3.15.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#diagnosticTag (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum DiagnosticTag {
    /// Unused or unnecessary code.
    ///
    /// Clients are allowed to render diagnostics with this tag faded out instead of having
    /// an error squiggle.
    Unnecessary,
    /// Deprecated or obsolete code.
    ///
    /// Clients are allowed to rendered diagnostics with this tag strike through.
    Deprecated,
}

impl TryFrom<u32> for DiagnosticTag {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => DiagnosticTag::Unnecessary,
            2u32 => DiagnosticTag::Deprecated,
            _ => return Err(format!("Invalid `{}` value: {value}", "DiagnosticTag")),
        })
    }
}

impl Into<u32> for DiagnosticTag {
    fn into(self) -> u32 {
        match self {
            DiagnosticTag::Unnecessary => 1u32,
            DiagnosticTag::Deprecated => 2u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                  DocumentDiagnosticReportKind                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The document diagnostic report kinds.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentDiagnosticReportKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum DocumentDiagnosticReportKind {
    /// A diagnostic report with a full
    /// set of problems.
    #[serde(rename = "full")]
    Full,
    /// A report indicating that the last
    /// returned report is still accurate.
    #[serde(rename = "unchanged")]
    Unchanged,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     DocumentHighlightKind                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A document highlight kind.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#documentHighlightKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum DocumentHighlightKind {
    /// A textual occurrence.
    Text,
    /// Read-access of a symbol, like reading a variable.
    Read,
    /// Write-access of a symbol, like writing to a variable.
    Write,
}

impl TryFrom<u32> for DocumentHighlightKind {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => DocumentHighlightKind::Text,
            2u32 => DocumentHighlightKind::Read,
            3u32 => DocumentHighlightKind::Write,
            _ => {
                return Err(format!(
                    "Invalid `{}` value: {value}",
                    "DocumentHighlightKind"
                ));
            }
        })
    }
}

impl Into<u32> for DocumentHighlightKind {
    fn into(self) -> u32 {
        match self {
            DocumentHighlightKind::Text => 1u32,
            DocumentHighlightKind::Read => 2u32,
            DocumentHighlightKind::Write => 3u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           ErrorCodes                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Predefined error codes.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#errorCodes (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(from = "i32")]
#[serde(into = "i32")]
pub enum ErrorCodes {
    ParseError,
    InvalidRequest,
    MethodNotFound,
    InvalidParams,
    InternalError,
    /// Error code indicating that a server received a notification or
    /// request before the server has received the `initialize` request.
    ServerNotInitialized,
    UnknownErrorCode,
    /// Custom value.
    Custom(i32),
}

impl From<i32> for ErrorCodes {
    fn from(value: i32) -> Self {
        match value {
            -32700i32 => ErrorCodes::ParseError,
            -32600i32 => ErrorCodes::InvalidRequest,
            -32601i32 => ErrorCodes::MethodNotFound,
            -32602i32 => ErrorCodes::InvalidParams,
            -32603i32 => ErrorCodes::InternalError,
            -32002i32 => ErrorCodes::ServerNotInitialized,
            -32001i32 => ErrorCodes::UnknownErrorCode,
            _ => ErrorCodes::Custom(value),
        }
    }
}

impl Into<i32> for ErrorCodes {
    fn into(self) -> i32 {
        match self {
            ErrorCodes::ParseError => -32700i32,
            ErrorCodes::InvalidRequest => -32600i32,
            ErrorCodes::MethodNotFound => -32601i32,
            ErrorCodes::InvalidParams => -32602i32,
            ErrorCodes::InternalError => -32603i32,
            ErrorCodes::ServerNotInitialized => -32002i32,
            ErrorCodes::UnknownErrorCode => -32001i32,
            ErrorCodes::Custom(value) => value,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      FailureHandlingKind                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#failureHandlingKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum FailureHandlingKind {
    /// Applying the workspace change is simply aborted if one of the changes provided
    /// fails. All operations executed before the failing operation stay executed.
    #[serde(rename = "abort")]
    Abort,
    /// All operations are executed transactional. That means they either all
    /// succeed or no changes at all are applied to the workspace.
    #[serde(rename = "transactional")]
    Transactional,
    /// If the workspace edit contains only textual file changes they are executed transactional.
    /// If resource changes (create, rename or delete file) are part of the change the failure
    /// handling strategy is abort.
    #[serde(rename = "textOnlyTransactional")]
    TextOnlyTransactional,
    /// The client tries to undo the operations already executed. But there is no
    /// guarantee that this is succeeding.
    #[serde(rename = "undo")]
    Undo,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         FileChangeType                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The file event type
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#fileChangeType (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum FileChangeType {
    /// The file got created.
    Created,
    /// The file got changed.
    Changed,
    /// The file got deleted.
    Deleted,
}

impl TryFrom<u32> for FileChangeType {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => FileChangeType::Created,
            2u32 => FileChangeType::Changed,
            3u32 => FileChangeType::Deleted,
            _ => return Err(format!("Invalid `{}` value: {value}", "FileChangeType")),
        })
    }
}

impl Into<u32> for FileChangeType {
    fn into(self) -> u32 {
        match self {
            FileChangeType::Created => 1u32,
            FileChangeType::Changed => 2u32,
            FileChangeType::Deleted => 3u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    FileOperationPatternKind                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A pattern kind describing if a glob pattern matches a file a folder or
/// both.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#fileOperationPatternKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum FileOperationPatternKind {
    /// The pattern matches a file only.
    #[serde(rename = "file")]
    File,
    /// The pattern matches a folder only.
    #[serde(rename = "folder")]
    Folder,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        FoldingRangeKind                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A set of predefined range kinds.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#foldingRangeKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum FoldingRangeKind {
    /// Folding range for a comment
    #[serde(rename = "comment")]
    Comment,
    /// Folding range for an import or include
    #[serde(rename = "imports")]
    Imports,
    /// Folding range for a region (e.g. `#region`)
    #[serde(rename = "region")]
    Region,
    /// Custom value.
    #[serde(untagged)]
    Custom(String),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         InlayHintKind                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Inlay hint kinds.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlayHintKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum InlayHintKind {
    /// An inlay hint that for a type annotation.
    Type,
    /// An inlay hint that is for a parameter.
    Parameter,
}

impl TryFrom<u32> for InlayHintKind {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => InlayHintKind::Type,
            2u32 => InlayHintKind::Parameter,
            _ => return Err(format!("Invalid `{}` value: {value}", "InlayHintKind")),
        })
    }
}

impl Into<u32> for InlayHintKind {
    fn into(self) -> u32 {
        match self {
            InlayHintKind::Type => 1u32,
            InlayHintKind::Parameter => 2u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        InsertTextFormat                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Defines whether the insert text in a completion item should be interpreted as
/// plain text or a snippet.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#insertTextFormat (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum InsertTextFormat {
    /// The primary text to be inserted is treated as a plain string.
    PlainText,
    /// The primary text to be inserted is treated as a snippet.
    ///
    /// A snippet can define tab stops and placeholders with `$1`, `$2`
    /// and `${3:foo}`. `$0` defines the final tab stop, it defaults to
    /// the end of the snippet. Placeholders with equal identifiers are linked,
    /// that is typing in one will update others too.
    ///
    /// See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax
    Snippet,
}

impl TryFrom<u32> for InsertTextFormat {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => InsertTextFormat::PlainText,
            2u32 => InsertTextFormat::Snippet,
            _ => {
                return Err(format!("Invalid `{}` value: {value}", "InsertTextFormat"));
            }
        })
    }
}

impl Into<u32> for InsertTextFormat {
    fn into(self) -> u32 {
        match self {
            InsertTextFormat::PlainText => 1u32,
            InsertTextFormat::Snippet => 2u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         InsertTextMode                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] How whitespace and indentation is handled during completion
/// item insertion.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#insertTextMode (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum InsertTextMode {
    /// The insertion or replace strings is taken as it is. If the
    /// value is multi line the lines below the cursor will be
    /// inserted using the indentation defined in the string value.
    /// The client will not apply any kind of adjustments to the
    /// string.
    AsIs,
    /// The editor adjusts leading whitespace of new lines so that
    /// they match the indentation up to the cursor of the line for
    /// which the item is accepted.
    ///
    /// Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a
    /// multi line completion item is indented using 2 tabs and all
    /// following lines inserted will be indented using 2 tabs as well.
    AdjustIndentation,
}

impl TryFrom<u32> for InsertTextMode {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => InsertTextMode::AsIs,
            2u32 => InsertTextMode::AdjustIndentation,
            _ => return Err(format!("Invalid `{}` value: {value}", "InsertTextMode")),
        })
    }
}

impl Into<u32> for InsertTextMode {
    fn into(self) -> u32 {
        match self {
            InsertTextMode::AsIs => 1u32,
            InsertTextMode::AdjustIndentation => 2u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                         LspErrorCodes                                          //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#lspErrorCodes (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(from = "i32")]
#[serde(into = "i32")]
pub enum LspErrorCodes {
    /// A request failed but it was syntactically correct, e.g the
    /// method name was known and the parameters were valid. The error
    /// message should contain human readable information about why
    /// the request failed.
    ///
    /// @since 3.17.0
    RequestFailed,
    /// The server cancelled the request. This error code should
    /// only be used for requests that explicitly support being
    /// server cancellable.
    ///
    /// @since 3.17.0
    ServerCancelled,
    /// The server detected that the content of a document got
    /// modified outside normal conditions. A server should
    /// NOT send this error code if it detects a content change
    /// in it unprocessed messages. The result even computed
    /// on an older state might still be useful for the client.
    ///
    /// If a client decides that a result is not of any use anymore
    /// the client should cancel the request.
    ContentModified,
    /// The client has canceled a request and a server has detected
    /// the cancel.
    RequestCancelled,
    /// Custom value.
    Custom(i32),
}

impl From<i32> for LspErrorCodes {
    fn from(value: i32) -> Self {
        match value {
            -32803i32 => LspErrorCodes::RequestFailed,
            -32802i32 => LspErrorCodes::ServerCancelled,
            -32801i32 => LspErrorCodes::ContentModified,
            -32800i32 => LspErrorCodes::RequestCancelled,
            _ => LspErrorCodes::Custom(value),
        }
    }
}

impl Into<i32> for LspErrorCodes {
    fn into(self) -> i32 {
        match self {
            LspErrorCodes::RequestFailed => -32803i32,
            LspErrorCodes::ServerCancelled => -32802i32,
            LspErrorCodes::ContentModified => -32801i32,
            LspErrorCodes::RequestCancelled => -32800i32,
            LspErrorCodes::Custom(value) => value,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           MarkupKind                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Describes the content type that a client supports in various
/// result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
///
/// Please note that `MarkupKinds` must not start with a `$`. This kinds
/// are reserved for internal usage.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#markupKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum MarkupKind {
    /// Plain text is supported as a content format
    #[serde(rename = "plaintext")]
    PlainText,
    /// Markdown is supported as a content format
    #[serde(rename = "markdown")]
    Markdown,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          MessageType                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The message type
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#messageType (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum MessageType {
    /// An error message.
    Error,
    /// A warning message.
    Warning,
    /// An information message.
    Info,
    /// A log message.
    Log,
    /// A debug message.
    ///
    /// @since 3.18.0
    Debug,
}

impl TryFrom<u32> for MessageType {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => MessageType::Error,
            2u32 => MessageType::Warning,
            3u32 => MessageType::Info,
            4u32 => MessageType::Log,
            5u32 => MessageType::Debug,
            _ => return Err(format!("Invalid `{}` value: {value}", "MessageType")),
        })
    }
}

impl Into<u32> for MessageType {
    fn into(self) -> u32 {
        match self {
            MessageType::Error => 1u32,
            MessageType::Warning => 2u32,
            MessageType::Info => 3u32,
            MessageType::Log => 4u32,
            MessageType::Debug => 5u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          MonikerKind                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] The moniker kind.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#monikerKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum MonikerKind {
    /// The moniker represent a symbol that is imported into a project
    #[serde(rename = "import")]
    Import,
    /// The moniker represents a symbol that is exported from a project
    #[serde(rename = "export")]
    Export,
    /// The moniker represents a symbol that is local to a project (e.g. a local
    /// variable of a function, a class not visible outside the project, ...)
    #[serde(rename = "local")]
    Local,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        NotebookCellKind                                        //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A notebook cell kind.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#notebookCellKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum NotebookCellKind {
    /// A markup-cell is formatted source that is used for display.
    Markup,
    /// A code-cell is source code.
    Code,
}

impl TryFrom<u32> for NotebookCellKind {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => NotebookCellKind::Markup,
            2u32 => NotebookCellKind::Code,
            _ => {
                return Err(format!("Invalid `{}` value: {value}", "NotebookCellKind"));
            }
        })
    }
}

impl Into<u32> for NotebookCellKind {
    fn into(self) -> u32 {
        match self {
            NotebookCellKind::Markup => 1u32,
            NotebookCellKind::Code => 2u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      PositionEncodingKind                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A set of predefined position encoding kinds.
///
/// @since 3.17.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#positionEncodingKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum PositionEncodingKind {
    /// Character offsets count UTF-8 code units (e.g. bytes).
    #[serde(rename = "utf-8")]
    Utf8,
    /// Character offsets count UTF-16 code units.
    ///
    /// This is the default and must always be supported
    /// by servers
    #[serde(rename = "utf-16")]
    Utf16,
    /// Character offsets count UTF-32 code units.
    ///
    /// Implementation note: these are the same as Unicode codepoints,
    /// so this `PositionEncodingKind` may also be used for an
    /// encoding-agnostic representation of character offsets.
    #[serde(rename = "utf-32")]
    Utf32,
    /// Custom value.
    #[serde(untagged)]
    Custom(String),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                 PrepareSupportDefaultBehavior                                  //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#prepareSupportDefaultBehavior (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum PrepareSupportDefaultBehavior {
    /// The client's default behavior is to select the identifier
    /// according the to language's syntax rule.
    Identifier,
}

impl TryFrom<u32> for PrepareSupportDefaultBehavior {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => PrepareSupportDefaultBehavior::Identifier,
            _ => {
                return Err(format!(
                    "Invalid `{}` value: {value}",
                    "PrepareSupportDefaultBehavior"
                ));
            }
        })
    }
}

impl Into<u32> for PrepareSupportDefaultBehavior {
    fn into(self) -> u32 {
        match self {
            PrepareSupportDefaultBehavior::Identifier => 1u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     ResourceOperationKind                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#resourceOperationKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum ResourceOperationKind {
    /// Supports creating new files and folders.
    #[serde(rename = "create")]
    Create,
    /// Supports renaming existing files and folders.
    #[serde(rename = "rename")]
    Rename,
    /// Supports deleting existing files and folders.
    #[serde(rename = "delete")]
    Delete,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     SemanticTokenModifiers                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A set of predefined token modifiers. This set is not fixed
/// an clients can specify additional token types via the
/// corresponding client capabilities.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#semanticTokenModifiers (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum SemanticTokenModifiers {
    #[serde(rename = "declaration")]
    Declaration,
    #[serde(rename = "definition")]
    Definition,
    #[serde(rename = "readonly")]
    Readonly,
    #[serde(rename = "static")]
    Static,
    #[serde(rename = "deprecated")]
    Deprecated,
    #[serde(rename = "abstract")]
    Abstract,
    #[serde(rename = "async")]
    Async,
    #[serde(rename = "modification")]
    Modification,
    #[serde(rename = "documentation")]
    Documentation,
    #[serde(rename = "defaultLibrary")]
    DefaultLibrary,
    /// Custom value.
    #[serde(untagged)]
    Custom(String),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                       SemanticTokenTypes                                       //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A set of predefined token types. This set is not fixed
/// an clients can specify additional token types via the
/// corresponding client capabilities.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#semanticTokenTypes (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum SemanticTokenTypes {
    #[serde(rename = "namespace")]
    Namespace,
    /// Represents a generic type. Acts as a fallback for types which can't be mapped to
    /// a specific type like class or enum.
    #[serde(rename = "type")]
    Type,
    #[serde(rename = "class")]
    Class,
    #[serde(rename = "enum")]
    Enum,
    #[serde(rename = "interface")]
    Interface,
    #[serde(rename = "struct")]
    Struct,
    #[serde(rename = "typeParameter")]
    TypeParameter,
    #[serde(rename = "parameter")]
    Parameter,
    #[serde(rename = "variable")]
    Variable,
    #[serde(rename = "property")]
    Property,
    #[serde(rename = "enumMember")]
    EnumMember,
    #[serde(rename = "event")]
    Event,
    #[serde(rename = "function")]
    Function,
    #[serde(rename = "method")]
    Method,
    #[serde(rename = "macro")]
    Macro,
    #[serde(rename = "keyword")]
    Keyword,
    #[serde(rename = "modifier")]
    Modifier,
    #[serde(rename = "comment")]
    Comment,
    #[serde(rename = "string")]
    String,
    #[serde(rename = "number")]
    Number,
    #[serde(rename = "regexp")]
    Regexp,
    #[serde(rename = "operator")]
    Operator,
    /// @since 3.17.0
    #[serde(rename = "decorator")]
    Decorator,
    /// Custom value.
    #[serde(untagged)]
    Custom(String),
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                    SignatureHelpTriggerKind                                    //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] How a signature help was triggered.
///
/// @since 3.15.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#signatureHelpTriggerKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum SignatureHelpTriggerKind {
    /// Signature help was invoked manually by the user or by a command.
    Invoked,
    /// Signature help was triggered by a trigger character.
    TriggerCharacter,
    /// Signature help was triggered by the cursor moving or by the document content changing.
    ContentChange,
}

impl TryFrom<u32> for SignatureHelpTriggerKind {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => SignatureHelpTriggerKind::Invoked,
            2u32 => SignatureHelpTriggerKind::TriggerCharacter,
            3u32 => SignatureHelpTriggerKind::ContentChange,
            _ => {
                return Err(format!(
                    "Invalid `{}` value: {value}",
                    "SignatureHelpTriggerKind"
                ));
            }
        })
    }
}

impl Into<u32> for SignatureHelpTriggerKind {
    fn into(self) -> u32 {
        match self {
            SignatureHelpTriggerKind::Invoked => 1u32,
            SignatureHelpTriggerKind::TriggerCharacter => 2u32,
            SignatureHelpTriggerKind::ContentChange => 3u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           SymbolKind                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] A symbol kind.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#symbolKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum SymbolKind {
    File,
    Module,
    Namespace,
    Package,
    Class,
    Method,
    Property,
    Field,
    Constructor,
    Enum,
    Interface,
    Function,
    Variable,
    Constant,
    String,
    Number,
    Boolean,
    Array,
    Object,
    Key,
    Null,
    EnumMember,
    Struct,
    Event,
    Operator,
    TypeParameter,
}

impl TryFrom<u32> for SymbolKind {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => SymbolKind::File,
            2u32 => SymbolKind::Module,
            3u32 => SymbolKind::Namespace,
            4u32 => SymbolKind::Package,
            5u32 => SymbolKind::Class,
            6u32 => SymbolKind::Method,
            7u32 => SymbolKind::Property,
            8u32 => SymbolKind::Field,
            9u32 => SymbolKind::Constructor,
            10u32 => SymbolKind::Enum,
            11u32 => SymbolKind::Interface,
            12u32 => SymbolKind::Function,
            13u32 => SymbolKind::Variable,
            14u32 => SymbolKind::Constant,
            15u32 => SymbolKind::String,
            16u32 => SymbolKind::Number,
            17u32 => SymbolKind::Boolean,
            18u32 => SymbolKind::Array,
            19u32 => SymbolKind::Object,
            20u32 => SymbolKind::Key,
            21u32 => SymbolKind::Null,
            22u32 => SymbolKind::EnumMember,
            23u32 => SymbolKind::Struct,
            24u32 => SymbolKind::Event,
            25u32 => SymbolKind::Operator,
            26u32 => SymbolKind::TypeParameter,
            _ => return Err(format!("Invalid `{}` value: {value}", "SymbolKind")),
        })
    }
}

impl Into<u32> for SymbolKind {
    fn into(self) -> u32 {
        match self {
            SymbolKind::File => 1u32,
            SymbolKind::Module => 2u32,
            SymbolKind::Namespace => 3u32,
            SymbolKind::Package => 4u32,
            SymbolKind::Class => 5u32,
            SymbolKind::Method => 6u32,
            SymbolKind::Property => 7u32,
            SymbolKind::Field => 8u32,
            SymbolKind::Constructor => 9u32,
            SymbolKind::Enum => 10u32,
            SymbolKind::Interface => 11u32,
            SymbolKind::Function => 12u32,
            SymbolKind::Variable => 13u32,
            SymbolKind::Constant => 14u32,
            SymbolKind::String => 15u32,
            SymbolKind::Number => 16u32,
            SymbolKind::Boolean => 17u32,
            SymbolKind::Array => 18u32,
            SymbolKind::Object => 19u32,
            SymbolKind::Key => 20u32,
            SymbolKind::Null => 21u32,
            SymbolKind::EnumMember => 22u32,
            SymbolKind::Struct => 23u32,
            SymbolKind::Event => 24u32,
            SymbolKind::Operator => 25u32,
            SymbolKind::TypeParameter => 26u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           SymbolTag                                            //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Symbol tags are extra annotations that tweak the rendering of a symbol.
///
/// @since 3.16
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#symbolTag (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum SymbolTag {
    /// Render a symbol as obsolete, usually using a strike-out.
    Deprecated,
}

impl TryFrom<u32> for SymbolTag {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => SymbolTag::Deprecated,
            _ => return Err(format!("Invalid `{}` value: {value}", "SymbolTag")),
        })
    }
}

impl Into<u32> for SymbolTag {
    fn into(self) -> u32 {
        match self {
            SymbolTag::Deprecated => 1u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                     TextDocumentSaveReason                                     //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Represents reasons why a text document is saved.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentSaveReason (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum TextDocumentSaveReason {
    /// Manually triggered, e.g. by the user pressing save, by starting debugging,
    /// or by an API call.
    Manual,
    /// Automatic after a delay.
    AfterDelay,
    /// When the editor lost focus.
    FocusOut,
}

impl TryFrom<u32> for TextDocumentSaveReason {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            1u32 => TextDocumentSaveReason::Manual,
            2u32 => TextDocumentSaveReason::AfterDelay,
            3u32 => TextDocumentSaveReason::FocusOut,
            _ => {
                return Err(format!(
                    "Invalid `{}` value: {value}",
                    "TextDocumentSaveReason"
                ));
            }
        })
    }
}

impl Into<u32> for TextDocumentSaveReason {
    fn into(self) -> u32 {
        match self {
            TextDocumentSaveReason::Manual => 1u32,
            TextDocumentSaveReason::AfterDelay => 2u32,
            TextDocumentSaveReason::FocusOut => 3u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                      TextDocumentSyncKind                                      //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Defines how the host (editor) should sync
/// document changes to the language server.
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentSyncKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(try_from = "u32")]
#[serde(into = "u32")]
pub enum TextDocumentSyncKind {
    /// Documents should not be synced at all.
    None,
    /// Documents are synced by always sending the full content
    /// of the document.
    Full,
    /// Documents are synced by sending the full content on open.
    /// After that only incremental updates to the document are
    /// send.
    Incremental,
}

impl TryFrom<u32> for TextDocumentSyncKind {
    type Error = String;
    fn try_from(value: u32) -> Result<Self, String> {
        Ok(match value {
            0u32 => TextDocumentSyncKind::None,
            1u32 => TextDocumentSyncKind::Full,
            2u32 => TextDocumentSyncKind::Incremental,
            _ => {
                return Err(format!(
                    "Invalid `{}` value: {value}",
                    "TextDocumentSyncKind"
                ));
            }
        })
    }
}

impl Into<u32> for TextDocumentSyncKind {
    fn into(self) -> u32 {
        match self {
            TextDocumentSyncKind::None => 0u32,
            TextDocumentSyncKind::Full => 1u32,
            TextDocumentSyncKind::Incremental => 2u32,
        }
    }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          TokenFormat                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#tokenFormat (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum TokenFormat {
    #[serde(rename = "relative")]
    Relative,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                          TraceValues                                           //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#traceValues (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum TraceValues {
    /// Turn tracing off.
    #[serde(rename = "off")]
    Off,
    /// Trace messages only.
    #[serde(rename = "messages")]
    Messages,
    /// Verbose message tracing.
    #[serde(rename = "verbose")]
    Verbose,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                        UniquenessLevel                                         //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs] Moniker uniqueness level to define scope of the moniker.
///
/// @since 3.16.0
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#uniquenessLevel (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub enum UniquenessLevel {
    /// The moniker is only unique inside a document
    #[serde(rename = "document")]
    Document,
    /// The moniker is unique inside a project for which a dump got created
    #[serde(rename = "project")]
    Project,
    /// The moniker is unique inside the group to which a project belongs
    #[serde(rename = "group")]
    Group,
    /// The moniker is unique inside the moniker scheme.
    #[serde(rename = "scheme")]
    Scheme,
    /// The moniker is globally unique
    #[serde(rename = "global")]
    Global,
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //
//                                           WatchKind                                            //
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ //

/// [📖][docs]
///
/// [docs]: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#watchKind (Documentation)
#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
#[serde(from = "u32")]
#[serde(into = "u32")]
pub enum WatchKind {
    /// Interested in create events.
    Create,
    /// Interested in change events
    Change,
    /// Interested in delete events
    Delete,
    /// Custom value.
    Custom(u32),
}

impl From<u32> for WatchKind {
    fn from(value: u32) -> Self {
        match value {
            1u32 => WatchKind::Create,
            2u32 => WatchKind::Change,
            4u32 => WatchKind::Delete,
            _ => WatchKind::Custom(value),
        }
    }
}

impl Into<u32> for WatchKind {
    fn into(self) -> u32 {
        match self {
            WatchKind::Create => 1u32,
            WatchKind::Change => 2u32,
            WatchKind::Delete => 4u32,
            WatchKind::Custom(value) => value,
        }
    }
}
